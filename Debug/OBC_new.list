
OBC_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b898  0800b898  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8a0  0800b8a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019a28  20000080  0800b928  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019aa8  0800b928  00029aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf1a  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d8  00000000  00000000  0003d00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  000410e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012dc  00000000  00000000  00042948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000633e  00000000  00000000  00043c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e22d  00000000  00000000  00049f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c73a  00000000  00000000  0006818f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006db4  00000000  00000000  001048cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3b8 	.word	0x0800b3b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800b3b8 	.word	0x0800b3b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8000582:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fd8a 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f96e 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fa00 	bl	8000990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f9d4 	bl	800093c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000594:	f003 f816 	bl	80035c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Create mutex before mounting
  myFileMutexHandle = osMutexNew(&myFileMutex_attributes);
 8000598:	4894      	ldr	r0, [pc, #592]	; (80007ec <main+0x270>)
 800059a:	f006 fb5e 	bl	8006c5a <osMutexNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a93      	ldr	r2, [pc, #588]	; (80007f0 <main+0x274>)
 80005a2:	6013      	str	r3, [r2, #0]
  if(myFileMutexHandle == NULL)
 80005a4:	4b92      	ldr	r3, [pc, #584]	; (80007f0 <main+0x274>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d101      	bne.n	80005b0 <main+0x34>
  {
      Error_Handler();
 80005ac:	f000 fb94 	bl	8000cd8 <Error_Handler>
  // Mount filesystem
  FATFS fs;
  FRESULT fres;

  /* Use "0:" to specify drive number 0 for RAM disk */
  fres = f_mount(&fs, "0:", 1);
 80005b0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80005b4:	2201      	movs	r2, #1
 80005b6:	498f      	ldr	r1, [pc, #572]	; (80007f4 <main+0x278>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 febd 	bl	8005338 <f_mount>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if (fres == FR_NO_FILESYSTEM) {
 80005c4:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80005c8:	2b0d      	cmp	r3, #13
 80005ca:	d139      	bne.n	8000640 <main+0xc4>
      printf("No filesystem found. Formatting...\r\n");
 80005cc:	488a      	ldr	r0, [pc, #552]	; (80007f8 <main+0x27c>)
 80005ce:	f00a f825 	bl	800a61c <puts>
       *  - `mkfs_work_buffer` is a 4096-byte buffer used for formatting.
       *
       */

      // Format the RAM disk with best FAT
      fres = f_mkfs("0:", FM_FAT | FM_SFD, 0, mkfs_work_buffer, MKFS_WORK_BUFFER_SIZE);
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	4b88      	ldr	r3, [pc, #544]	; (80007fc <main+0x280>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2109      	movs	r1, #9
 80005de:	4885      	ldr	r0, [pc, #532]	; (80007f4 <main+0x278>)
 80005e0:	f005 fd34 	bl	800604c <f_mkfs>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
      if (fres == FR_OK) {
 80005ea:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d11d      	bne.n	800062e <main+0xb2>
          printf("Format successful. Mounting again...\r\n");
 80005f2:	4883      	ldr	r0, [pc, #524]	; (8000800 <main+0x284>)
 80005f4:	f00a f812 	bl	800a61c <puts>
          fres = f_mount(&fs, "0:", 1);
 80005f8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80005fc:	2201      	movs	r2, #1
 80005fe:	497d      	ldr	r1, [pc, #500]	; (80007f4 <main+0x278>)
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fe99 	bl	8005338 <f_mount>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
          if (fres == FR_OK) {
 800060c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000610:	2b00      	cmp	r3, #0
 8000612:	d103      	bne.n	800061c <main+0xa0>
              printf("f_mount succeeded after formatting.\r\n");
 8000614:	487b      	ldr	r0, [pc, #492]	; (8000804 <main+0x288>)
 8000616:	f00a f801 	bl	800a61c <puts>
 800061a:	e021      	b.n	8000660 <main+0xe4>
          } else {
              printf("f_mount error after formatting (%i)\r\n", fres);
 800061c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000620:	4619      	mov	r1, r3
 8000622:	4879      	ldr	r0, [pc, #484]	; (8000808 <main+0x28c>)
 8000624:	f009 ff94 	bl	800a550 <iprintf>
              Error_Handler();
 8000628:	f000 fb56 	bl	8000cd8 <Error_Handler>
 800062c:	e018      	b.n	8000660 <main+0xe4>
          }
      } else {
          printf("f_mkfs error (%i)\r\n", fres);
 800062e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000632:	4619      	mov	r1, r3
 8000634:	4875      	ldr	r0, [pc, #468]	; (800080c <main+0x290>)
 8000636:	f009 ff8b 	bl	800a550 <iprintf>
          Error_Handler();
 800063a:	f000 fb4d 	bl	8000cd8 <Error_Handler>
 800063e:	e00f      	b.n	8000660 <main+0xe4>
      }
  }
  else if (fres != FR_OK)
 8000640:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <main+0xde>
  {
      printf("f_mount error (%i)\r\n", fres);
 8000648:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800064c:	4619      	mov	r1, r3
 800064e:	4870      	ldr	r0, [pc, #448]	; (8000810 <main+0x294>)
 8000650:	f009 ff7e 	bl	800a550 <iprintf>
      Error_Handler();
 8000654:	f000 fb40 	bl	8000cd8 <Error_Handler>
 8000658:	e002      	b.n	8000660 <main+0xe4>
  }
  else
  {
      printf("f_mount succeeded.\r\n");
 800065a:	486e      	ldr	r0, [pc, #440]	; (8000814 <main+0x298>)
 800065c:	f009 ffde 	bl	800a61c <puts>
  FIL file;
  UINT bw;
  FRESULT res;

  // Create and Write to a file
  res = f_open(&file, "0:/test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000664:	220a      	movs	r2, #10
 8000666:	496c      	ldr	r1, [pc, #432]	; (8000818 <main+0x29c>)
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fec9 	bl	8005400 <f_open>
 800066e:	4603      	mov	r3, r0
 8000670:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
  if (res == FR_OK) {
 8000674:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8000678:	2b00      	cmp	r3, #0
 800067a:	d131      	bne.n	80006e0 <main+0x164>
      char data[] = "Hello, RAM Disk!";
 800067c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000680:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000684:	4a65      	ldr	r2, [pc, #404]	; (800081c <main+0x2a0>)
 8000686:	461c      	mov	r4, r3
 8000688:	4615      	mov	r5, r2
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	682b      	ldr	r3, [r5, #0]
 8000690:	7023      	strb	r3, [r4, #0]
      res = f_write(&file, data, sizeof(data), &bw);
 8000692:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000696:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800069a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800069e:	2211      	movs	r2, #17
 80006a0:	f005 f9d2 	bl	8005a48 <f_write>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
      if (res == FR_OK && bw == sizeof(data)) {
 80006aa:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10a      	bne.n	80006c8 <main+0x14c>
 80006b2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80006b6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b11      	cmp	r3, #17
 80006be:	d103      	bne.n	80006c8 <main+0x14c>
          printf("Write successful.\r\n");
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <main+0x2a4>)
 80006c2:	f009 ffab 	bl	800a61c <puts>
 80006c6:	e005      	b.n	80006d4 <main+0x158>
      } else {
          printf("Write failed (%i)\r\n", res);
 80006c8:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 80006cc:	4619      	mov	r1, r3
 80006ce:	4855      	ldr	r0, [pc, #340]	; (8000824 <main+0x2a8>)
 80006d0:	f009 ff3e 	bl	800a550 <iprintf>
      }
      f_close(&file);
 80006d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 fbd6 	bl	8005e8a <f_close>
 80006de:	e005      	b.n	80006ec <main+0x170>
  } else {
      printf("f_open failed (%i)\r\n", res);
 80006e0:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 80006e4:	4619      	mov	r1, r3
 80006e6:	4850      	ldr	r0, [pc, #320]	; (8000828 <main+0x2ac>)
 80006e8:	f009 ff32 	bl	800a550 <iprintf>
  }

  // Read from the file
  res = f_open(&file, "0:/test.txt", FA_READ);
 80006ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006f0:	2201      	movs	r2, #1
 80006f2:	4949      	ldr	r1, [pc, #292]	; (8000818 <main+0x29c>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fe83 	bl	8005400 <f_open>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
  if (res == FR_OK) {
 8000700:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8000704:	2b00      	cmp	r3, #0
 8000706:	d12b      	bne.n	8000760 <main+0x1e4>
      char read_data[50];
      UINT br;
      res = f_read(&file, read_data, sizeof(read_data)-1, &br);
 8000708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070c:	1d39      	adds	r1, r7, #4
 800070e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000712:	2231      	movs	r2, #49	; 0x31
 8000714:	f005 f836 	bl	8005784 <f_read>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
      if (res == FR_OK) {
 800071e:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8000722:	2b00      	cmp	r3, #0
 8000724:	d110      	bne.n	8000748 <main+0x1cc>
          read_data[br] = '\0'; // Null-terminate the string
 8000726:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800072a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000734:	f2a2 42b4 	subw	r2, r2, #1204	; 0x4b4
 8000738:	2100      	movs	r1, #0
 800073a:	54d1      	strb	r1, [r2, r3]
          printf("Read data: %s\r\n", read_data);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	483a      	ldr	r0, [pc, #232]	; (800082c <main+0x2b0>)
 8000742:	f009 ff05 	bl	800a550 <iprintf>
 8000746:	e005      	b.n	8000754 <main+0x1d8>
      } else {
          printf("Read failed (%i)\r\n", res);
 8000748:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 800074c:	4619      	mov	r1, r3
 800074e:	4838      	ldr	r0, [pc, #224]	; (8000830 <main+0x2b4>)
 8000750:	f009 fefe 	bl	800a550 <iprintf>
      }
      f_close(&file);
 8000754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000758:	4618      	mov	r0, r3
 800075a:	f005 fb96 	bl	8005e8a <f_close>
 800075e:	e005      	b.n	800076c <main+0x1f0>
  } else {
      printf("f_open failed (%i)\r\n", res);
 8000760:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8000764:	4619      	mov	r1, r3
 8000766:	4830      	ldr	r0, [pc, #192]	; (8000828 <main+0x2ac>)
 8000768:	f009 fef2 	bl	800a550 <iprintf>
  }

  // Delete the file
  res = f_unlink("0:/test.txt");
 800076c:	482a      	ldr	r0, [pc, #168]	; (8000818 <main+0x29c>)
 800076e:	f005 fbbb 	bl	8005ee8 <f_unlink>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
  if (res == FR_OK) {
 8000778:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <main+0x20c>
      printf("Deleted test.txt successfully.\r\n");
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <main+0x2b8>)
 8000782:	f009 ff4b 	bl	800a61c <puts>
 8000786:	e005      	b.n	8000794 <main+0x218>
  } else {
      printf("Deleting test.txt failed (%i)\r\n", res);
 8000788:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 800078c:	4619      	mov	r1, r3
 800078e:	482a      	ldr	r0, [pc, #168]	; (8000838 <main+0x2bc>)
 8000790:	f009 fede 	bl	800a550 <iprintf>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000794:	f006 f96a 	bl	8006a6c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myFileMutex */
  myFileMutexHandle = osMutexNew(&myFileMutex_attributes);
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <main+0x270>)
 800079a:	f006 fa5e 	bl	8006c5a <osMutexNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <main+0x274>)
 80007a2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of file_semaphore */
  file_semaphoreHandle = osSemaphoreNew(1, 0, &file_semaphore_attributes);
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <main+0x2c0>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	2001      	movs	r0, #1
 80007aa:	f006 fb8a 	bl	8006ec2 <osSemaphoreNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <main+0x2c4>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <main+0x2c8>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <main+0x2cc>)
 80007ba:	f006 f9a1 	bl	8006b00 <osThreadNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <main+0x2d0>)
 80007c2:	6013      	str	r3, [r2, #0]

  /* creation of FAT_w_task */
  FAT_w_taskHandle = osThreadNew(StartTask_FAT_w, NULL, &FAT_w_task_attributes);
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <main+0x2d4>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4822      	ldr	r0, [pc, #136]	; (8000854 <main+0x2d8>)
 80007ca:	f006 f999 	bl	8006b00 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <main+0x2dc>)
 80007d2:	6013      	str	r3, [r2, #0]

  /* creation of FAT_r_task */
  FAT_r_taskHandle = osThreadNew(StartTask_FAT_r, NULL, &FAT_r_task_attributes);
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <main+0x2e0>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <main+0x2e4>)
 80007da:	f006 f991 	bl	8006b00 <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <main+0x2e8>)
 80007e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007e4:	f006 f966 	bl	8006ab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x26c>
 80007ea:	bf00      	nop
 80007ec:	0800b78c 	.word	0x0800b78c
 80007f0:	20001240 	.word	0x20001240
 80007f4:	0800b410 	.word	0x0800b410
 80007f8:	0800b414 	.word	0x0800b414
 80007fc:	200012e8 	.word	0x200012e8
 8000800:	0800b438 	.word	0x0800b438
 8000804:	0800b460 	.word	0x0800b460
 8000808:	0800b488 	.word	0x0800b488
 800080c:	0800b4b0 	.word	0x0800b4b0
 8000810:	0800b4c4 	.word	0x0800b4c4
 8000814:	0800b4dc 	.word	0x0800b4dc
 8000818:	0800b4f0 	.word	0x0800b4f0
 800081c:	0800b5a0 	.word	0x0800b5a0
 8000820:	0800b4fc 	.word	0x0800b4fc
 8000824:	0800b510 	.word	0x0800b510
 8000828:	0800b524 	.word	0x0800b524
 800082c:	0800b53c 	.word	0x0800b53c
 8000830:	0800b54c 	.word	0x0800b54c
 8000834:	0800b560 	.word	0x0800b560
 8000838:	0800b580 	.word	0x0800b580
 800083c:	0800b79c 	.word	0x0800b79c
 8000840:	20001294 	.word	0x20001294
 8000844:	0800b720 	.word	0x0800b720
 8000848:	08000ac9 	.word	0x08000ac9
 800084c:	200000e4 	.word	0x200000e4
 8000850:	0800b744 	.word	0x0800b744
 8000854:	08000ad9 	.word	0x08000ad9
 8000858:	200000e8 	.word	0x200000e8
 800085c:	0800b768 	.word	0x0800b768
 8000860:	08000bc9 	.word	0x08000bc9
 8000864:	20000994 	.word	0x20000994

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 ffb0 	bl	800a7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d8:	2310      	movs	r3, #16
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ff28 	bl	8001744 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008fa:	f000 f9ed 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f98a 	bl	8001c34 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000926:	f000 f9d7 	bl	8000cd8 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f001 fe24 	bl	80025c0 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f9ab 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000009c 	.word	0x2000009c
 800098c:	40004400 	.word	0x40004400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fe78 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0xd8>)
 8000a38:	f000 fce6 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a54:	f000 fcd8 	bl	8001408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800

08000a6c <__io_putchar>:

/* USER CODE BEGIN 4 */
// These functions redirect output to UART
int __io_putchar(int ch)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <__io_putchar+0x20>)
 8000a7e:	f001 fdef 	bl	8002660 <HAL_UART_Transmit>
  return ch;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000009c 	.word	0x2000009c

08000a90 <_write>:

int _write(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e009      	b.n	8000ab6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffde 	bl	8000a6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf1      	blt.n	8000aa2 <_write+0x12>
  }
  return len;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f006 f8a7 	bl	8006c24 <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <StartDefaultTask+0x8>

08000ad8 <StartTask_FAT_w>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_FAT_w */
void StartTask_FAT_w(void *argument)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000ae4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000ae8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTask_FAT_w */
  FIL file;
  FRESULT fres;
  UINT bw; // Bytes written

  char write_data[] = "Hello, this is a FAT test!\n";
 8000aea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000aee:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8000af2:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <StartTask_FAT_w+0xd4>)
 8000af4:	461c      	mov	r4, r3
 8000af6:	4615      	mov	r5, r2
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  /* Infinite loop */
  for(;;)
  {
    // Wait for the mutex before accessing the file
    if (osMutexAcquire(myFileMutexHandle, osWaitForever) == osOK)
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <StartTask_FAT_w+0xd8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f006 f92a 	bl	8006d66 <osMutexAcquire>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d144      	bne.n	8000ba2 <StartTask_FAT_w+0xca>
    {
      // Open or create the file for writing
      fres = f_open(&file, "0:/test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	4925      	ldr	r1, [pc, #148]	; (8000bb4 <StartTask_FAT_w+0xdc>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fc6d 	bl	8005400 <f_open>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
      if (fres == FR_OK) {
 8000b2c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d126      	bne.n	8000b82 <StartTask_FAT_w+0xaa>
        // Write data to the file
        fres = f_write(&file, write_data, sizeof(write_data) - 1, &bw);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	f107 0108 	add.w	r1, r7, #8
 8000b3c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000b40:	221b      	movs	r2, #27
 8000b42:	f004 ff81 	bl	8005a48 <f_write>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
        if (fres == FR_OK && bw == sizeof(write_data) - 1) {
 8000b4c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10a      	bne.n	8000b6a <StartTask_FAT_w+0x92>
 8000b54:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000b58:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	d103      	bne.n	8000b6a <StartTask_FAT_w+0x92>
          printf("FAT_w_task: Data written successfully.\r\n");
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <StartTask_FAT_w+0xe0>)
 8000b64:	f009 fd5a 	bl	800a61c <puts>
 8000b68:	e005      	b.n	8000b76 <StartTask_FAT_w+0x9e>
        } else {
          printf("FAT_w_task: Write error! Error code: %d\r\n", fres);
 8000b6a:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <StartTask_FAT_w+0xe4>)
 8000b72:	f009 fced 	bl	800a550 <iprintf>
        }

        // Close the file after writing
        f_close(&file);
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 f985 	bl	8005e8a <f_close>
 8000b80:	e005      	b.n	8000b8e <StartTask_FAT_w+0xb6>
      } else {
        printf("FAT_w_task: f_open failed! Error code: %d\r\n", fres);
 8000b82:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8000b86:	4619      	mov	r1, r3
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <StartTask_FAT_w+0xe8>)
 8000b8a:	f009 fce1 	bl	800a550 <iprintf>
      }

      // Release the mutex after accessing the file
      osMutexRelease(myFileMutexHandle);
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <StartTask_FAT_w+0xd8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 f932 	bl	8006dfc <osMutexRelease>

      // Signal the read task that the file is ready after mutex release
      osSemaphoreRelease(file_semaphoreHandle);
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <StartTask_FAT_w+0xec>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fa6b 	bl	8007078 <osSemaphoreRelease>
    }

    // Delay before the next write operation
    osDelay(5000); // Write every 5 seconds
 8000ba2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ba6:	f006 f83d 	bl	8006c24 <osDelay>
    if (osMutexAcquire(myFileMutexHandle, osWaitForever) == osOK)
 8000baa:	e7ab      	b.n	8000b04 <StartTask_FAT_w+0x2c>
 8000bac:	0800b634 	.word	0x0800b634
 8000bb0:	20001240 	.word	0x20001240
 8000bb4:	0800b4f0 	.word	0x0800b4f0
 8000bb8:	0800b5b4 	.word	0x0800b5b4
 8000bbc:	0800b5dc 	.word	0x0800b5dc
 8000bc0:	0800b608 	.word	0x0800b608
 8000bc4:	20001294 	.word	0x20001294

08000bc8 <StartTask_FAT_r>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_FAT_r */
void StartTask_FAT_r(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8000bd4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8000bd8:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
    // Wait for the semaphore signal from the write task
    if (osSemaphoreAcquire(file_semaphoreHandle, osWaitForever) == osOK)
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <StartTask_FAT_r+0xd4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f04f 31ff 	mov.w	r1, #4294967295
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 f9f6 	bl	8006fd4 <osSemaphoreAcquire>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d150      	bne.n	8000c90 <StartTask_FAT_r+0xc8>
    {
      // After receiving the semaphore, acquire the mutex before reading the file
      if (osMutexAcquire(myFileMutexHandle, osWaitForever) == osOK)
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <StartTask_FAT_r+0xd8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f006 f8b5 	bl	8006d66 <osMutexAcquire>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d146      	bne.n	8000c90 <StartTask_FAT_r+0xc8>
      {
        // Open the file for reading
        fres = f_open(&file, "0:/test.txt", FA_READ);
 8000c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c06:	2201      	movs	r2, #1
 8000c08:	4926      	ldr	r1, [pc, #152]	; (8000ca4 <StartTask_FAT_r+0xdc>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fbf8 	bl	8005400 <f_open>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
        if (fres == FR_OK) {
 8000c16:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d12d      	bne.n	8000c7a <StartTask_FAT_r+0xb2>
          // Read data from the file
          fres = f_read(&file, read_data, sizeof(read_data) - 1, &br);
 8000c1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c22:	f107 010c 	add.w	r1, r7, #12
 8000c26:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000c2a:	227f      	movs	r2, #127	; 0x7f
 8000c2c:	f004 fdaa 	bl	8005784 <f_read>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
          if (fres == FR_OK) {
 8000c36:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d111      	bne.n	8000c62 <StartTask_FAT_r+0x9a>
            read_data[br] = '\0'; // Null-terminate the string
 8000c3e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8000c42:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8000c4c:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8000c50:	2100      	movs	r1, #0
 8000c52:	54d1      	strb	r1, [r2, r3]
            printf("FAT_r_task: Data read: %s\r\n", read_data);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <StartTask_FAT_r+0xe0>)
 8000c5c:	f009 fc78 	bl	800a550 <iprintf>
 8000c60:	e005      	b.n	8000c6e <StartTask_FAT_r+0xa6>
          } else {
            printf("FAT_r_task: Read error! Error code: %d\r\n", fres);
 8000c62:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 8000c66:	4619      	mov	r1, r3
 8000c68:	4810      	ldr	r0, [pc, #64]	; (8000cac <StartTask_FAT_r+0xe4>)
 8000c6a:	f009 fc71 	bl	800a550 <iprintf>
          }

          // Close the file after reading
          f_close(&file);
 8000c6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 f909 	bl	8005e8a <f_close>
 8000c78:	e005      	b.n	8000c86 <StartTask_FAT_r+0xbe>
        } else {
          printf("FAT_r_task: f_open failed! Error code: %d\r\n", fres);
 8000c7a:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <StartTask_FAT_r+0xe8>)
 8000c82:	f009 fc65 	bl	800a550 <iprintf>
        }

        // Release the mutex after file access
        osMutexRelease(myFileMutexHandle);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <StartTask_FAT_r+0xd8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f006 f8b6 	bl	8006dfc <osMutexRelease>
      }
    }

    // Delay before the next read operation
    osDelay(5000); // Read every 5 seconds
 8000c90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c94:	f005 ffc6 	bl	8006c24 <osDelay>
    if (osSemaphoreAcquire(file_semaphoreHandle, osWaitForever) == osOK)
 8000c98:	e79f      	b.n	8000bda <StartTask_FAT_r+0x12>
 8000c9a:	bf00      	nop
 8000c9c:	20001294 	.word	0x20001294
 8000ca0:	20001240 	.word	0x20001240
 8000ca4:	0800b4f0 	.word	0x0800b4f0
 8000ca8:	0800b650 	.word	0x0800b650
 8000cac:	0800b66c 	.word	0x0800b66c
 8000cb0:	0800b698 	.word	0x0800b698

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fa0b 	bl	80010e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_MspInit+0x54>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_MspInit+0x54>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x54>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_MspInit+0x54>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_MspInit+0x54>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_MspInit+0x54>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	210f      	movs	r1, #15
 8000d26:	f06f 0001 	mvn.w	r0, #1
 8000d2a:	f000 fab1 	bl	8001290 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d133      	bne.n	8000dc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_UART_MspInit+0x9c>)
 8000db2:	f000 fb29 	bl	8001408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	2026      	movs	r0, #38	; 0x26
 8000dbc:	f000 fa68 	bl	8001290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc0:	2026      	movs	r0, #38	; 0x26
 8000dc2:	f000 fa81 	bl	80012c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_InitTick+0xd0>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <HAL_InitTick+0xd0>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_InitTick+0xd0>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f92e 	bl	8002074 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e18:	f001 f918 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 8000e1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_InitTick+0xd4>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_InitTick+0xdc>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e54:	f001 f940 	bl	80020d8 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11b      	bne.n	8000e9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_InitTick+0xd8>)
 8000e68:	f001 f990 	bl	800218c <HAL_TIM_Base_Start_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d111      	bne.n	8000e9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f000 fa24 	bl	80012c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d808      	bhi.n	8000e98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 fa00 	bl	8001290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_InitTick+0xe0>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e002      	b.n	8000e9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	200022e8 	.word	0x200022e8
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ef2:	f001 f9ad 	bl	8002250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200022e8 	.word	0x200022e8

08000f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USART2_IRQHandler+0x10>)
 8000f06:	f001 fc37 	bl	8002778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000009c 	.word	0x2000009c

08000f14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f009 fc9c 	bl	800a924 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	20002330 	.word	0x20002330
 8001020:	20019aa8 	.word	0x20019aa8

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104c:	f7ff ffea 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f009 fc5b 	bl	800a930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fa7f 	bl	800057c <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800108c:	0800b8a8 	.word	0x0800b8a8
  ldr r2, =_sbss
 8001090:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001094:	20019aa8 	.word	0x20019aa8

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8d8 	bl	800127a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fe86 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe08 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20002334 	.word	0x20002334

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20002334 	.word	0x20002334

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff4c 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a2:	f7ff ff61 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff ffb1 	bl	8001214 <NVIC_EncodePriority>
 80012b2:	4602      	mov	r2, r0
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff80 	bl	80011c0 <__NVIC_SetPriority>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff54 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f2:	f7ff ff09 	bl	8001108 <HAL_GetTick>
 80012f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d008      	beq.n	8001316 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e052      	b.n	80013bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0216 	bic.w	r2, r2, #22
 8001324:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <HAL_DMA_Abort+0x62>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0208 	bic.w	r2, r2, #8
 8001354:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001366:	e013      	b.n	8001390 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001368:	f7ff fece 	bl	8001108 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b05      	cmp	r3, #5
 8001374:	d90c      	bls.n	8001390 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2220      	movs	r2, #32
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e015      	b.n	80013bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e4      	bne.n	8001368 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a2:	223f      	movs	r2, #63	; 0x3f
 80013a4:	409a      	lsls	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d004      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00c      	b.n	80013fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2205      	movs	r2, #5
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e159      	b.n	80016d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8148 	bne.w	80016d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a2 	beq.w	80016d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x2e8>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x2ec>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <HAL_GPIO_Init+0x2f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x202>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a48      	ldr	r2, [pc, #288]	; (80016fc <HAL_GPIO_Init+0x2f4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x1fe>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a47      	ldr	r2, [pc, #284]	; (8001700 <HAL_GPIO_Init+0x2f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a46      	ldr	r2, [pc, #280]	; (8001704 <HAL_GPIO_Init+0x2fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x1f6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_GPIO_Init+0x300>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x1f2>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x204>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2ec>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_GPIO_Init+0x304>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_GPIO_Init+0x304>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x304>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_GPIO_Init+0x304>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_GPIO_Init+0x304>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_GPIO_Init+0x304>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_GPIO_Init+0x304>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_GPIO_Init+0x304>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f aea2 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e267      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00c      	beq.n	8001788 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001776:	2b08      	cmp	r3, #8
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05b      	beq.n	800184c <HAL_RCC_OscConfig+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d157      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e242      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a68      	ldr	r2, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc84 	bl	8001108 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc80 	bl	8001108 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e207      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xc0>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc70 	bl	8001108 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc6c 	bl	8001108 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1f3      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0xe8>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c7      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc25 	bl	8001108 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc21 	bl	8001108 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a8      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc04 	bl	8001108 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fc00 	bl	8001108 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e187      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fbe4 	bl	8001108 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fbe0 	bl	8001108 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e167      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x200>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fbcd 	bl	8001108 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e00e      	b.n	8001990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fbc9 	bl	8001108 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d907      	bls.n	8001990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e150      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb89 	bl	8001108 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff fb85 	bl	8001108 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e10c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2ea>
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x30c>
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fb4a 	bl	8001108 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb46 	bl	8001108 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0cb      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb34 	bl	8001108 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb30 	bl	8001108 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0b5      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a1 	beq.w	8001c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d05c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d141      	bne.n	8001b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb04 	bl	8001108 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff fb00 	bl	8001108 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e087      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fad9 	bl	8001108 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff fad5 	bl	8001108 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e05c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x416>
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fac2 	bl	8001108 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fabe 	bl	8001108 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e045      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e038      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d028      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0cc      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d90c      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d044      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f9f0 	bl	8001108 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f9ec 	bl	8001108 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fffe 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	0800b7ac 	.word	0x0800b7ac
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e04:	b094      	sub	sp, #80	; 0x50
 8001e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d00d      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	f200 80e1 	bhi.w	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e32:	e0db      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e38:	e0db      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3e:	e0d8      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	0159      	lsls	r1, r3, #5
 8001e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e84:	0150      	lsls	r0, r2, #5
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	6139      	str	r1, [r7, #16]
 8001e90:	4629      	mov	r1, r5
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	018b      	lsls	r3, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eae:	4651      	mov	r1, sl
 8001eb0:	018a      	lsls	r2, r1, #6
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb8:	4659      	mov	r1, fp
 8001eba:	eb63 0901 	sbc.w	r9, r3, r1
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	eb18 0303 	adds.w	r3, r8, r3
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	462b      	mov	r3, r5
 8001ee0:	eb49 0303 	adc.w	r3, r9, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	024b      	lsls	r3, r1, #9
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001efc:	4621      	mov	r1, r4
 8001efe:	024a      	lsls	r2, r1, #9
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f10:	f7fe f9b6 	bl	8000280 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f1c:	e058      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	4611      	mov	r1, r2
 8001f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0159      	lsls	r1, r3, #5
 8001f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4a:	0150      	lsls	r0, r2, #5
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4641      	mov	r1, r8
 8001f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f56:	4649      	mov	r1, r9
 8001f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f70:	ebb2 040a 	subs.w	r4, r2, sl
 8001f74:	eb63 050b 	sbc.w	r5, r3, fp
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb45 0303 	adc.w	r3, r5, r3
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	61fa      	str	r2, [r7, #28]
 8001fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc4:	f7fe f95c 	bl	8000280 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	0800b7bc 	.word	0x0800b7bc

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffdc 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0b5b      	lsrs	r3, r3, #13
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	0800b7bc 	.word	0x0800b7bc

08002074 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	220f      	movs	r2, #15
 8002082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_GetClockConfig+0x5c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_RCC_GetClockConfig+0x60>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0207 	and.w	r2, r3, #7
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e041      	b.n	800216e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f839 	bl	8002176 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f000 f9b2 	bl	8002480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d001      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e044      	b.n	800222e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_TIM_Base_Start_IT+0xb0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x6c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d013      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x6c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_TIM_Base_Start_IT+0xb4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x6c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_TIM_Base_Start_IT+0xb8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x6c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_TIM_Base_Start_IT+0xbc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x6c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a16      	ldr	r2, [pc, #88]	; (800224c <HAL_TIM_Base_Start_IT+0xc0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d111      	bne.n	800221c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d010      	beq.n	800222c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	e007      	b.n	800222c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40014000 	.word	0x40014000

08002250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d020      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0202 	mvn.w	r2, #2
 8002284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8d2 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f8c4 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8d5 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0204 	mvn.w	r2, #4
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8ac 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f89e 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8af 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d020      	beq.n	800234c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0208 	mvn.w	r2, #8
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f886 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f878 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f889 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f860 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f852 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f863 	bl	8002458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0201 	mvn.w	r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fc7c 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8e6 	bl	80025ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f834 	bl	800246c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8b8 	bl	8002598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3a      	ldr	r2, [pc, #232]	; (800257c <TIM_Base_SetConfig+0xfc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00f      	beq.n	80024b8 <TIM_Base_SetConfig+0x38>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249e:	d00b      	beq.n	80024b8 <TIM_Base_SetConfig+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a37      	ldr	r2, [pc, #220]	; (8002580 <TIM_Base_SetConfig+0x100>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <TIM_Base_SetConfig+0x38>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a36      	ldr	r2, [pc, #216]	; (8002584 <TIM_Base_SetConfig+0x104>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d003      	beq.n	80024b8 <TIM_Base_SetConfig+0x38>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a35      	ldr	r2, [pc, #212]	; (8002588 <TIM_Base_SetConfig+0x108>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	; (800257c <TIM_Base_SetConfig+0xfc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01b      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d017      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <TIM_Base_SetConfig+0x100>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <TIM_Base_SetConfig+0x104>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00f      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <TIM_Base_SetConfig+0x108>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a25      	ldr	r2, [pc, #148]	; (800258c <TIM_Base_SetConfig+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <TIM_Base_SetConfig+0x110>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0x8a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <TIM_Base_SetConfig+0x114>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d108      	bne.n	800251c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0e      	ldr	r2, [pc, #56]	; (800257c <TIM_Base_SetConfig+0xfc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
  }
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800
 8002588:	40000c00 	.word	0x40000c00
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800

08002598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e042      	b.n	8002658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fba8 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fd69 	bl	80030dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b20      	cmp	r3, #32
 800267e:	d175      	bne.n	800276c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_UART_Transmit+0x2c>
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e06e      	b.n	800276e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2221      	movs	r2, #33	; 0x21
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800269e:	f7fe fd33 	bl	8001108 <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b8:	d108      	bne.n	80026cc <HAL_UART_Transmit+0x6c>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e003      	b.n	80026d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026d4:	e02e      	b.n	8002734 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fb05 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e03a      	b.n	800276e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3302      	adds	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e007      	b.n	8002726 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1cb      	bne.n	80026d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fad1 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e006      	b.n	800276e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ba      	sub	sp, #232	; 0xe8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_UART_IRQHandler+0x66>
 80027ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fbc2 	bl	8002f60 <UART_Receive_IT>
      return;
 80027dc:	e25b      	b.n	8002c96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80de 	beq.w	80029a4 <HAL_UART_IRQHandler+0x22c>
 80027e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80d1 	beq.w	80029a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_UART_IRQHandler+0xae>
 800280e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_UART_IRQHandler+0xd2>
 8002832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0202 	orr.w	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0xf6>
 8002856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d011      	beq.n	800289e <HAL_UART_IRQHandler+0x126>
 800287a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0208 	orr.w	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 81f2 	beq.w	8002c8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_UART_IRQHandler+0x14e>
 80028b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fb4d 	bl	8002f60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_UART_IRQHandler+0x17a>
 80028ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04f      	beq.n	8002992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa55 	bl	8002da2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d141      	bne.n	800298a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800291c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800293e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800294a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1d9      	bne.n	8002906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d013      	beq.n	8002982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	4a7e      	ldr	r2, [pc, #504]	; (8002b58 <HAL_UART_IRQHandler+0x3e0>)
 8002960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fd2c 	bl	80013c4 <HAL_DMA_Abort_IT>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800297c:	4610      	mov	r0, r2
 800297e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	e00e      	b.n	80029a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f99e 	bl	8002cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	e00a      	b.n	80029a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f99a 	bl	8002cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	e006      	b.n	80029a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f996 	bl	8002cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800299e:	e175      	b.n	8002c8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	bf00      	nop
    return;
 80029a2:	e173      	b.n	8002c8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 814f 	bne.w	8002c4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8148 	beq.w	8002c4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8141 	beq.w	8002c4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	f040 80b6 	bne.w	8002b5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8145 	beq.w	8002c90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	f080 813e 	bcs.w	8002c90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	f000 8088 	beq.w	8002b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1d9      	bne.n	8002a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e1      	bne.n	8002a76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e3      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0a:	f023 0310 	bic.w	r3, r3, #16
 8002b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e3      	bne.n	8002af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fbd5 	bl	80012e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8c1 	bl	8002cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b56:	e09b      	b.n	8002c90 <HAL_UART_IRQHandler+0x518>
 8002b58:	08002e69 	.word	0x08002e69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808e 	beq.w	8002c94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8089 	beq.w	8002c94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e3      	bne.n	8002b82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bde:	633a      	str	r2, [r7, #48]	; 0x30
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e3      	bne.n	8002bba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0310 	bic.w	r3, r3, #16
 8002c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	69b9      	ldr	r1, [r7, #24]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	617b      	str	r3, [r7, #20]
   return(result);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e3      	bne.n	8002c00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f847 	bl	8002cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c4a:	e023      	b.n	8002c94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_UART_IRQHandler+0x4f4>
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f913 	bl	8002e90 <UART_Transmit_IT>
    return;
 8002c6a:	e014      	b.n	8002c96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <HAL_UART_IRQHandler+0x51e>
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f953 	bl	8002f30 <UART_EndTransmit_IT>
    return;
 8002c8a:	e004      	b.n	8002c96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c94:	bf00      	nop
  }
}
 8002c96:	37e8      	adds	r7, #232	; 0xe8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d00:	e03b      	b.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d037      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe f9fd 	bl	8001108 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e03a      	b.n	8002d9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d023      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d020      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d01d      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d116      	bne.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f81d 	bl	8002da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d0b4      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b095      	sub	sp, #84	; 0x54
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dca:	643a      	str	r2, [r7, #64]	; 0x40
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e5      	bne.n	8002dde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d119      	bne.n	8002e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0310 	bic.w	r3, r3, #16
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e3a:	61ba      	str	r2, [r7, #24]
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	613b      	str	r3, [r7, #16]
   return(result);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e5      	bne.n	8002e1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e5c:	bf00      	nop
 8002e5e:	3754      	adds	r7, #84	; 0x54
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff ff1e 	bl	8002cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b21      	cmp	r3, #33	; 0x21
 8002ea2:	d13e      	bne.n	8002f22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d114      	bne.n	8002ed8 <UART_Transmit_IT+0x48>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d110      	bne.n	8002ed8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	621a      	str	r2, [r3, #32]
 8002ed6:	e008      	b.n	8002eea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	1c59      	adds	r1, r3, #1
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6211      	str	r1, [r2, #32]
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fea3 	bl	8002c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b22      	cmp	r3, #34	; 0x22
 8002f72:	f040 80ae 	bne.w	80030d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	d117      	bne.n	8002fb0 <UART_Receive_IT+0x50>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
 8002fae:	e026      	b.n	8002ffe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc2:	d007      	beq.n	8002fd4 <UART_Receive_IT+0x74>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <UART_Receive_IT+0x82>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e008      	b.n	8002ff4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29b      	uxth	r3, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4619      	mov	r1, r3
 800300c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800300e:	2b00      	cmp	r3, #0
 8003010:	d15d      	bne.n	80030ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0220 	bic.w	r2, r2, #32
 8003020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b01      	cmp	r3, #1
 8003056:	d135      	bne.n	80030c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	613b      	str	r3, [r7, #16]
   return(result);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f023 0310 	bic.w	r3, r3, #16
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	623a      	str	r2, [r7, #32]
 8003080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	69f9      	ldr	r1, [r7, #28]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	61bb      	str	r3, [r7, #24]
   return(result);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d10a      	bne.n	80030b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fe0b 	bl	8002cd8 <HAL_UARTEx_RxEventCallback>
 80030c2:	e002      	b.n	80030ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fdf3 	bl	8002cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e002      	b.n	80030d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b0c0      	sub	sp, #256	; 0x100
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	68d9      	ldr	r1, [r3, #12]
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	ea40 0301 	orr.w	r3, r0, r1
 8003104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	431a      	orrs	r2, r3
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003134:	f021 010c 	bic.w	r1, r1, #12
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003142:	430b      	orrs	r3, r1
 8003144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	6999      	ldr	r1, [r3, #24]
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	ea40 0301 	orr.w	r3, r0, r1
 8003162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <UART_SetConfig+0x2cc>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <UART_SetConfig+0xa0>
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <UART_SetConfig+0x2d0>)
 8003178:	429a      	cmp	r2, r3
 800317a:	d104      	bne.n	8003186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7fe ff66 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 8003180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003184:	e003      	b.n	800318e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003186:	f7fe ff4d 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 800318a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	f040 810c 	bne.w	80033b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031ae:	4622      	mov	r2, r4
 80031b0:	462b      	mov	r3, r5
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031b6:	415b      	adcs	r3, r3
 80031b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031be:	4621      	mov	r1, r4
 80031c0:	eb12 0801 	adds.w	r8, r2, r1
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb43 0901 	adc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031ec:	462b      	mov	r3, r5
 80031ee:	eb49 0303 	adc.w	r3, r9, r3
 80031f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800320a:	460b      	mov	r3, r1
 800320c:	18db      	adds	r3, r3, r3
 800320e:	653b      	str	r3, [r7, #80]	; 0x50
 8003210:	4613      	mov	r3, r2
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800321c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003220:	f7fd f82e 	bl	8000280 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <UART_SetConfig+0x2d4>)
 800322a:	fba3 2302 	umull	r2, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	011c      	lsls	r4, r3, #4
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800323c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	64b9      	str	r1, [r7, #72]	; 0x48
 800324c:	415b      	adcs	r3, r3
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003254:	4641      	mov	r1, r8
 8003256:	eb12 0a01 	adds.w	sl, r2, r1
 800325a:	4649      	mov	r1, r9
 800325c:	eb43 0b01 	adc.w	fp, r3, r1
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800326c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003274:	4692      	mov	sl, r2
 8003276:	469b      	mov	fp, r3
 8003278:	4643      	mov	r3, r8
 800327a:	eb1a 0303 	adds.w	r3, sl, r3
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003282:	464b      	mov	r3, r9
 8003284:	eb4b 0303 	adc.w	r3, fp, r3
 8003288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800329c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032a0:	460b      	mov	r3, r1
 80032a2:	18db      	adds	r3, r3, r3
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
 80032a6:	4613      	mov	r3, r2
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032b6:	f7fc ffe3 	bl	8000280 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <UART_SetConfig+0x2d4>)
 80032c2:	fba3 2301 	umull	r2, r3, r3, r1
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2264      	movs	r2, #100	; 0x64
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	1acb      	subs	r3, r1, r3
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <UART_SetConfig+0x2d4>)
 80032d8:	fba3 2302 	umull	r2, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032e4:	441c      	add	r4, r3
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003300:	415b      	adcs	r3, r3
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6339      	str	r1, [r7, #48]	; 0x30
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800336e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003372:	f7fc ff85 	bl	8000280 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <UART_SetConfig+0x2d4>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <UART_SetConfig+0x2d4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4422      	add	r2, r4
 80033a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a4:	e106      	b.n	80035b4 <UART_SetConfig+0x4d8>
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40011400 	.word	0x40011400
 80033b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033c6:	4642      	mov	r2, r8
 80033c8:	464b      	mov	r3, r9
 80033ca:	1891      	adds	r1, r2, r2
 80033cc:	6239      	str	r1, [r7, #32]
 80033ce:	415b      	adcs	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033d6:	4641      	mov	r1, r8
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0501 	adc.w	r5, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	00eb      	lsls	r3, r5, #3
 80033ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ee:	00e2      	lsls	r2, r4, #3
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4643      	mov	r3, r8
 80033f6:	18e3      	adds	r3, r4, r3
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033fc:	464b      	mov	r3, r9
 80033fe:	eb45 0303 	adc.w	r3, r5, r3
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003422:	4629      	mov	r1, r5
 8003424:	008b      	lsls	r3, r1, #2
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342c:	4621      	mov	r1, r4
 800342e:	008a      	lsls	r2, r1, #2
 8003430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003434:	f7fc ff24 	bl	8000280 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011c      	lsls	r4, r3, #4
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	1891      	adds	r1, r2, r2
 800345e:	61b9      	str	r1, [r7, #24]
 8003460:	415b      	adcs	r3, r3
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	4641      	mov	r1, r8
 800346a:	1851      	adds	r1, r2, r1
 800346c:	6139      	str	r1, [r7, #16]
 800346e:	4649      	mov	r1, r9
 8003470:	414b      	adcs	r3, r1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003480:	4659      	mov	r1, fp
 8003482:	00cb      	lsls	r3, r1, #3
 8003484:	4651      	mov	r1, sl
 8003486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348a:	4651      	mov	r1, sl
 800348c:	00ca      	lsls	r2, r1, #3
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	4603      	mov	r3, r0
 8003494:	4642      	mov	r2, r8
 8003496:	189b      	adds	r3, r3, r2
 8003498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800349c:	464b      	mov	r3, r9
 800349e:	460a      	mov	r2, r1
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034c0:	4649      	mov	r1, r9
 80034c2:	008b      	lsls	r3, r1, #2
 80034c4:	4641      	mov	r1, r8
 80034c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ca:	4641      	mov	r1, r8
 80034cc:	008a      	lsls	r2, r1, #2
 80034ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034d2:	f7fc fed5 	bl	8000280 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <UART_SetConfig+0x4e4>)
 80034de:	fba3 2301 	umull	r2, r3, r3, r1
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2264      	movs	r2, #100	; 0x64
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	1acb      	subs	r3, r1, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <UART_SetConfig+0x4e4>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fc:	441c      	add	r4, r3
 80034fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003502:	2200      	movs	r2, #0
 8003504:	673b      	str	r3, [r7, #112]	; 0x70
 8003506:	677a      	str	r2, [r7, #116]	; 0x74
 8003508:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	415b      	adcs	r3, r3
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351c:	4641      	mov	r1, r8
 800351e:	1851      	adds	r1, r2, r1
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	4649      	mov	r1, r9
 8003524:	414b      	adcs	r3, r1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003534:	4659      	mov	r1, fp
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4651      	mov	r1, sl
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	4603      	mov	r3, r0
 8003548:	4642      	mov	r2, r8
 800354a:	189b      	adds	r3, r3, r2
 800354c:	66bb      	str	r3, [r7, #104]	; 0x68
 800354e:	464b      	mov	r3, r9
 8003550:	460a      	mov	r2, r1
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
 8003562:	667a      	str	r2, [r7, #100]	; 0x64
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003570:	4649      	mov	r1, r9
 8003572:	008b      	lsls	r3, r1, #2
 8003574:	4641      	mov	r1, r8
 8003576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357a:	4641      	mov	r1, r8
 800357c:	008a      	lsls	r2, r1, #2
 800357e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003582:	f7fc fe7d 	bl	8000280 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <UART_SetConfig+0x4e4>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	; 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	3332      	adds	r3, #50	; 0x32
 800359e:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <UART_SetConfig+0x4e4>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4422      	add	r2, r4
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035ba:	46bd      	mov	sp, r7
 80035bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <MX_FATFS_Init+0x18>)
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <MX_FATFS_Init+0x1c>)
 80035cc:	f003 f9b6 	bl	800693c <FATFS_LinkDriver>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <MX_FATFS_Init+0x20>)
 80035d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	2000233c 	.word	0x2000233c
 80035e0:	2000000c 	.word	0x2000000c
 80035e4:	20002338 	.word	0x20002338

080035e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  if (pdrv == 0) {
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <USER_initialize+0x22>
    // Clear the memory (optional but recommended for safety)
    memset(ram_disk, 0, sizeof(ram_disk));
 8003608:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800360c:	2100      	movs	r1, #0
 800360e:	4806      	ldr	r0, [pc, #24]	; (8003628 <USER_initialize+0x30>)
 8003610:	f007 f8e4 	bl	800a7dc <memset>
    Stat = 0;  // Disk ready (no error)
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <USER_initialize+0x34>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <USER_initialize+0x34>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20002340 	.word	0x20002340
 800362c:	20000009 	.word	0x20000009

08003630 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  if (pdrv == 0) {
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <USER_status+0x18>
    return Stat;  // Always return the current status
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <USER_status+0x28>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e000      	b.n	800364a <USER_status+0x1a>
  }

  return STA_NOINIT;  // Return not initialized for other drives
 8003648:	2301      	movs	r3, #1
  /* USER CODE END STATUS */
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000009 	.word	0x20000009

0800365c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  if (pdrv != 0) {
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <USER_read+0x1a>
    return RES_PARERR;  // Only support one drive (drive 0)
 8003672:	2304      	movs	r3, #4
 8003674:	e01a      	b.n	80036ac <USER_read+0x50>
  }

  if (Stat & STA_NOINIT) {
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <USER_read+0x58>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <USER_read+0x2c>
    return RES_NOTRDY;  // Disk not initialized
 8003684:	2303      	movs	r3, #3
 8003686:	e011      	b.n	80036ac <USER_read+0x50>
  }

  if (sector + count > RAM_DISK_TOTAL_SECTORS) {
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	4413      	add	r3, r2
 800368e:	2b96      	cmp	r3, #150	; 0x96
 8003690:	d901      	bls.n	8003696 <USER_read+0x3a>
    return RES_PARERR;  // Out of bounds
 8003692:	2304      	movs	r3, #4
 8003694:	e00a      	b.n	80036ac <USER_read+0x50>
  }

  // Copy data from the RAM disk to the provided buffer
  memcpy(buff, ram_disk + (sector * RAM_DISK_SECTOR_SIZE), count * RAM_DISK_SECTOR_SIZE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	025b      	lsls	r3, r3, #9
 800369a:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <USER_read+0x5c>)
 800369c:	1899      	adds	r1, r3, r2
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	025b      	lsls	r3, r3, #9
 80036a2:	461a      	mov	r2, r3
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	f007 f96a 	bl	800a97e <memcpy>

  return RES_OK;  // Success
 80036aa:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000009 	.word	0x20000009
 80036b8:	20002340 	.word	0x20002340

080036bc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  if (pdrv != 0) {
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <USER_write+0x1a>
    return RES_PARERR;  // Only support one drive (drive 0)
 80036d2:	2304      	movs	r3, #4
 80036d4:	e01a      	b.n	800370c <USER_write+0x50>
  }

  if (Stat & STA_NOINIT) {
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <USER_write+0x58>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <USER_write+0x2c>
    return RES_NOTRDY;  // Disk not initialized
 80036e4:	2303      	movs	r3, #3
 80036e6:	e011      	b.n	800370c <USER_write+0x50>
  }

  if (sector + count > RAM_DISK_TOTAL_SECTORS) {
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	2b96      	cmp	r3, #150	; 0x96
 80036f0:	d901      	bls.n	80036f6 <USER_write+0x3a>
    return RES_PARERR;  // Out of bounds
 80036f2:	2304      	movs	r3, #4
 80036f4:	e00a      	b.n	800370c <USER_write+0x50>
  }

  // Copy data from the provided buffer to the RAM disk
  memcpy(ram_disk + (sector * RAM_DISK_SECTOR_SIZE), buff, count * RAM_DISK_SECTOR_SIZE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <USER_write+0x5c>)
 80036fc:	1898      	adds	r0, r3, r2
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	461a      	mov	r2, r3
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	f007 f93a 	bl	800a97e <memcpy>

  return RES_OK;  // Success
 800370a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000009 	.word	0x20000009
 8003718:	20002340 	.word	0x20002340

0800371c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	603a      	str	r2, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	460b      	mov	r3, r1
 800372a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  if (pdrv != 0) {
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <USER_ioctl+0x1a>
    return RES_PARERR;  // Only support one drive (drive 0)
 8003732:	2304      	movs	r3, #4
 8003734:	e02a      	b.n	800378c <USER_ioctl+0x70>
  }

  DRESULT res = RES_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]

  switch (cmd) {
 800373a:	79bb      	ldrb	r3, [r7, #6]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d821      	bhi.n	8003784 <USER_ioctl+0x68>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <USER_ioctl+0x2c>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	0800375f 	.word	0x0800375f
 8003750:	0800376b 	.word	0x0800376b
 8003754:	08003779 	.word	0x08003779
    case CTRL_SYNC:
      // No action needed for RAM disk, always synchronized
      res = RES_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e015      	b.n	800378a <USER_ioctl+0x6e>

    case GET_SECTOR_COUNT:
      // Return the total number of sectors
      *(DWORD*)buff = RAM_DISK_TOTAL_SECTORS;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2296      	movs	r2, #150	; 0x96
 8003762:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e00f      	b.n	800378a <USER_ioctl+0x6e>

    case GET_SECTOR_SIZE:
      // Return the sector size
      *(WORD*)buff = RAM_DISK_SECTOR_SIZE;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003770:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
      break;
 8003776:	e008      	b.n	800378a <USER_ioctl+0x6e>

    case GET_BLOCK_SIZE:
      // Return the block size in units of sectors (typically 1 for RAM disk)
      *(DWORD*)buff = 1;  // Block size of 1 sector
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e002      	b.n	800378a <USER_ioctl+0x6e>

    default:
      res = RES_PARERR;  // Invalid command
 8003784:	2304      	movs	r3, #4
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	bf00      	nop
  }

  return res;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <disk_status+0x30>)
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	4905      	ldr	r1, [pc, #20]	; (80037c8 <disk_status+0x30>)
 80037b2:	440a      	add	r2, r1
 80037b4:	7a12      	ldrb	r2, [r2, #8]
 80037b6:	4610      	mov	r0, r2
 80037b8:	4798      	blx	r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20014f68 	.word	0x20014f68

080037cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <disk_initialize+0x4c>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d114      	bne.n	800380e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <disk_initialize+0x4c>)
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	79fa      	ldrb	r2, [r7, #7]
 80037f2:	4909      	ldr	r1, [pc, #36]	; (8003818 <disk_initialize+0x4c>)
 80037f4:	440a      	add	r2, r1
 80037f6:	7a12      	ldrb	r2, [r2, #8]
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
 80037fc:	4603      	mov	r3, r0
 80037fe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <disk_initialize+0x4c>)
 800380a:	2101      	movs	r1, #1
 800380c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20014f68 	.word	0x20014f68

0800381c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <disk_read+0x3c>)
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	689c      	ldr	r4, [r3, #8]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <disk_read+0x3c>)
 800383c:	4413      	add	r3, r2
 800383e:	7a18      	ldrb	r0, [r3, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	47a0      	blx	r4
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]
  return res;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	bd90      	pop	{r4, r7, pc}
 8003856:	bf00      	nop
 8003858:	20014f68 	.word	0x20014f68

0800385c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4603      	mov	r3, r0
 800386a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <disk_write+0x3c>)
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68dc      	ldr	r4, [r3, #12]
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <disk_write+0x3c>)
 800387c:	4413      	add	r3, r2
 800387e:	7a18      	ldrb	r0, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	47a0      	blx	r4
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]
  return res;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd90      	pop	{r4, r7, pc}
 8003896:	bf00      	nop
 8003898:	20014f68 	.word	0x20014f68

0800389c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	603a      	str	r2, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
 80038a8:	460b      	mov	r3, r1
 80038aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <disk_ioctl+0x38>)
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	79fa      	ldrb	r2, [r7, #7]
 80038ba:	4906      	ldr	r1, [pc, #24]	; (80038d4 <disk_ioctl+0x38>)
 80038bc:	440a      	add	r2, r1
 80038be:	7a10      	ldrb	r0, [r2, #8]
 80038c0:	79b9      	ldrb	r1, [r7, #6]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4798      	blx	r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20014f68 	.word	0x20014f68

080038d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038fa:	89fb      	ldrh	r3, [r7, #14]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3303      	adds	r3, #3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	3202      	adds	r2, #2
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	3201      	adds	r2, #1
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	1c53      	adds	r3, r2, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	6179      	str	r1, [r7, #20]
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f1      	bne.n	80039f6 <mem_cpy+0x1a>
	}
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	617a      	str	r2, [r7, #20]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f3      	bne.n	8003a2e <mem_set+0x10>
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	61fa      	str	r2, [r7, #28]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	61ba      	str	r2, [r7, #24]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	1acb      	subs	r3, r1, r3
 8003a80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <mem_cmp+0x40>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0eb      	beq.n	8003a6c <mem_cmp+0x18>

	return r;
 8003a94:	697b      	ldr	r3, [r7, #20]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003aac:	e002      	b.n	8003ab4 <chk_chr+0x12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <chk_chr+0x26>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d1f2      	bne.n	8003aae <chk_chr+0xc>
	return *str;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <lock_fs+0x22>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 ff5a 	bl	80069a4 <ff_req_grant>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <lock_fs+0x22>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <lock_fs+0x24>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <unlock_fs+0x2e>
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d00a      	beq.n	8003b32 <unlock_fs+0x2e>
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b0b      	cmp	r3, #11
 8003b20:	d007      	beq.n	8003b32 <unlock_fs+0x2e>
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d004      	beq.n	8003b32 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 ff4e 	bl	80069ce <ff_rel_grant>
	}
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e029      	b.n	8003ba4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003b50:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <chk_lock+0xb4>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4413      	add	r3, r2
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01d      	beq.n	8003b9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <chk_lock+0xb4>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	4413      	add	r3, r2
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d116      	bne.n	8003b9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003b70:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <chk_lock+0xb4>)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d10c      	bne.n	8003b9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <chk_lock+0xb4>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d102      	bne.n	8003b9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b98:	e007      	b.n	8003baa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d9d2      	bls.n	8003b50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d109      	bne.n	8003bc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <chk_lock+0x80>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d101      	bne.n	8003bc0 <chk_lock+0x84>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e010      	b.n	8003be2 <chk_lock+0xa6>
 8003bc0:	2312      	movs	r3, #18
 8003bc2:	e00e      	b.n	8003be2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <chk_lock+0xa0>
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <chk_lock+0xb4>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	4413      	add	r3, r2
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bda:	d101      	bne.n	8003be0 <chk_lock+0xa4>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	e000      	b.n	8003be2 <chk_lock+0xa6>
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20014f48 	.word	0x20014f48

08003bf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	e002      	b.n	8003c06 <enq_lock+0x12>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d806      	bhi.n	8003c1a <enq_lock+0x26>
 8003c0c:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <enq_lock+0x40>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f2      	bne.n	8003c00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20014f48 	.word	0x20014f48

08003c38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e01f      	b.n	8003c88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003c48:	4a41      	ldr	r2, [pc, #260]	; (8003d50 <inc_lock+0x118>)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4413      	add	r3, r2
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d113      	bne.n	8003c82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <inc_lock+0x118>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d109      	bne.n	8003c82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003c6e:	4a38      	ldr	r2, [pc, #224]	; (8003d50 <inc_lock+0x118>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	4413      	add	r3, r2
 8003c76:	3308      	adds	r3, #8
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d006      	beq.n	8003c90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d9dc      	bls.n	8003c48 <inc_lock+0x10>
 8003c8e:	e000      	b.n	8003c92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003c90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d132      	bne.n	8003cfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e002      	b.n	8003ca4 <inc_lock+0x6c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d806      	bhi.n	8003cb8 <inc_lock+0x80>
 8003caa:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <inc_lock+0x118>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	4413      	add	r3, r2
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f2      	bne.n	8003c9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d101      	bne.n	8003cc2 <inc_lock+0x8a>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e040      	b.n	8003d44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4922      	ldr	r1, [pc, #136]	; (8003d50 <inc_lock+0x118>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	440b      	add	r3, r1
 8003cce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	491e      	ldr	r1, [pc, #120]	; (8003d50 <inc_lock+0x118>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	440b      	add	r3, r1
 8003cdc:	3304      	adds	r3, #4
 8003cde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	491a      	ldr	r1, [pc, #104]	; (8003d50 <inc_lock+0x118>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	440b      	add	r3, r1
 8003cec:	3308      	adds	r3, #8
 8003cee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003cf0:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <inc_lock+0x118>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4413      	add	r3, r2
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <inc_lock+0xe0>
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <inc_lock+0x118>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <inc_lock+0xe0>
 8003d14:	2300      	movs	r3, #0
 8003d16:	e015      	b.n	8003d44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <inc_lock+0xf8>
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <inc_lock+0x118>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	4413      	add	r3, r2
 8003d26:	330c      	adds	r3, #12
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	e001      	b.n	8003d34 <inc_lock+0xfc>
 8003d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d34:	4906      	ldr	r1, [pc, #24]	; (8003d50 <inc_lock+0x118>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	440b      	add	r3, r1
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20014f48 	.word	0x20014f48

08003d54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d825      	bhi.n	8003db4 <dec_lock+0x60>
		n = Files[i].ctr;
 8003d68:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <dec_lock+0x74>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	330c      	adds	r3, #12
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d101      	bne.n	8003d82 <dec_lock+0x2e>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <dec_lock+0x3a>
 8003d88:	89fb      	ldrh	r3, [r7, #14]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <dec_lock+0x74>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	4413      	add	r3, r2
 8003d96:	330c      	adds	r3, #12
 8003d98:	89fa      	ldrh	r2, [r7, #14]
 8003d9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003d9c:	89fb      	ldrh	r3, [r7, #14]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <dec_lock+0x5a>
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <dec_lock+0x74>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4413      	add	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	737b      	strb	r3, [r7, #13]
 8003db2:	e001      	b.n	8003db8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003db4:	2302      	movs	r3, #2
 8003db6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003db8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20014f48 	.word	0x20014f48

08003dcc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e010      	b.n	8003dfc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003dda:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <clear_lock+0x44>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d105      	bne.n	8003df6 <clear_lock+0x2a>
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <clear_lock+0x44>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d9eb      	bls.n	8003dda <clear_lock+0xe>
	}
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20014f48 	.word	0x20014f48

08003e14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d034      	beq.n	8003e92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7858      	ldrb	r0, [r3, #1]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003e38:	2301      	movs	r3, #1
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	f7ff fd0e 	bl	800385c <disk_write>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
 8003e4a:	e022      	b.n	8003e92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d217      	bcs.n	8003e92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	789b      	ldrb	r3, [r3, #2]
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e010      	b.n	8003e8c <sync_window+0x78>
					wsect += fs->fsize;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7858      	ldrb	r0, [r3, #1]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003e7e:	2301      	movs	r3, #1
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	f7ff fceb 	bl	800385c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d8eb      	bhi.n	8003e6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d01b      	beq.n	8003eec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ffad 	bl	8003e14 <sync_window>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d113      	bne.n	8003eec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7858      	ldrb	r0, [r3, #1]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ece:	2301      	movs	r3, #1
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	f7ff fca3 	bl	800381c <disk_read>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff87 	bl	8003e14 <sync_window>
 8003f06:	4603      	mov	r3, r0
 8003f08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d158      	bne.n	8003fc2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d148      	bne.n	8003faa <sync_fs+0xb2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d144      	bne.n	8003faa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3334      	adds	r3, #52	; 0x34
 8003f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fd77 	bl	8003a1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3334      	adds	r3, #52	; 0x34
 8003f34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f38:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fd06 	bl	800394e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3334      	adds	r3, #52	; 0x34
 8003f46:	4921      	ldr	r1, [pc, #132]	; (8003fcc <sync_fs+0xd4>)
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fd1b 	bl	8003984 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3334      	adds	r3, #52	; 0x34
 8003f52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003f56:	491e      	ldr	r1, [pc, #120]	; (8003fd0 <sync_fs+0xd8>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fd13 	bl	8003984 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3334      	adds	r3, #52	; 0x34
 8003f62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fd09 	bl	8003984 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3334      	adds	r3, #52	; 0x34
 8003f76:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7ff fcff 	bl	8003984 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7858      	ldrb	r0, [r3, #1]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f7ff fc5c 	bl	800385c <disk_write>
			fs->fsi_flag = 0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fc72 	bl	800389c <disk_ioctl>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <sync_fs+0xca>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	41615252 	.word	0x41615252
 8003fd0:	61417272 	.word	0x61417272

08003fd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3b02      	subs	r3, #2
 8003fe2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	3b02      	subs	r3, #2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d301      	bcc.n	8003ff4 <clust2sect+0x20>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e008      	b.n	8004006 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	895b      	ldrh	r3, [r3, #10]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	fb03 f202 	mul.w	r2, r3, r2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	4413      	add	r3, r2
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d904      	bls.n	8004032 <get_fat+0x20>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e08f      	b.n	8004158 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d062      	beq.n	800410c <get_fat+0xfa>
 8004046:	2b03      	cmp	r3, #3
 8004048:	dc7c      	bgt.n	8004144 <get_fat+0x132>
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <get_fat+0x42>
 800404e:	2b02      	cmp	r3, #2
 8004050:	d042      	beq.n	80040d8 <get_fat+0xc6>
 8004052:	e077      	b.n	8004144 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0a5b      	lsrs	r3, r3, #9
 800406a:	4413      	add	r3, r2
 800406c:	4619      	mov	r1, r3
 800406e:	6938      	ldr	r0, [r7, #16]
 8004070:	f7ff ff14 	bl	8003e9c <move_window>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d167      	bne.n	800414a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	60fa      	str	r2, [r7, #12]
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800408c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0a5b      	lsrs	r3, r3, #9
 8004096:	4413      	add	r3, r2
 8004098:	4619      	mov	r1, r3
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f7ff fefe 	bl	8003e9c <move_window>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d153      	bne.n	800414e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <get_fat+0xbc>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	e002      	b.n	80040d4 <get_fat+0xc2>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	617b      	str	r3, [r7, #20]
			break;
 80040d6:	e03f      	b.n	8004158 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	4413      	add	r3, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6938      	ldr	r0, [r7, #16]
 80040e6:	f7ff fed9 	bl	8003e9c <move_window>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d130      	bne.n	8004152 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80040fe:	4413      	add	r3, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fbe9 	bl	80038d8 <ld_word>
 8004106:	4603      	mov	r3, r0
 8004108:	617b      	str	r3, [r7, #20]
			break;
 800410a:	e025      	b.n	8004158 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	09db      	lsrs	r3, r3, #7
 8004114:	4413      	add	r3, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6938      	ldr	r0, [r7, #16]
 800411a:	f7ff febf 	bl	8003e9c <move_window>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d118      	bne.n	8004156 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004132:	4413      	add	r3, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fbe7 	bl	8003908 <ld_dword>
 800413a:	4603      	mov	r3, r0
 800413c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004140:	617b      	str	r3, [r7, #20]
			break;
 8004142:	e009      	b.n	8004158 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e006      	b.n	8004158 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004156:	bf00      	nop
		}
	}

	return val;
 8004158:	697b      	ldr	r3, [r7, #20]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004162:	b590      	push	{r4, r7, lr}
 8004164:	b089      	sub	sp, #36	; 0x24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800416e:	2302      	movs	r3, #2
 8004170:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f240 80d9 	bls.w	800432c <put_fat+0x1ca>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	f080 80d3 	bcs.w	800432c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b03      	cmp	r3, #3
 800418c:	f000 8096 	beq.w	80042bc <put_fat+0x15a>
 8004190:	2b03      	cmp	r3, #3
 8004192:	f300 80cb 	bgt.w	800432c <put_fat+0x1ca>
 8004196:	2b01      	cmp	r3, #1
 8004198:	d002      	beq.n	80041a0 <put_fat+0x3e>
 800419a:	2b02      	cmp	r3, #2
 800419c:	d06e      	beq.n	800427c <put_fat+0x11a>
 800419e:	e0c5      	b.n	800432c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4413      	add	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	4413      	add	r3, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fe6e 	bl	8003e9c <move_window>
 80041c0:	4603      	mov	r3, r0
 80041c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041c4:	7ffb      	ldrb	r3, [r7, #31]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 80a9 	bne.w	800431e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	1c59      	adds	r1, r3, #1
 80041d6:	61b9      	str	r1, [r7, #24]
 80041d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041dc:	4413      	add	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <put_fat+0xa4>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b25a      	sxtb	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b25b      	sxtb	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e001      	b.n	800420a <put_fat+0xa8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	0a5b      	lsrs	r3, r3, #9
 800421c:	4413      	add	r3, r2
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe3b 	bl	8003e9c <move_window>
 8004226:	4603      	mov	r3, r0
 8004228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d178      	bne.n	8004322 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423c:	4413      	add	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <put_fat+0xf0>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	e00e      	b.n	8004270 <put_fat+0x10e>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b25b      	sxtb	r3, r3
 8004258:	f023 030f 	bic.w	r3, r3, #15
 800425c:	b25a      	sxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	b25b      	sxtb	r3, r3
 800426a:	4313      	orrs	r3, r2
 800426c:	b25b      	sxtb	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	70da      	strb	r2, [r3, #3]
			break;
 800427a:	e057      	b.n	800432c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	4413      	add	r3, r2
 8004286:	4619      	mov	r1, r3
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fe07 	bl	8003e9c <move_window>
 800428e:	4603      	mov	r3, r0
 8004290:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004292:	7ffb      	ldrb	r3, [r7, #31]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d146      	bne.n	8004326 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80042a6:	4413      	add	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	b292      	uxth	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb4d 	bl	800394e <st_word>
			fs->wflag = 1;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	70da      	strb	r2, [r3, #3]
			break;
 80042ba:	e037      	b.n	800432c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	09db      	lsrs	r3, r3, #7
 80042c4:	4413      	add	r3, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fde7 	bl	8003e9c <move_window>
 80042ce:	4603      	mov	r3, r0
 80042d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d128      	bne.n	800432a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80042ec:	4413      	add	r3, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fb0a 	bl	8003908 <ld_dword>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042fa:	4323      	orrs	r3, r4
 80042fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800430c:	4413      	add	r3, r2
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fb37 	bl	8003984 <st_dword>
			fs->wflag = 1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	70da      	strb	r2, [r3, #3]
			break;
 800431c:	e006      	b.n	800432c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800432a:	bf00      	nop
		}
	}
	return res;
 800432c:	7ffb      	ldrb	r3, [r7, #31]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	; 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd90      	pop	{r4, r7, pc}

08004336 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d904      	bls.n	800435c <remove_chain+0x26>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d301      	bcc.n	8004360 <remove_chain+0x2a>
 800435c:	2302      	movs	r3, #2
 800435e:	e04b      	b.n	80043f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004366:	f04f 32ff 	mov.w	r2, #4294967295
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	69b8      	ldr	r0, [r7, #24]
 800436e:	f7ff fef8 	bl	8004162 <put_fat>
 8004372:	4603      	mov	r3, r0
 8004374:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <remove_chain+0x4a>
 800437c:	7ffb      	ldrb	r3, [r7, #31]
 800437e:	e03b      	b.n	80043f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fe45 	bl	8004012 <get_fat>
 8004388:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d031      	beq.n	80043f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <remove_chain+0x64>
 8004396:	2302      	movs	r3, #2
 8004398:	e02e      	b.n	80043f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d101      	bne.n	80043a6 <remove_chain+0x70>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e028      	b.n	80043f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80043a6:	2200      	movs	r2, #0
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	69b8      	ldr	r0, [r7, #24]
 80043ac:	f7ff fed9 	bl	8004162 <put_fat>
 80043b0:	4603      	mov	r3, r0
 80043b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <remove_chain+0x88>
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
 80043bc:	e01c      	b.n	80043f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	3b02      	subs	r3, #2
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d20b      	bcs.n	80043e4 <remove_chain+0xae>
			fs->free_clst++;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3c6      	bcc.n	8004380 <remove_chain+0x4a>
 80043f2:	e000      	b.n	80043f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80043f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <create_chain+0x2c>
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	d31b      	bcc.n	8004464 <create_chain+0x64>
 800442c:	2301      	movs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e018      	b.n	8004464 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fdec 	bl	8004012 <get_fat>
 800443a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d801      	bhi.n	8004446 <create_chain+0x46>
 8004442:	2301      	movs	r3, #1
 8004444:	e070      	b.n	8004528 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d101      	bne.n	8004452 <create_chain+0x52>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	e06a      	b.n	8004528 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d201      	bcs.n	8004460 <create_chain+0x60>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	e063      	b.n	8004528 <create_chain+0x128>
		scl = clst;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	429a      	cmp	r2, r3
 8004476:	d307      	bcc.n	8004488 <create_chain+0x88>
				ncl = 2;
 8004478:	2302      	movs	r3, #2
 800447a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	429a      	cmp	r2, r3
 8004482:	d901      	bls.n	8004488 <create_chain+0x88>
 8004484:	2300      	movs	r3, #0
 8004486:	e04f      	b.n	8004528 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004488:	69f9      	ldr	r1, [r7, #28]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fdc1 	bl	8004012 <get_fat>
 8004490:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d003      	beq.n	80044a6 <create_chain+0xa6>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d101      	bne.n	80044aa <create_chain+0xaa>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	e03e      	b.n	8004528 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d1da      	bne.n	8004468 <create_chain+0x68>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e038      	b.n	8004528 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80044b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	6938      	ldr	r0, [r7, #16]
 80044c0:	f7ff fe4f 	bl	8004162 <put_fat>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <create_chain+0xe2>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	6938      	ldr	r0, [r7, #16]
 80044da:	f7ff fe42 	bl	8004162 <put_fat>
 80044de:	4603      	mov	r3, r0
 80044e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <create_chain+0x116>
		fs->last_clst = ncl;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	3b02      	subs	r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d804      	bhi.n	8004506 <create_chain+0x106>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	791b      	ldrb	r3, [r3, #4]
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	711a      	strb	r2, [r3, #4]
 8004514:	e007      	b.n	8004526 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d102      	bne.n	8004522 <create_chain+0x122>
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	e000      	b.n	8004524 <create_chain+0x124>
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004526:	69fb      	ldr	r3, [r7, #28]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004546:	d204      	bcs.n	8004552 <dir_sdi+0x22>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004552:	2302      	movs	r3, #2
 8004554:	e063      	b.n	800461e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <dir_sdi+0x46>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d902      	bls.n	8004576 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10c      	bne.n	8004596 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	8912      	ldrh	r2, [r2, #8]
 8004584:	4293      	cmp	r3, r2
 8004586:	d301      	bcc.n	800458c <dir_sdi+0x5c>
 8004588:	2302      	movs	r3, #2
 800458a:	e048      	b.n	800461e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	61da      	str	r2, [r3, #28]
 8004594:	e029      	b.n	80045ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	895b      	ldrh	r3, [r3, #10]
 800459a:	025b      	lsls	r3, r3, #9
 800459c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800459e:	e019      	b.n	80045d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fd34 	bl	8004012 <get_fat>
 80045aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d101      	bne.n	80045b8 <dir_sdi+0x88>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e032      	b.n	800461e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d904      	bls.n	80045c8 <dir_sdi+0x98>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d301      	bcc.n	80045cc <dir_sdi+0x9c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e028      	b.n	800461e <dir_sdi+0xee>
			ofs -= csz;
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d2e1      	bcs.n	80045a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80045dc:	6979      	ldr	r1, [r7, #20]
 80045de:	6938      	ldr	r0, [r7, #16]
 80045e0:	f7ff fcf8 	bl	8003fd4 <clust2sect>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <dir_sdi+0xcc>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e010      	b.n	800461e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	0a5b      	lsrs	r3, r3, #9
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	441a      	add	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	3320      	adds	r3, #32
 800463c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <dir_next+0x28>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464c:	d301      	bcc.n	8004652 <dir_next+0x2c>
 800464e:	2304      	movs	r3, #4
 8004650:	e0aa      	b.n	80047a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 8098 	bne.w	800478e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	8912      	ldrh	r2, [r2, #8]
 8004678:	4293      	cmp	r3, r2
 800467a:	f0c0 8088 	bcc.w	800478e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	61da      	str	r2, [r3, #28]
 8004684:	2304      	movs	r3, #4
 8004686:	e08f      	b.n	80047a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	0a5b      	lsrs	r3, r3, #9
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	8952      	ldrh	r2, [r2, #10]
 8004690:	3a01      	subs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d17a      	bne.n	800478e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7ff fcb6 	bl	8004012 <get_fat>
 80046a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d801      	bhi.n	80046b2 <dir_next+0x8c>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e07a      	b.n	80047a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d101      	bne.n	80046be <dir_next+0x98>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e074      	b.n	80047a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d358      	bcc.n	800477a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	61da      	str	r2, [r3, #28]
 80046d4:	2304      	movs	r3, #4
 80046d6:	e067      	b.n	80047a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7ff fe8d 	bl	8004400 <create_chain>
 80046e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <dir_next+0xcc>
 80046ee:	2307      	movs	r3, #7
 80046f0:	e05a      	b.n	80047a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <dir_next+0xd6>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e055      	b.n	80047a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d101      	bne.n	8004708 <dir_next+0xe2>
 8004704:	2301      	movs	r3, #1
 8004706:	e04f      	b.n	80047a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fb83 	bl	8003e14 <sync_window>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <dir_next+0xf2>
 8004714:	2301      	movs	r3, #1
 8004716:	e047      	b.n	80047a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3334      	adds	r3, #52	; 0x34
 800471c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff f97b 	bl	8003a1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fc50 	bl	8003fd4 <clust2sect>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
 800473a:	e012      	b.n	8004762 <dir_next+0x13c>
						fs->wflag = 1;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fb66 	bl	8003e14 <sync_window>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <dir_next+0x12c>
 800474e:	2301      	movs	r3, #1
 8004750:	e02a      	b.n	80047a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	895b      	ldrh	r3, [r3, #10]
 8004766:	461a      	mov	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4293      	cmp	r3, r2
 800476c:	d3e6      	bcc.n	800473c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad2      	subs	r2, r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004780:	6979      	ldr	r1, [r7, #20]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff fc26 	bl	8003fd4 <clust2sect>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80047c0:	2100      	movs	r1, #0
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff feb4 	bl	8004530 <dir_sdi>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d12b      	bne.n	800482a <dir_alloc+0x7a>
		n = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4619      	mov	r1, r3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fb5d 	bl	8003e9c <move_window>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11d      	bne.n	8004828 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2be5      	cmp	r3, #229	; 0xe5
 80047f4:	d004      	beq.n	8004800 <dir_alloc+0x50>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d102      	bne.n	8004814 <dir_alloc+0x64>
 800480e:	e00c      	b.n	800482a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004814:	2101      	movs	r1, #1
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ff05 	bl	8004626 <dir_next>
 800481c:	4603      	mov	r3, r0
 800481e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0d7      	beq.n	80047d6 <dir_alloc+0x26>
 8004826:	e000      	b.n	800482a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004828:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d101      	bne.n	8004834 <dir_alloc+0x84>
 8004830:	2307      	movs	r3, #7
 8004832:	75fb      	strb	r3, [r7, #23]
	return res;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	331a      	adds	r3, #26
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff f843 	bl	80038d8 <ld_word>
 8004852:	4603      	mov	r3, r0
 8004854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d109      	bne.n	8004872 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f838 	bl	80038d8 <ld_word>
 8004868:	4603      	mov	r3, r0
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	331a      	adds	r3, #26
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	b292      	uxth	r2, r2
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f85b 	bl	800394e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d109      	bne.n	80048b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f103 0214 	add.w	r2, r3, #20
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7ff f84d 	bl	800394e <st_word>
	}
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80048c6:	2304      	movs	r3, #4
 80048c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80048d0:	e03c      	b.n	800494c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4619      	mov	r1, r3
 80048d8:	6938      	ldr	r0, [r7, #16]
 80048da:	f7ff fadf 	bl	8003e9c <move_window>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d136      	bne.n	8004956 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80048f6:	2304      	movs	r3, #4
 80048f8:	75fb      	strb	r3, [r7, #23]
 80048fa:	e031      	b.n	8004960 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	330b      	adds	r3, #11
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004908:	73bb      	strb	r3, [r7, #14]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7bba      	ldrb	r2, [r7, #14]
 800490e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2be5      	cmp	r3, #229	; 0xe5
 8004914:	d011      	beq.n	800493a <dir_read+0x7e>
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b2e      	cmp	r3, #46	; 0x2e
 800491a:	d00e      	beq.n	800493a <dir_read+0x7e>
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d00b      	beq.n	800493a <dir_read+0x7e>
 8004922:	7bbb      	ldrb	r3, [r7, #14]
 8004924:	f023 0320 	bic.w	r3, r3, #32
 8004928:	2b08      	cmp	r3, #8
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800493a:	2100      	movs	r1, #0
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fe72 	bl	8004626 <dir_next>
 8004942:	4603      	mov	r3, r0
 8004944:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <dir_read+0xa2>
	while (dp->sect) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1be      	bne.n	80048d2 <dir_read+0x16>
 8004954:	e004      	b.n	8004960 <dir_read+0xa4>
		if (res != FR_OK) break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <dir_read+0xa4>
				break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <dir_read+0xa4>
		if (res != FR_OK) break;
 800495e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <dir_read+0xb0>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	61da      	str	r2, [r3, #28]
	return res;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004984:	2100      	movs	r1, #0
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fdd2 	bl	8004530 <dir_sdi>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <dir_find+0x24>
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	e03e      	b.n	8004a18 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	4619      	mov	r1, r3
 80049a0:	6938      	ldr	r0, [r7, #16]
 80049a2:	f7ff fa7b 	bl	8003e9c <move_window>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d12f      	bne.n	8004a10 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <dir_find+0x4e>
 80049be:	2304      	movs	r3, #4
 80049c0:	75fb      	strb	r3, [r7, #23]
 80049c2:	e028      	b.n	8004a16 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	330b      	adds	r3, #11
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	330b      	adds	r3, #11
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <dir_find+0x86>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a18      	ldr	r0, [r3, #32]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3324      	adds	r3, #36	; 0x24
 80049ee:	220b      	movs	r2, #11
 80049f0:	4619      	mov	r1, r3
 80049f2:	f7ff f82f 	bl	8003a54 <mem_cmp>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80049fc:	2100      	movs	r1, #0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fe11 	bl	8004626 <dir_next>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c5      	beq.n	800499a <dir_find+0x24>
 8004a0e:	e002      	b.n	8004a16 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a14:	bf00      	nop

	return res;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004a2e:	2101      	movs	r1, #1
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff febd 	bl	80047b0 <dir_alloc>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11c      	bne.n	8004a7a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4619      	mov	r1, r3
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f7ff fa28 	bl	8003e9c <move_window>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d111      	bne.n	8004a7a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe ffdd 	bl	8003a1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a18      	ldr	r0, [r3, #32]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	220b      	movs	r2, #11
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7fe ffb4 	bl	80039dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2201      	movs	r2, #1
 8004a78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff f9ff 	bl	8003e9c <move_window>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	22e5      	movs	r2, #229	; 0xe5
 8004aae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004ad6:	220b      	movs	r2, #11
 8004ad8:	2120      	movs	r1, #32
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f7fe ff9f 	bl	8003a1e <mem_set>
	si = i = 0; ni = 8;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	2308      	movs	r3, #8
 8004aea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d94e      	bls.n	8004b9e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004b00:	7efb      	ldrb	r3, [r7, #27]
 8004b02:	2b2f      	cmp	r3, #47	; 0x2f
 8004b04:	d006      	beq.n	8004b14 <create_name+0x54>
 8004b06:	7efb      	ldrb	r3, [r7, #27]
 8004b08:	2b5c      	cmp	r3, #92	; 0x5c
 8004b0a:	d110      	bne.n	8004b2e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b0c:	e002      	b.n	8004b14 <create_name+0x54>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3301      	adds	r3, #1
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b1e:	d0f6      	beq.n	8004b0e <create_name+0x4e>
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b5c      	cmp	r3, #92	; 0x5c
 8004b2a:	d0f0      	beq.n	8004b0e <create_name+0x4e>
			break;
 8004b2c:	e038      	b.n	8004ba0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004b2e:	7efb      	ldrb	r3, [r7, #27]
 8004b30:	2b2e      	cmp	r3, #46	; 0x2e
 8004b32:	d003      	beq.n	8004b3c <create_name+0x7c>
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d30c      	bcc.n	8004b56 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b0b      	cmp	r3, #11
 8004b40:	d002      	beq.n	8004b48 <create_name+0x88>
 8004b42:	7efb      	ldrb	r3, [r7, #27]
 8004b44:	2b2e      	cmp	r3, #46	; 0x2e
 8004b46:	d001      	beq.n	8004b4c <create_name+0x8c>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	e044      	b.n	8004bd6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	230b      	movs	r3, #11
 8004b52:	617b      	str	r3, [r7, #20]
			continue;
 8004b54:	e022      	b.n	8004b9c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004b56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da04      	bge.n	8004b68 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004b5e:	7efb      	ldrb	r3, [r7, #27]
 8004b60:	3b80      	subs	r3, #128	; 0x80
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <create_name+0x120>)
 8004b64:	5cd3      	ldrb	r3, [r2, r3]
 8004b66:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004b68:	7efb      	ldrb	r3, [r7, #27]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	481d      	ldr	r0, [pc, #116]	; (8004be4 <create_name+0x124>)
 8004b6e:	f7fe ff98 	bl	8003aa2 <chk_chr>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <create_name+0xbc>
 8004b78:	2306      	movs	r3, #6
 8004b7a:	e02c      	b.n	8004bd6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004b7c:	7efb      	ldrb	r3, [r7, #27]
 8004b7e:	2b60      	cmp	r3, #96	; 0x60
 8004b80:	d905      	bls.n	8004b8e <create_name+0xce>
 8004b82:	7efb      	ldrb	r3, [r7, #27]
 8004b84:	2b7a      	cmp	r3, #122	; 0x7a
 8004b86:	d802      	bhi.n	8004b8e <create_name+0xce>
 8004b88:	7efb      	ldrb	r3, [r7, #27]
 8004b8a:	3b20      	subs	r3, #32
 8004b8c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	613a      	str	r2, [r7, #16]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4413      	add	r3, r2
 8004b98:	7efa      	ldrb	r2, [r7, #27]
 8004b9a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004b9c:	e7a6      	b.n	8004aec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b9e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <create_name+0xf4>
 8004bb0:	2306      	movs	r3, #6
 8004bb2:	e010      	b.n	8004bd6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2be5      	cmp	r3, #229	; 0xe5
 8004bba:	d102      	bne.n	8004bc2 <create_name+0x102>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004bc2:	7efb      	ldrb	r3, [r7, #27]
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d801      	bhi.n	8004bcc <create_name+0x10c>
 8004bc8:	2204      	movs	r2, #4
 8004bca:	e000      	b.n	8004bce <create_name+0x10e>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	330b      	adds	r3, #11
 8004bd2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004bd4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	0800b7c4 	.word	0x0800b7c4
 8004be4:	0800b6c4 	.word	0x0800b6c4

08004be8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004bfc:	e002      	b.n	8004c04 <follow_path+0x1c>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b2f      	cmp	r3, #47	; 0x2f
 8004c0a:	d0f8      	beq.n	8004bfe <follow_path+0x16>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b5c      	cmp	r3, #92	; 0x5c
 8004c12:	d0f4      	beq.n	8004bfe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b1f      	cmp	r3, #31
 8004c20:	d80a      	bhi.n	8004c38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff fc7f 	bl	8004530 <dir_sdi>
 8004c32:	4603      	mov	r3, r0
 8004c34:	75fb      	strb	r3, [r7, #23]
 8004c36:	e043      	b.n	8004cc0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c38:	463b      	mov	r3, r7
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff3f 	bl	8004ac0 <create_name>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d134      	bne.n	8004cb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fe92 	bl	8004976 <dir_find>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d127      	bne.n	8004cba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d122      	bne.n	8004cba <follow_path+0xd2>
 8004c74:	2305      	movs	r3, #5
 8004c76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004c78:	e01f      	b.n	8004cba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c7a:	7afb      	ldrb	r3, [r7, #11]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11c      	bne.n	8004cbe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	799b      	ldrb	r3, [r3, #6]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004c90:	2305      	movs	r3, #5
 8004c92:	75fb      	strb	r3, [r7, #23]
 8004c94:	e014      	b.n	8004cc0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	4413      	add	r3, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fdc8 	bl	800483e <ld_clust>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004cb4:	e7c0      	b.n	8004c38 <follow_path+0x50>
			if (res != FR_OK) break;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <follow_path+0xd8>
				break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004cbe:	bf00      	nop
			}
		}
	}

	return res;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d031      	beq.n	8004d44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e002      	b.n	8004cee <get_ldnumber+0x24>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3301      	adds	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d903      	bls.n	8004cfe <get_ldnumber+0x34>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b3a      	cmp	r3, #58	; 0x3a
 8004cfc:	d1f4      	bne.n	8004ce8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b3a      	cmp	r3, #58	; 0x3a
 8004d04:	d11c      	bne.n	8004d40 <get_ldnumber+0x76>
			tp = *path;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	60fa      	str	r2, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	3b30      	subs	r3, #48	; 0x30
 8004d16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b09      	cmp	r3, #9
 8004d1c:	d80e      	bhi.n	8004d3c <get_ldnumber+0x72>
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10a      	bne.n	8004d3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <get_ldnumber+0x72>
					vol = (int)i;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3301      	adds	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	e002      	b.n	8004d46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004d44:	693b      	ldr	r3, [r7, #16]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	70da      	strb	r2, [r3, #3]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f894 	bl	8003e9c <move_window>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <check_fs+0x2a>
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	e038      	b.n	8004df0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3334      	adds	r3, #52	; 0x34
 8004d82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fda6 	bl	80038d8 <ld_word>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <check_fs+0x48>
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e029      	b.n	8004df0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004da2:	2be9      	cmp	r3, #233	; 0xe9
 8004da4:	d009      	beq.n	8004dba <check_fs+0x66>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dac:	2beb      	cmp	r3, #235	; 0xeb
 8004dae:	d11e      	bne.n	8004dee <check_fs+0x9a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004db6:	2b90      	cmp	r3, #144	; 0x90
 8004db8:	d119      	bne.n	8004dee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3334      	adds	r3, #52	; 0x34
 8004dbe:	3336      	adds	r3, #54	; 0x36
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fda1 	bl	8003908 <ld_dword>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004dcc:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <check_fs+0xa4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <check_fs+0x82>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e00c      	b.n	8004df0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3334      	adds	r3, #52	; 0x34
 8004dda:	3352      	adds	r3, #82	; 0x52
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe fd93 	bl	8003908 <ld_dword>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <check_fs+0xa8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <check_fs+0x9a>
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004dee:	2302      	movs	r3, #2
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	00544146 	.word	0x00544146
 8004dfc:	33544146 	.word	0x33544146

08004e00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b096      	sub	sp, #88	; 0x58
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff58 	bl	8004cca <get_ldnumber>
 8004e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da01      	bge.n	8004e26 <find_volume+0x26>
 8004e22:	230b      	movs	r3, #11
 8004e24:	e235      	b.n	8005292 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004e26:	4aa5      	ldr	r2, [pc, #660]	; (80050bc <find_volume+0x2bc>)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <find_volume+0x3a>
 8004e36:	230c      	movs	r3, #12
 8004e38:	e22b      	b.n	8005292 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8004e3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e3c:	f7fe fe4c 	bl	8003ad8 <lock_fs>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <find_volume+0x4a>
 8004e46:	230f      	movs	r3, #15
 8004e48:	e223      	b.n	8005292 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fc97 	bl	8003798 <disk_status>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10c      	bne.n	8004e96 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <find_volume+0x92>
 8004e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8004e8e:	230a      	movs	r3, #10
 8004e90:	e1ff      	b.n	8005292 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8004e92:	2300      	movs	r3, #0
 8004e94:	e1fd      	b.n	8005292 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fc8f 	bl	80037cc <disk_initialize>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1e6      	b.n	8005292 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <find_volume+0xda>
 8004eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	e1db      	b.n	8005292 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004ede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ee2:	f7ff ff37 	bl	8004d54 <check_fs>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d149      	bne.n	8004f88 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef8:	e01e      	b.n	8004f38 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004f08:	4413      	add	r3, r2
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	3304      	adds	r3, #4
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <find_volume+0x124>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fcf4 	bl	8003908 <ld_dword>
 8004f20:	4602      	mov	r2, r0
 8004f22:	e000      	b.n	8004f26 <find_volume+0x126>
 8004f24:	2200      	movs	r2, #0
 8004f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3358      	adds	r3, #88	; 0x58
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f34:	3301      	adds	r3, #1
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40
 8004f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d9dd      	bls.n	8004efa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004f3e:	2300      	movs	r3, #0
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <find_volume+0x14e>
 8004f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3358      	adds	r3, #88	; 0x58
 8004f54:	443b      	add	r3, r7
 8004f56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <find_volume+0x16e>
 8004f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f66:	f7ff fef5 	bl	8004d54 <check_fs>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	e000      	b.n	8004f70 <find_volume+0x170>
 8004f6e:	2303      	movs	r3, #3
 8004f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d905      	bls.n	8004f88 <find_volume+0x188>
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7e:	3301      	adds	r3, #1
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d9e2      	bls.n	8004f4e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d101      	bne.n	8004f94 <find_volume+0x194>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e17e      	b.n	8005292 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d901      	bls.n	8004fa0 <find_volume+0x1a0>
 8004f9c:	230d      	movs	r3, #13
 8004f9e:	e178      	b.n	8005292 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	3334      	adds	r3, #52	; 0x34
 8004fa4:	330b      	adds	r3, #11
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe fc96 	bl	80038d8 <ld_word>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb2:	d001      	beq.n	8004fb8 <find_volume+0x1b8>
 8004fb4:	230d      	movs	r3, #13
 8004fb6:	e16c      	b.n	8005292 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	3334      	adds	r3, #52	; 0x34
 8004fbc:	3316      	adds	r3, #22
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fc8a 	bl	80038d8 <ld_word>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <find_volume+0x1dc>
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	3334      	adds	r3, #52	; 0x34
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fc97 	bl	8003908 <ld_dword>
 8004fda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	789b      	ldrb	r3, [r3, #2]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d005      	beq.n	8005000 <find_volume+0x200>
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d001      	beq.n	8005000 <find_volume+0x200>
 8004ffc:	230d      	movs	r3, #13
 8004ffe:	e148      	b.n	8005292 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	789b      	ldrb	r3, [r3, #2]
 8005004:	461a      	mov	r2, r3
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005014:	b29a      	uxth	r2, r3
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	895b      	ldrh	r3, [r3, #10]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <find_volume+0x234>
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	895b      	ldrh	r3, [r3, #10]
 8005026:	461a      	mov	r2, r3
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	3b01      	subs	r3, #1
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <find_volume+0x238>
 8005034:	230d      	movs	r3, #13
 8005036:	e12c      	b.n	8005292 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	3334      	adds	r3, #52	; 0x34
 800503c:	3311      	adds	r3, #17
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fc4a 	bl	80038d8 <ld_word>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	891b      	ldrh	r3, [r3, #8]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <find_volume+0x25e>
 800505a:	230d      	movs	r3, #13
 800505c:	e119      	b.n	8005292 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	3334      	adds	r3, #52	; 0x34
 8005062:	3313      	adds	r3, #19
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fc37 	bl	80038d8 <ld_word>
 800506a:	4603      	mov	r3, r0
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800506e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <find_volume+0x282>
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	3334      	adds	r3, #52	; 0x34
 8005078:	3320      	adds	r3, #32
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc44 	bl	8003908 <ld_dword>
 8005080:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	3334      	adds	r3, #52	; 0x34
 8005086:	330e      	adds	r3, #14
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fc25 	bl	80038d8 <ld_word>
 800508e:	4603      	mov	r3, r0
 8005090:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <find_volume+0x29c>
 8005098:	230d      	movs	r3, #13
 800509a:	e0fa      	b.n	8005292 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800509c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	4413      	add	r3, r2
 80050a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a4:	8912      	ldrh	r2, [r2, #8]
 80050a6:	0912      	lsrs	r2, r2, #4
 80050a8:	b292      	uxth	r2, r2
 80050aa:	4413      	add	r3, r2
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80050ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d204      	bcs.n	80050c0 <find_volume+0x2c0>
 80050b6:	230d      	movs	r3, #13
 80050b8:	e0eb      	b.n	8005292 <find_volume+0x492>
 80050ba:	bf00      	nop
 80050bc:	20014f40 	.word	0x20014f40
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80050c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c8:	8952      	ldrh	r2, [r2, #10]
 80050ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <find_volume+0x2da>
 80050d6:	230d      	movs	r3, #13
 80050d8:	e0db      	b.n	8005292 <find_volume+0x492>
		fmt = FS_FAT32;
 80050da:	2303      	movs	r3, #3
 80050dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d802      	bhi.n	80050f0 <find_volume+0x2f0>
 80050ea:	2302      	movs	r3, #2
 80050ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <find_volume+0x300>
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800510c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800510e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	441a      	add	r2, r3
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	441a      	add	r2, r3
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005126:	2b03      	cmp	r3, #3
 8005128:	d11e      	bne.n	8005168 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	3334      	adds	r3, #52	; 0x34
 800512e:	332a      	adds	r3, #42	; 0x2a
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe fbd1 	bl	80038d8 <ld_word>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <find_volume+0x340>
 800513c:	230d      	movs	r3, #13
 800513e:	e0a8      	b.n	8005292 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	891b      	ldrh	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <find_volume+0x34c>
 8005148:	230d      	movs	r3, #13
 800514a:	e0a2      	b.n	8005292 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	3334      	adds	r3, #52	; 0x34
 8005150:	332c      	adds	r3, #44	; 0x2c
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fbd8 	bl	8003908 <ld_dword>
 8005158:	4602      	mov	r2, r0
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
 8005166:	e01f      	b.n	80051a8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	891b      	ldrh	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <find_volume+0x374>
 8005170:	230d      	movs	r3, #13
 8005172:	e08e      	b.n	8005292 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517a:	441a      	add	r2, r3
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005184:	2b02      	cmp	r3, #2
 8005186:	d103      	bne.n	8005190 <find_volume+0x390>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	e00a      	b.n	80051a6 <find_volume+0x3a6>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	085a      	lsrs	r2, r3, #1
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80051b2:	0a5b      	lsrs	r3, r3, #9
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d201      	bcs.n	80051bc <find_volume+0x3bc>
 80051b8:	230d      	movs	r3, #13
 80051ba:	e06a      	b.n	8005292 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	615a      	str	r2, [r3, #20]
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80051d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d149      	bne.n	800526e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	3334      	adds	r3, #52	; 0x34
 80051de:	3330      	adds	r3, #48	; 0x30
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fb79 	bl	80038d8 <ld_word>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d140      	bne.n	800526e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80051ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ee:	3301      	adds	r3, #1
 80051f0:	4619      	mov	r1, r3
 80051f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051f4:	f7fe fe52 	bl	8003e9c <move_window>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d137      	bne.n	800526e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2200      	movs	r2, #0
 8005202:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	3334      	adds	r3, #52	; 0x34
 8005208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fb63 	bl	80038d8 <ld_word>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800521a:	429a      	cmp	r2, r3
 800521c:	d127      	bne.n	800526e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	3334      	adds	r3, #52	; 0x34
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fb70 	bl	8003908 <ld_dword>
 8005228:	4603      	mov	r3, r0
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <find_volume+0x49c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d11e      	bne.n	800526e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	3334      	adds	r3, #52	; 0x34
 8005234:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe fb65 	bl	8003908 <ld_dword>
 800523e:	4603      	mov	r3, r0
 8005240:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <find_volume+0x4a0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d113      	bne.n	800526e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	3334      	adds	r3, #52	; 0x34
 800524a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fb5a 	bl	8003908 <ld_dword>
 8005254:	4602      	mov	r2, r0
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	3334      	adds	r3, #52	; 0x34
 800525e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fb50 	bl	8003908 <ld_dword>
 8005268:	4602      	mov	r2, r0
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005274:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <find_volume+0x4a4>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	3301      	adds	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <find_volume+0x4a4>)
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <find_volume+0x4a4>)
 8005284:	881a      	ldrh	r2, [r3, #0]
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800528a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800528c:	f7fe fd9e 	bl	8003dcc <clear_lock>
#endif
	return FR_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3758      	adds	r7, #88	; 0x58
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	41615252 	.word	0x41615252
 80052a0:	61417272 	.word	0x61417272
 80052a4:	20014f44 	.word	0x20014f44

080052a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80052b2:	2309      	movs	r3, #9
 80052b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02e      	beq.n	800531a <validate+0x72>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02a      	beq.n	800531a <validate+0x72>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d025      	beq.n	800531a <validate+0x72>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	889a      	ldrh	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	88db      	ldrh	r3, [r3, #6]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d11e      	bne.n	800531a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fbf9 	bl	8003ad8 <lock_fs>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d014      	beq.n	8005316 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fa50 	bl	8003798 <disk_status>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <validate+0x60>
				res = FR_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
 8005306:	e008      	b.n	800531a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fbf8 	bl	8003b04 <unlock_fs>
 8005314:	e001      	b.n	800531a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8005316:	230f      	movs	r3, #15
 8005318:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <validate+0x7e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	e000      	b.n	8005328 <validate+0x80>
 8005326:	2300      	movs	r3, #0
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	6013      	str	r3, [r2, #0]
	return res;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800534a:	f107 0310 	add.w	r3, r7, #16
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fcbb 	bl	8004cca <get_ldnumber>
 8005354:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	da01      	bge.n	8005360 <f_mount+0x28>
 800535c:	230b      	movs	r3, #11
 800535e:	e048      	b.n	80053f2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005360:	4a26      	ldr	r2, [pc, #152]	; (80053fc <f_mount+0xc4>)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005368:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005370:	69b8      	ldr	r0, [r7, #24]
 8005372:	f7fe fd2b 	bl	8003dcc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fb06 	bl	800698c <ff_del_syncobj>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <f_mount+0x52>
 8005386:	2302      	movs	r3, #2
 8005388:	e033      	b.n	80053f2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	330c      	adds	r3, #12
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f001 fad7 	bl	800695a <ff_cre_syncobj>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <f_mount+0x7e>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e01d      	b.n	80053f2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4910      	ldr	r1, [pc, #64]	; (80053fc <f_mount+0xc4>)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <f_mount+0x94>
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <f_mount+0x98>
 80053cc:	2300      	movs	r3, #0
 80053ce:	e010      	b.n	80053f2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80053d0:	f107 010c 	add.w	r1, r7, #12
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	2200      	movs	r2, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fd10 	bl	8004e00 <find_volume>
 80053e0:	4603      	mov	r3, r0
 80053e2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	7dfa      	ldrb	r2, [r7, #23]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fb8a 	bl	8003b04 <unlock_fs>
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20014f40 	.word	0x20014f40

08005400 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b098      	sub	sp, #96	; 0x60
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <f_open+0x18>
 8005414:	2309      	movs	r3, #9
 8005416:	e1b1      	b.n	800577c <f_open+0x37c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800541e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	f107 0110 	add.w	r1, r7, #16
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fce8 	bl	8004e00 <find_volume>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800543a:	2b00      	cmp	r3, #0
 800543c:	f040 818e 	bne.w	800575c <f_open+0x35c>
		dj.obj.fs = fs;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fbcb 	bl	8004be8 <follow_path>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11a      	bne.n	8005496 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005460:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005464:	b25b      	sxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	da03      	bge.n	8005472 <f_open+0x72>
				res = FR_INVALID_NAME;
 800546a:	2306      	movs	r3, #6
 800546c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005470:	e011      	b.n	8005496 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fb56 	bl	8003b3c <chk_lock>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	f003 031c 	and.w	r3, r3, #28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d07f      	beq.n	80055a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80054a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d017      	beq.n	80054d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80054a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d10e      	bne.n	80054ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80054b0:	f7fe fba0 	bl	8003bf4 <enq_lock>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <f_open+0xc8>
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff faae 	bl	8004a20 <dir_register>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e000      	b.n	80054ca <f_open+0xca>
 80054c8:	2312      	movs	r3, #18
 80054ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	71fb      	strb	r3, [r7, #7]
 80054d6:	e010      	b.n	80054fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80054d8:	7ebb      	ldrb	r3, [r7, #26]
 80054da:	f003 0311 	and.w	r3, r3, #17
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <f_open+0xea>
					res = FR_DENIED;
 80054e2:	2307      	movs	r3, #7
 80054e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80054e8:	e007      	b.n	80054fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <f_open+0xfa>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d168      	bne.n	80055d4 <f_open+0x1d4>
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d063      	beq.n	80055d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800550c:	f7fe f86c 	bl	80035e8 <get_fattime>
 8005510:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	330e      	adds	r3, #14
 8005516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fa33 	bl	8003984 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	3316      	adds	r3, #22
 8005522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fa2d 	bl	8003984 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	330b      	adds	r3, #11
 800552e:	2220      	movs	r2, #32
 8005530:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f980 	bl	800483e <ld_clust>
 800553e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005544:	2200      	movs	r2, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff f998 	bl	800487c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	331c      	adds	r3, #28
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fa16 	bl	8003984 <st_dword>
					fs->wflag = 1;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2201      	movs	r2, #1
 800555c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d037      	beq.n	80055d4 <f_open+0x1d4>
						dw = fs->winsect;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800556a:	f107 0314 	add.w	r3, r7, #20
 800556e:	2200      	movs	r2, #0
 8005570:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fedf 	bl	8004336 <remove_chain>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800557e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005582:	2b00      	cmp	r3, #0
 8005584:	d126      	bne.n	80055d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fc86 	bl	8003e9c <move_window>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559a:	3a01      	subs	r2, #1
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e019      	b.n	80055d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80055a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d115      	bne.n	80055d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80055a8:	7ebb      	ldrb	r3, [r7, #26]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80055b2:	2304      	movs	r3, #4
 80055b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80055b8:	e00c      	b.n	80055d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <f_open+0x1d4>
 80055c4:	7ebb      	ldrb	r3, [r7, #26]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <f_open+0x1d4>
						res = FR_DENIED;
 80055ce:	2307      	movs	r3, #7
 80055d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80055d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d128      	bne.n	800562e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80055f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fb0f 	bl	8003c38 <inc_lock>
 800561a:	4602      	mov	r2, r0
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <f_open+0x22e>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800562e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 8092 	bne.w	800575c <f_open+0x35c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f8fd 	bl	800483e <ld_clust>
 8005644:	4602      	mov	r2, r0
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	331c      	adds	r3, #28
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe f95a 	bl	8003908 <ld_dword>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	88da      	ldrh	r2, [r3, #6]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	79fa      	ldrb	r2, [r7, #7]
 800566c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	332c      	adds	r3, #44	; 0x2c
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe f9c7 	bl	8003a1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d060      	beq.n	800575c <f_open+0x35c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d05c      	beq.n	800575c <f_open+0x35c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	895b      	ldrh	r3, [r3, #10]
 80056ae:	025b      	lsls	r3, r3, #9
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	657b      	str	r3, [r7, #84]	; 0x54
 80056be:	e016      	b.n	80056ee <f_open+0x2ee>
					clst = get_fat(&fp->obj, clst);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fca4 	bl	8004012 <get_fat>
 80056ca:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80056cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d802      	bhi.n	80056d8 <f_open+0x2d8>
 80056d2:	2302      	movs	r3, #2
 80056d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80056d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d102      	bne.n	80056e6 <f_open+0x2e6>
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	657b      	str	r3, [r7, #84]	; 0x54
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <f_open+0x2fe>
 80056f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d8e0      	bhi.n	80056c0 <f_open+0x2c0>
				}
				fp->clust = clst;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005702:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005708:	2b00      	cmp	r3, #0
 800570a:	d127      	bne.n	800575c <f_open+0x35c>
 800570c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005712:	2b00      	cmp	r3, #0
 8005714:	d022      	beq.n	800575c <f_open+0x35c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fc5a 	bl	8003fd4 <clust2sect>
 8005720:	6478      	str	r0, [r7, #68]	; 0x44
 8005722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <f_open+0x330>
						res = FR_INT_ERR;
 8005728:	2302      	movs	r3, #2
 800572a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800572e:	e015      	b.n	800575c <f_open+0x35c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005732:	0a5a      	lsrs	r2, r3, #9
 8005734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	7858      	ldrb	r0, [r3, #1]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	2301      	movs	r3, #1
 800574c:	f7fe f866 	bl	800381c <disk_read>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <f_open+0x35c>
 8005756:	2301      	movs	r3, #1
 8005758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800575c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <f_open+0x36a>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe f9c6 	bl	8003b04 <unlock_fs>
 8005778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800577c:	4618      	mov	r0, r3
 800577e:	3760      	adds	r7, #96	; 0x60
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08e      	sub	sp, #56	; 0x38
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f107 0214 	add.w	r2, r7, #20
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fd7f 	bl	80052a8 <validate>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80057b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <f_read+0x44>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	7d5b      	ldrb	r3, [r3, #21]
 80057bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80057c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <f_read+0x58>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe f997 	bl	8003b04 <unlock_fs>
 80057d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057da:	e131      	b.n	8005a40 <f_read+0x2bc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	7d1b      	ldrb	r3, [r3, #20]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <f_read+0x72>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2107      	movs	r1, #7
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f989 	bl	8003b04 <unlock_fs>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e124      	b.n	8005a40 <f_read+0x2bc>
	remain = fp->obj.objsize - fp->fptr;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	429a      	cmp	r2, r3
 8005808:	f240 8110 	bls.w	8005a2c <f_read+0x2a8>
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005810:	e10c      	b.n	8005a2c <f_read+0x2a8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 80d8 	bne.w	80059d0 <f_read+0x24c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	8952      	ldrh	r2, [r2, #10]
 800582a:	3a01      	subs	r2, #1
 800582c:	4013      	ands	r3, r2
 800582e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d12d      	bne.n	8005892 <f_read+0x10e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
 8005844:	e007      	b.n	8005856 <f_read+0xd2>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7fe fbdf 	bl	8004012 <get_fat>
 8005854:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	d809      	bhi.n	8005870 <f_read+0xec>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2202      	movs	r2, #2
 8005860:	755a      	strb	r2, [r3, #21]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2102      	movs	r1, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe f94c 	bl	8003b04 <unlock_fs>
 800586c:	2302      	movs	r3, #2
 800586e:	e0e7      	b.n	8005a40 <f_read+0x2bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d109      	bne.n	800588c <f_read+0x108>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	755a      	strb	r2, [r3, #21]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe f93e 	bl	8003b04 <unlock_fs>
 8005888:	2301      	movs	r3, #1
 800588a:	e0d9      	b.n	8005a40 <f_read+0x2bc>
				fp->clust = clst;				/* Update current cluster */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005890:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f7fe fb9a 	bl	8003fd4 <clust2sect>
 80058a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <f_read+0x138>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	755a      	strb	r2, [r3, #21]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2102      	movs	r1, #2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe f926 	bl	8003b04 <unlock_fs>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0c1      	b.n	8005a40 <f_read+0x2bc>
			sect += csect;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0a5b      	lsrs	r3, r3, #9
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d03e      	beq.n	800594e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	4413      	add	r3, r2
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	8952      	ldrh	r2, [r2, #10]
 80058da:	4293      	cmp	r3, r2
 80058dc:	d905      	bls.n	80058ea <f_read+0x166>
					cc = fs->csize - csect;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	895b      	ldrh	r3, [r3, #10]
 80058e2:	461a      	mov	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	7858      	ldrb	r0, [r3, #1]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f4:	f7fd ff92 	bl	800381c <disk_read>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <f_read+0x18e>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	755a      	strb	r2, [r3, #21]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2101      	movs	r1, #1
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe f8fb 	bl	8003b04 <unlock_fs>
 800590e:	2301      	movs	r3, #1
 8005910:	e096      	b.n	8005a40 <f_read+0x2bc>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	7d1b      	ldrb	r3, [r3, #20]
 8005916:	b25b      	sxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	da14      	bge.n	8005946 <f_read+0x1c2>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005926:	429a      	cmp	r2, r3
 8005928:	d90d      	bls.n	8005946 <f_read+0x1c2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	025b      	lsls	r3, r3, #9
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	18d0      	adds	r0, r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	332c      	adds	r3, #44	; 0x2c
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	4619      	mov	r1, r3
 8005942:	f7fe f84b 	bl	80039dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	025b      	lsls	r3, r3, #9
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800594c:	e05a      	b.n	8005a04 <f_read+0x280>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d038      	beq.n	80059ca <f_read+0x246>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	7d1b      	ldrb	r3, [r3, #20]
 800595c:	b25b      	sxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	da1d      	bge.n	800599e <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	7858      	ldrb	r0, [r3, #1]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	2301      	movs	r3, #1
 8005972:	f7fd ff73 	bl	800385c <disk_write>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <f_read+0x20c>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	755a      	strb	r2, [r3, #21]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe f8bc 	bl	8003b04 <unlock_fs>
 800598c:	2301      	movs	r3, #1
 800598e:	e057      	b.n	8005a40 <f_read+0x2bc>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	7d1b      	ldrb	r3, [r3, #20]
 8005994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	7858      	ldrb	r0, [r3, #1]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80059a8:	2301      	movs	r3, #1
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	f7fd ff36 	bl	800381c <disk_read>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <f_read+0x246>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	755a      	strb	r2, [r3, #21]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe f89f 	bl	8003b04 <unlock_fs>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03a      	b.n	8005a40 <f_read+0x2bc>
			}
#endif
			fp->sect = sect;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80059de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d901      	bls.n	80059ea <f_read+0x266>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f8:	4413      	add	r3, r2
 80059fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fc:	4619      	mov	r1, r3
 80059fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a00:	f7fd ffec 	bl	80039dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	4413      	add	r3, r2
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	441a      	add	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	619a      	str	r2, [r3, #24]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	441a      	add	r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f aeef 	bne.w	8005812 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe f863 	bl	8003b04 <unlock_fs>
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3738      	adds	r7, #56	; 0x38
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f107 0210 	add.w	r2, r7, #16
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fc1d 	bl	80052a8 <validate>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <f_write+0x44>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	7d5b      	ldrb	r3, [r3, #21]
 8005a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <f_write+0x58>
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe f835 	bl	8003b04 <unlock_fs>
 8005a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a9e:	e167      	b.n	8005d70 <f_write+0x328>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	7d1b      	ldrb	r3, [r3, #20]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <f_write+0x72>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2107      	movs	r1, #7
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe f827 	bl	8003b04 <unlock_fs>
 8005ab6:	2307      	movs	r3, #7
 8005ab8:	e15a      	b.n	8005d70 <f_write+0x328>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	f080 813f 	bcs.w	8005d4a <f_write+0x302>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005ad4:	e139      	b.n	8005d4a <f_write+0x302>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 80f5 	bne.w	8005cce <f_write+0x286>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	0a5b      	lsrs	r3, r3, #9
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	8952      	ldrh	r2, [r2, #10]
 8005aee:	3a01      	subs	r2, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d141      	bne.n	8005b7e <f_write+0x136>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fc74 	bl	8004400 <create_chain>
 8005b18:	62b8      	str	r0, [r7, #40]	; 0x28
 8005b1a:	e007      	b.n	8005b2c <f_write+0xe4>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe fc6b 	bl	8004400 <create_chain>
 8005b2a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8110 	beq.w	8005d54 <f_write+0x30c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d109      	bne.n	8005b4e <f_write+0x106>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	755a      	strb	r2, [r3, #21]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2102      	movs	r1, #2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fd ffdd 	bl	8003b04 <unlock_fs>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e110      	b.n	8005d70 <f_write+0x328>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d109      	bne.n	8005b6a <f_write+0x122>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	755a      	strb	r2, [r3, #21]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd ffcf 	bl	8003b04 <unlock_fs>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e102      	b.n	8005d70 <f_write+0x328>
				fp->clust = clst;			/* Update current cluster */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <f_write+0x136>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	7d1b      	ldrb	r3, [r3, #20]
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da1d      	bge.n	8005bc4 <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	7858      	ldrb	r0, [r3, #1]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	2301      	movs	r3, #1
 8005b98:	f7fd fe60 	bl	800385c <disk_write>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <f_write+0x16e>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	755a      	strb	r2, [r3, #21]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2101      	movs	r1, #1
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd ffa9 	bl	8003b04 <unlock_fs>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0dc      	b.n	8005d70 <f_write+0x328>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	7d1b      	ldrb	r3, [r3, #20]
 8005bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7fe fa01 	bl	8003fd4 <clust2sect>
 8005bd2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <f_write+0x1a6>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	755a      	strb	r2, [r3, #21]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2102      	movs	r1, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fd ff8d 	bl	8003b04 <unlock_fs>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e0c0      	b.n	8005d70 <f_write+0x328>
			sect += csect;
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0a5b      	lsrs	r3, r3, #9
 8005bfa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d041      	beq.n	8005c86 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	4413      	add	r3, r2
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	8952      	ldrh	r2, [r2, #10]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d905      	bls.n	8005c1c <f_write+0x1d4>
					cc = fs->csize - csect;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	895b      	ldrh	r3, [r3, #10]
 8005c14:	461a      	mov	r2, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	7858      	ldrb	r0, [r3, #1]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	69f9      	ldr	r1, [r7, #28]
 8005c26:	f7fd fe19 	bl	800385c <disk_write>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <f_write+0x1fc>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	755a      	strb	r2, [r3, #21]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2101      	movs	r1, #1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fd ff62 	bl	8003b04 <unlock_fs>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e095      	b.n	8005d70 <f_write+0x328>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d915      	bls.n	8005c7e <f_write+0x236>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	025b      	lsls	r3, r3, #9
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f7fd feb6 	bl	80039dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	7d1b      	ldrb	r3, [r3, #20]
 8005c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	025b      	lsls	r3, r3, #9
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005c84:	e044      	b.n	8005d10 <f_write+0x2c8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d01b      	beq.n	8005cc8 <f_write+0x280>
				fp->fptr < fp->obj.objsize &&
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d215      	bcs.n	8005cc8 <f_write+0x280>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	7858      	ldrb	r0, [r3, #1]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f7fd fdb7 	bl	800381c <disk_read>
 8005cae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <f_write+0x280>
					ABORT(fs, FR_DISK_ERR);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	755a      	strb	r2, [r3, #21]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd ff20 	bl	8003b04 <unlock_fs>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e053      	b.n	8005d70 <f_write+0x328>
			}
#endif
			fp->sect = sect;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d901      	bls.n	8005ce8 <f_write+0x2a0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	4413      	add	r3, r2
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	69f9      	ldr	r1, [r7, #28]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fd fe6d 	bl	80039dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	7d1b      	ldrb	r3, [r3, #20]
 8005d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	4413      	add	r3, r2
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	619a      	str	r2, [r3, #24]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf38      	it	cc
 8005d30:	461a      	movcc	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	441a      	add	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f aec2 	bne.w	8005ad6 <f_write+0x8e>
 8005d52:	e000      	b.n	8005d56 <f_write+0x30e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7d1b      	ldrb	r3, [r3, #20]
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fd fecb 	bl	8003b04 <unlock_fs>
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3730      	adds	r7, #48	; 0x30
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f107 0208 	add.w	r2, r7, #8
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fa8d 	bl	80052a8 <validate>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d16d      	bne.n	8005e74 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7d1b      	ldrb	r3, [r3, #20]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d067      	beq.n	8005e74 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7d1b      	ldrb	r3, [r3, #20]
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da1a      	bge.n	8005de4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	7858      	ldrb	r0, [r3, #1]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1a      	ldr	r2, [r3, #32]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f7fd fd4d 	bl	800385c <disk_write>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <f_sync+0x5e>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd fe99 	bl	8003b04 <unlock_fs>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e055      	b.n	8005e82 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7d1b      	ldrb	r3, [r3, #20]
 8005dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005de4:	f7fd fc00 	bl	80035e8 <get_fattime>
 8005de8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe f852 	bl	8003e9c <move_window>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d138      	bne.n	8005e74 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	330b      	adds	r3, #11
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	330b      	adds	r3, #11
 8005e12:	f042 0220 	orr.w	r2, r2, #32
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	461a      	mov	r2, r3
 8005e24:	68f9      	ldr	r1, [r7, #12]
 8005e26:	f7fe fd29 	bl	800487c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f103 021c 	add.w	r2, r3, #28
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f7fd fda4 	bl	8003984 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3316      	adds	r3, #22
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd fd9e 	bl	8003984 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3312      	adds	r3, #18
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd fd7d 	bl	800394e <st_word>
					fs->wflag = 1;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2201      	movs	r2, #1
 8005e58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe f84b 	bl	8003ef8 <sync_fs>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7d1b      	ldrb	r3, [r3, #20]
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	7dfa      	ldrb	r2, [r7, #23]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fd fe42 	bl	8003b04 <unlock_fs>
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff70 	bl	8005d78 <f_sync>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11d      	bne.n	8005ede <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f107 0208 	add.w	r2, r7, #8
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f9fc 	bl	80052a8 <validate>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d111      	bne.n	8005ede <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd ff48 	bl	8003d54 <dec_lock>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fd fe13 	bl	8003b04 <unlock_fs>
#endif
		}
	}
	return res;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b09e      	sub	sp, #120	; 0x78
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8005ef4:	f107 010c 	add.w	r1, r7, #12
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	2202      	movs	r2, #2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe ff7f 	bl	8004e00 <find_volume>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8005f0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 808e 	bne.w	8006032 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fe62 	bl	8004be8 <follow_path>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8005f2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <f_unlink+0x5c>
 8005f32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f36:	2102      	movs	r1, #2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fdff 	bl	8003b3c <chk_lock>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8005f44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d172      	bne.n	8006032 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005f4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da03      	bge.n	8005f5e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005f56:	2306      	movs	r3, #6
 8005f58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005f5c:	e008      	b.n	8005f70 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8005f5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8005f70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d134      	bne.n	8005fe2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fc5d 	bl	800483e <ld_clust>
 8005f84:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005f86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d027      	beq.n	8005fe2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8005f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f98:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8005f9a:	f107 0310 	add.w	r3, r7, #16
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fac5 	bl	8004530 <dir_sdi>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8005fac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8005fb4:	f107 0310 	add.w	r3, r7, #16
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fc7e 	bl	80048bc <dir_read>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005fc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <f_unlink+0xec>
 8005fce:	2307      	movs	r3, #7
 8005fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005fd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d102      	bne.n	8005fe2 <f_unlink+0xfa>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8005fe2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d123      	bne.n	8006032 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005fea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fd48 	bl	8004a84 <dir_remove>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8005ffa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <f_unlink+0x134>
 8006002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8006008:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800600c:	2200      	movs	r2, #0
 800600e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe f990 	bl	8004336 <remove_chain>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800601c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <f_unlink+0x14a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd ff66 	bl	8003ef8 <sync_fs>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd fd62 	bl	8003b04 <unlock_fs>
 8006040:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006044:	4618      	mov	r0, r3
 8006046:	3778      	adds	r7, #120	; 0x78
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b09d      	sub	sp, #116	; 0x74
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	460b      	mov	r3, r1
 800605a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800605c:	2301      	movs	r3, #1
 800605e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006064:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fe2d 	bl	8004cca <get_ldnumber>
 8006070:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	da02      	bge.n	800607e <f_mkfs+0x32>
 8006078:	230b      	movs	r3, #11
 800607a:	f000 bc0d 	b.w	8006898 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800607e:	4a94      	ldr	r2, [pc, #592]	; (80062d0 <f_mkfs+0x284>)
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <f_mkfs+0x4a>
 800608a:	4a91      	ldr	r2, [pc, #580]	; (80062d0 <f_mkfs+0x284>)
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8006096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006098:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800609c:	2300      	movs	r3, #0
 800609e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80060a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd fb90 	bl	80037cc <disk_initialize>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80060b2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <f_mkfs+0x76>
 80060be:	2303      	movs	r3, #3
 80060c0:	e3ea      	b.n	8006898 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80060c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <f_mkfs+0x86>
 80060ce:	230a      	movs	r3, #10
 80060d0:	e3e2      	b.n	8006898 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80060d2:	f107 0214 	add.w	r2, r7, #20
 80060d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060da:	2103      	movs	r1, #3
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fd fbdd 	bl	800389c <disk_ioctl>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10c      	bne.n	8006102 <f_mkfs+0xb6>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <f_mkfs+0xb6>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f4:	d805      	bhi.n	8006102 <f_mkfs+0xb6>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <f_mkfs+0xba>
 8006102:	2301      	movs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8006106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800610a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <f_mkfs+0xce>
 8006112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d309      	bcc.n	800612e <f_mkfs+0xe2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006120:	d805      	bhi.n	800612e <f_mkfs+0xe2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <f_mkfs+0xe6>
 800612e:	2313      	movs	r3, #19
 8006130:	e3b2      	b.n	8006898 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8006132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006146:	fbb2 f3f3 	udiv	r3, r2, r3
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800614c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <f_mkfs+0x114>
 800615c:	230e      	movs	r3, #14
 800615e:	e39b      	b.n	8006898 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006160:	f107 0210 	add.w	r2, r7, #16
 8006164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006168:	2101      	movs	r1, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f7fd fb96 	bl	800389c <disk_ioctl>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <f_mkfs+0x12e>
 8006176:	2301      	movs	r3, #1
 8006178:	e38e      	b.n	8006898 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800617a:	7afb      	ldrb	r3, [r7, #11]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <f_mkfs+0x13c>
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <f_mkfs+0x13e>
 8006188:	233f      	movs	r3, #63	; 0x3f
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006190:	429a      	cmp	r2, r3
 8006192:	d901      	bls.n	8006198 <f_mkfs+0x14c>
 8006194:	230e      	movs	r3, #14
 8006196:	e37f      	b.n	8006898 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b7f      	cmp	r3, #127	; 0x7f
 80061a4:	d801      	bhi.n	80061aa <f_mkfs+0x15e>
 80061a6:	230e      	movs	r3, #14
 80061a8:	e376      	b.n	8006898 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d901      	bls.n	80061b4 <f_mkfs+0x168>
 80061b0:	2313      	movs	r3, #19
 80061b2:	e371      	b.n	8006898 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80061b4:	7afb      	ldrb	r3, [r7, #11]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00d      	beq.n	80061da <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d004      	beq.n	80061d2 <f_mkfs+0x186>
 80061c8:	7afb      	ldrb	r3, [r7, #11]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80061d2:	2303      	movs	r3, #3
 80061d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80061d8:	e009      	b.n	80061ee <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <f_mkfs+0x19c>
 80061e4:	2313      	movs	r3, #19
 80061e6:	e357      	b.n	8006898 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80061e8:	2302      	movs	r3, #2
 80061ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80061f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d13c      	bne.n	8006274 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80061fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11b      	bne.n	8006238 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	0c5b      	lsrs	r3, r3, #17
 8006204:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006206:	2300      	movs	r3, #0
 8006208:	64bb      	str	r3, [r7, #72]	; 0x48
 800620a:	2301      	movs	r3, #1
 800620c:	653b      	str	r3, [r7, #80]	; 0x50
 800620e:	e005      	b.n	800621c <f_mkfs+0x1d0>
 8006210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006212:	3301      	adds	r3, #1
 8006214:	64bb      	str	r3, [r7, #72]	; 0x48
 8006216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	653b      	str	r3, [r7, #80]	; 0x50
 800621c:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <f_mkfs+0x288>)
 800621e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <f_mkfs+0x1ec>
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <f_mkfs+0x288>)
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006230:	461a      	mov	r2, r3
 8006232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006234:	4293      	cmp	r3, r2
 8006236:	d2eb      	bcs.n	8006210 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	3302      	adds	r3, #2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800624a:	4413      	add	r3, r2
 800624c:	1e5a      	subs	r2, r3, #1
 800624e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8006256:	2320      	movs	r3, #32
 8006258:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800625a:	2300      	movs	r3, #0
 800625c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006264:	4293      	cmp	r3, r2
 8006266:	d903      	bls.n	8006270 <f_mkfs+0x224>
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <f_mkfs+0x28c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d952      	bls.n	8006316 <f_mkfs+0x2ca>
 8006270:	230e      	movs	r3, #14
 8006272:	e311      	b.n	8006898 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8006274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11b      	bne.n	80062b2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	0b1b      	lsrs	r3, r3, #12
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006280:	2300      	movs	r3, #0
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
 8006284:	2301      	movs	r3, #1
 8006286:	653b      	str	r3, [r7, #80]	; 0x50
 8006288:	e005      	b.n	8006296 <f_mkfs+0x24a>
 800628a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628c:	3301      	adds	r3, #1
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
 8006296:	4a11      	ldr	r2, [pc, #68]	; (80062dc <f_mkfs+0x290>)
 8006298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <f_mkfs+0x266>
 80062a2:	4a0e      	ldr	r2, [pc, #56]	; (80062dc <f_mkfs+0x290>)
 80062a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d2eb      	bcs.n	800628a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d90c      	bls.n	80062e0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	3302      	adds	r3, #2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ce:	e012      	b.n	80062f6 <f_mkfs+0x2aa>
 80062d0:	20014f40 	.word	0x20014f40
 80062d4:	0800b844 	.word	0x0800b844
 80062d8:	0ffffff5 	.word	0x0ffffff5
 80062dc:	0800b854 	.word	0x0800b854
				} else {
					fmt = FS_FAT12;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	4613      	mov	r3, r2
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4413      	add	r3, r2
 80062ee:	3301      	adds	r3, #1
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	3303      	adds	r3, #3
 80062f4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80062f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fa:	4413      	add	r3, r2
 80062fc:	1e5a      	subs	r2, r3, #1
 80062fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006306:	2301      	movs	r3, #1
 8006308:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006310:	fbb2 f3f3 	udiv	r3, r2, r3
 8006314:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631a:	4413      	add	r3, r2
 800631c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800631e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006322:	fb03 f202 	mul.w	r2, r3, r2
 8006326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006328:	4413      	add	r3, r2
 800632a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800632c:	4413      	add	r3, r2
 800632e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	425b      	negs	r3, r3
 800633c:	401a      	ands	r2, r3
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006348:	2b03      	cmp	r3, #3
 800634a:	d108      	bne.n	800635e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800634c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800634e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006350:	4413      	add	r3, r2
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
 8006354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006358:	4413      	add	r3, r2
 800635a:	65bb      	str	r3, [r7, #88]	; 0x58
 800635c:	e006      	b.n	800636c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800635e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006368:	4413      	add	r3, r2
 800636a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800636c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636e:	011a      	lsls	r2, r3, #4
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	441a      	add	r2, r3
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	1ad2      	subs	r2, r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	d901      	bls.n	8006382 <f_mkfs+0x336>
 800637e:	230e      	movs	r3, #14
 8006380:	e28a      	b.n	8006898 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800638a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800639e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d10f      	bne.n	80063c6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d80a      	bhi.n	80063c6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <f_mkfs+0x376>
 80063b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d144      	bne.n	800644c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80063c2:	230e      	movs	r3, #14
 80063c4:	e268      	b.n	8006898 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80063c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d133      	bne.n	8006436 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d91e      	bls.n	8006416 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <f_mkfs+0x3a2>
 80063de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d803      	bhi.n	80063ee <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80063e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	e033      	b.n	8006456 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80063ee:	7afb      	ldrb	r3, [r7, #11]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80063f8:	2303      	movs	r3, #3
 80063fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063fe:	e02a      	b.n	8006456 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <f_mkfs+0x3c6>
 8006406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b80      	cmp	r3, #128	; 0x80
 8006410:	d91e      	bls.n	8006450 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8006412:	230e      	movs	r3, #14
 8006414:	e240      	b.n	8006898 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f640 72f5 	movw	r2, #4085	; 0xff5
 800641c:	4293      	cmp	r3, r2
 800641e:	d80a      	bhi.n	8006436 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d105      	bne.n	8006432 <f_mkfs+0x3e6>
 8006426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d910      	bls.n	8006454 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8006432:	230e      	movs	r3, #14
 8006434:	e230      	b.n	8006898 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006436:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10c      	bne.n	8006458 <f_mkfs+0x40c>
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006444:	4293      	cmp	r3, r2
 8006446:	d907      	bls.n	8006458 <f_mkfs+0x40c>
 8006448:	230e      	movs	r3, #14
 800644a:	e225      	b.n	8006898 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800644c:	bf00      	nop
 800644e:	e6ce      	b.n	80061ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006450:	bf00      	nop
 8006452:	e6cc      	b.n	80061ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006454:	bf00      	nop
			pau = au;
 8006456:	e6ca      	b.n	80061ee <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8006458:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800645a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800645c:	461a      	mov	r2, r3
 800645e:	2100      	movs	r1, #0
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f7fd fadc 	bl	8003a1e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8006466:	220b      	movs	r2, #11
 8006468:	49b2      	ldr	r1, [pc, #712]	; (8006734 <f_mkfs+0x6e8>)
 800646a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800646c:	f7fd fab6 	bl	80039dc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	330b      	adds	r3, #11
 8006474:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7fd fa68 	bl	800394e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	330d      	adds	r3, #13
 8006482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	330e      	adds	r3, #14
 800648c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800648e:	b292      	uxth	r2, r2
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fd fa5b 	bl	800394e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	3310      	adds	r3, #16
 800649c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f103 0211 	add.w	r2, r3, #17
 80064a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d002      	beq.n	80064b6 <f_mkfs+0x46a>
 80064b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	e000      	b.n	80064b8 <f_mkfs+0x46c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fd fa47 	bl	800394e <st_word>
		if (sz_vol < 0x10000) {
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c6:	d208      	bcs.n	80064da <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	3313      	adds	r3, #19
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	b292      	uxth	r2, r2
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fd fa3b 	bl	800394e <st_word>
 80064d8:	e006      	b.n	80064e8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	3320      	adds	r3, #32
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fa4e 	bl	8003984 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	3315      	adds	r3, #21
 80064ec:	22f8      	movs	r2, #248	; 0xf8
 80064ee:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	3318      	adds	r3, #24
 80064f4:	213f      	movs	r1, #63	; 0x3f
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fd fa29 	bl	800394e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	331a      	adds	r3, #26
 8006500:	21ff      	movs	r1, #255	; 0xff
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd fa23 	bl	800394e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	331c      	adds	r3, #28
 800650c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f7fd fa38 	bl	8003984 <st_dword>
		if (fmt == FS_FAT32) {
 8006514:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006518:	2b03      	cmp	r3, #3
 800651a:	d131      	bne.n	8006580 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8006522:	f7fd f861 	bl	80035e8 <get_fattime>
 8006526:	4603      	mov	r3, r0
 8006528:	4619      	mov	r1, r3
 800652a:	4620      	mov	r0, r4
 800652c:	f7fd fa2a 	bl	8003984 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd fa24 	bl	8003984 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	332c      	adds	r3, #44	; 0x2c
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd fa1e 	bl	8003984 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	3330      	adds	r3, #48	; 0x30
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd f9fd 	bl	800394e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3332      	adds	r3, #50	; 0x32
 8006558:	2106      	movs	r1, #6
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd f9f7 	bl	800394e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	3340      	adds	r3, #64	; 0x40
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	3342      	adds	r3, #66	; 0x42
 800656c:	2229      	movs	r2, #41	; 0x29
 800656e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	3347      	adds	r3, #71	; 0x47
 8006574:	2213      	movs	r2, #19
 8006576:	4970      	ldr	r1, [pc, #448]	; (8006738 <f_mkfs+0x6ec>)
 8006578:	4618      	mov	r0, r3
 800657a:	f7fd fa2f 	bl	80039dc <mem_cpy>
 800657e:	e020      	b.n	80065c2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8006586:	f7fd f82f 	bl	80035e8 <get_fattime>
 800658a:	4603      	mov	r3, r0
 800658c:	4619      	mov	r1, r3
 800658e:	4620      	mov	r0, r4
 8006590:	f7fd f9f8 	bl	8003984 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	3316      	adds	r3, #22
 8006598:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800659a:	b292      	uxth	r2, r2
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fd f9d5 	bl	800394e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	3324      	adds	r3, #36	; 0x24
 80065a8:	2280      	movs	r2, #128	; 0x80
 80065aa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	3326      	adds	r3, #38	; 0x26
 80065b0:	2229      	movs	r2, #41	; 0x29
 80065b2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	332b      	adds	r3, #43	; 0x2b
 80065b8:	2213      	movs	r2, #19
 80065ba:	4960      	ldr	r1, [pc, #384]	; (800673c <f_mkfs+0x6f0>)
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fd fa0d 	bl	80039dc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fd f9be 	bl	800394e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80065d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80065d6:	2301      	movs	r3, #1
 80065d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065dc:	f7fd f93e 	bl	800385c <disk_write>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <f_mkfs+0x59e>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e156      	b.n	8006898 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80065ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d140      	bne.n	8006674 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1d9a      	adds	r2, r3, #6
 80065f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80065fa:	2301      	movs	r3, #1
 80065fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065fe:	f7fd f92d 	bl	800385c <disk_write>
			mem_set(buf, 0, ss);
 8006602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006604:	461a      	mov	r2, r3
 8006606:	2100      	movs	r1, #0
 8006608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660a:	f7fd fa08 	bl	8003a1e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800660e:	494c      	ldr	r1, [pc, #304]	; (8006740 <f_mkfs+0x6f4>)
 8006610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006612:	f7fd f9b7 	bl	8003984 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800661c:	4949      	ldr	r1, [pc, #292]	; (8006744 <f_mkfs+0x6f8>)
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd f9b0 	bl	8003984 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	3b01      	subs	r3, #1
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fd f9a7 	bl	8003984 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f7fd f9a0 	bl	8003984 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800664a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800664e:	4618      	mov	r0, r3
 8006650:	f7fd f97d 	bl	800394e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1dda      	adds	r2, r3, #7
 8006658:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800665c:	2301      	movs	r3, #1
 800665e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006660:	f7fd f8fc 	bl	800385c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800666c:	2301      	movs	r3, #1
 800666e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006670:	f7fd f8f4 	bl	800385c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8006674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006676:	2100      	movs	r1, #0
 8006678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800667a:	f7fd f9d0 	bl	8003a1e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800667e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006680:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006682:	2300      	movs	r3, #0
 8006684:	64bb      	str	r3, [r7, #72]	; 0x48
 8006686:	e04b      	b.n	8006720 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8006688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800668c:	2b03      	cmp	r3, #3
 800668e:	d113      	bne.n	80066b8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8006690:	f06f 0107 	mvn.w	r1, #7
 8006694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006696:	f7fd f975 	bl	8003984 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	3304      	adds	r3, #4
 800669e:	f04f 31ff 	mov.w	r1, #4294967295
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fd f96e 	bl	8003984 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	3308      	adds	r3, #8
 80066ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd f967 	bl	8003984 <st_dword>
 80066b6:	e00b      	b.n	80066d0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80066b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <f_mkfs+0x678>
 80066c0:	4b21      	ldr	r3, [pc, #132]	; (8006748 <f_mkfs+0x6fc>)
 80066c2:	e001      	b.n	80066c8 <f_mkfs+0x67c>
 80066c4:	f06f 0307 	mvn.w	r3, #7
 80066c8:	4619      	mov	r1, r3
 80066ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066cc:	f7fd f95a 	bl	8003984 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80066d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80066d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	4293      	cmp	r3, r2
 80066da:	bf28      	it	cs
 80066dc:	4613      	movcs	r3, r2
 80066de:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80066e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80066e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ea:	f7fd f8b7 	bl	800385c <disk_write>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <f_mkfs+0x6ac>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0cf      	b.n	8006898 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80066f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066fa:	461a      	mov	r2, r3
 80066fc:	2100      	movs	r1, #0
 80066fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006700:	f7fd f98d 	bl	8003a1e <mem_set>
				sect += n; nsect -= n;
 8006704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006708:	4413      	add	r3, r2
 800670a:	667b      	str	r3, [r7, #100]	; 0x64
 800670c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800670e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8006714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1dc      	bne.n	80066d4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800671a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671c:	3301      	adds	r3, #1
 800671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006724:	429a      	cmp	r2, r3
 8006726:	d3af      	bcc.n	8006688 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8006728:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800672c:	2b03      	cmp	r3, #3
 800672e:	d10d      	bne.n	800674c <f_mkfs+0x700>
 8006730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006732:	e00c      	b.n	800674e <f_mkfs+0x702>
 8006734:	0800b6d4 	.word	0x0800b6d4
 8006738:	0800b6e0 	.word	0x0800b6e0
 800673c:	0800b6f4 	.word	0x0800b6f4
 8006740:	41615252 	.word	0x41615252
 8006744:	61417272 	.word	0x61417272
 8006748:	00fffff8 	.word	0x00fffff8
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	4293      	cmp	r3, r2
 8006756:	bf28      	it	cs
 8006758:	4613      	movcs	r3, r2
 800675a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800675c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006762:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006766:	f7fd f879 	bl	800385c <disk_write>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <f_mkfs+0x728>
 8006770:	2301      	movs	r3, #1
 8006772:	e091      	b.n	8006898 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8006774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006778:	4413      	add	r3, r2
 800677a:	667b      	str	r3, [r7, #100]	; 0x64
 800677c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800677e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8006784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e2      	bne.n	8006750 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800678a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800678e:	2b03      	cmp	r3, #3
 8006790:	d103      	bne.n	800679a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8006792:	230c      	movs	r3, #12
 8006794:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006798:	e010      	b.n	80067bc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d303      	bcc.n	80067aa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80067a2:	2306      	movs	r3, #6
 80067a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80067a8:	e008      	b.n	80067bc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80067aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d101      	bne.n	80067b6 <f_mkfs+0x76a>
 80067b2:	2304      	movs	r3, #4
 80067b4:	e000      	b.n	80067b8 <f_mkfs+0x76c>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d15b      	bne.n	800687e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80067c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067c8:	461a      	mov	r2, r3
 80067ca:	2100      	movs	r1, #0
 80067cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ce:	f7fd f926 	bl	8003a1e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd f8b6 	bl	800394e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067e8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	3301      	adds	r3, #1
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	3302      	adds	r3, #2
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3303      	adds	r3, #3
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	3304      	adds	r3, #4
 800680c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006810:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	441a      	add	r2, r3
 8006818:	4b21      	ldr	r3, [pc, #132]	; (80068a0 <f_mkfs+0x854>)
 800681a:	fba3 1302 	umull	r1, r3, r3, r2
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	0852      	lsrs	r2, r2, #1
 8006822:	4413      	add	r3, r2
 8006824:	0b5b      	lsrs	r3, r3, #13
 8006826:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	3305      	adds	r3, #5
 800682c:	22fe      	movs	r2, #254	; 0xfe
 800682e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8006830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	b2da      	uxtb	r2, r3
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	3306      	adds	r3, #6
 800683a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3307      	adds	r3, #7
 8006846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	3308      	adds	r3, #8
 8006850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd f896 	bl	8003984 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	330c      	adds	r3, #12
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd f88f 	bl	8003984 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006866:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800686a:	2301      	movs	r3, #1
 800686c:	2200      	movs	r2, #0
 800686e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006870:	f7fc fff4 	bl	800385c <disk_write>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <f_mkfs+0x832>
 800687a:	2301      	movs	r3, #1
 800687c:	e00c      	b.n	8006898 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800687e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006882:	2200      	movs	r2, #0
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7fd f808 	bl	800389c <disk_ioctl>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <f_mkfs+0x84a>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <f_mkfs+0x84c>

	return FR_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3774      	adds	r7, #116	; 0x74
 800689c:	46bd      	mov	sp, r7
 800689e:	bd90      	pop	{r4, r7, pc}
 80068a0:	0515565b 	.word	0x0515565b

080068a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068ba:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068bc:	7a5b      	ldrb	r3, [r3, #9]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d131      	bne.n	8006928 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068c4:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068c6:	7a5b      	ldrb	r3, [r3, #9]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068ce:	2100      	movs	r1, #0
 80068d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068d2:	4b19      	ldr	r3, [pc, #100]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	4a17      	ldr	r2, [pc, #92]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068e4:	7a5b      	ldrb	r3, [r3, #9]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068ec:	4413      	add	r3, r2
 80068ee:	79fa      	ldrb	r2, [r7, #7]
 80068f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068f4:	7a5b      	ldrb	r3, [r3, #9]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	b2d1      	uxtb	r1, r2
 80068fc:	4a0e      	ldr	r2, [pc, #56]	; (8006938 <FATFS_LinkDriverEx+0x94>)
 80068fe:	7251      	strb	r1, [r2, #9]
 8006900:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006902:	7dbb      	ldrb	r3, [r7, #22]
 8006904:	3330      	adds	r3, #48	; 0x30
 8006906:	b2da      	uxtb	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	3301      	adds	r3, #1
 8006910:	223a      	movs	r2, #58	; 0x3a
 8006912:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3302      	adds	r3, #2
 8006918:	222f      	movs	r2, #47	; 0x2f
 800691a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	3303      	adds	r3, #3
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20014f68 	.word	0x20014f68

0800693c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006946:	2200      	movs	r2, #0
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ffaa 	bl	80068a4 <FATFS_LinkDriverEx>
 8006950:	4603      	mov	r3, r0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	4603      	mov	r3, r0
 8006962:	6039      	str	r1, [r7, #0]
 8006964:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 8006966:	2000      	movs	r0, #0
 8006968:	f000 f977 	bl	8006c5a <osMutexNew>
 800696c:	4602      	mov	r2, r0
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	60fb      	str	r3, [r7, #12]

    return ret;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa6e 	bl	8006e76 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800699a:	2301      	movs	r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 80069b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9d6 	bl	8006d66 <osMutexAcquire>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80069c0:	2301      	movs	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa10 	bl	8006dfc <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <__NVIC_SetPriority>:
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	6039      	str	r1, [r7, #0]
 80069ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db0a      	blt.n	8006a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	490c      	ldr	r1, [pc, #48]	; (8006a30 <__NVIC_SetPriority+0x4c>)
 80069fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a02:	0112      	lsls	r2, r2, #4
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	440b      	add	r3, r1
 8006a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a0c:	e00a      	b.n	8006a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	4908      	ldr	r1, [pc, #32]	; (8006a34 <__NVIC_SetPriority+0x50>)
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	0112      	lsls	r2, r2, #4
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	440b      	add	r3, r1
 8006a22:	761a      	strb	r2, [r3, #24]
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	e000e100 	.word	0xe000e100
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <SysTick_Handler+0x1c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a40:	f002 fb62 	bl	8009108 <xTaskGetSchedulerState>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d001      	beq.n	8006a4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a4a:	f003 fa45 	bl	8009ed8 <xPortSysTickHandler>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	e000e010 	.word	0xe000e010

08006a58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f06f 0004 	mvn.w	r0, #4
 8006a62:	f7ff ffbf 	bl	80069e4 <__NVIC_SetPriority>
#endif
}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	603b      	str	r3, [r7, #0]
  return(result);
 8006a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a7e:	f06f 0305 	mvn.w	r3, #5
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	e00c      	b.n	8006aa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <osKernelInitialize+0x44>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a8e:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <osKernelInitialize+0x44>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e002      	b.n	8006aa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20014f74 	.word	0x20014f74

08006ab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aba:	f3ef 8305 	mrs	r3, IPSR
 8006abe:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ac6:	f06f 0305 	mvn.w	r3, #5
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	e010      	b.n	8006af0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <osKernelStart+0x48>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d109      	bne.n	8006aea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ad6:	f7ff ffbf 	bl	8006a58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <osKernelStart+0x48>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ae0:	f001 fea6 	bl	8008830 <vTaskStartScheduler>
      stat = osOK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	e002      	b.n	8006af0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006af0:	687b      	ldr	r3, [r7, #4]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20014f74 	.word	0x20014f74

08006b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b10:	f3ef 8305 	mrs	r3, IPSR
 8006b14:	617b      	str	r3, [r7, #20]
  return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d17e      	bne.n	8006c1a <osThreadNew+0x11a>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d07b      	beq.n	8006c1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b26:	2318      	movs	r3, #24
 8006b28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d045      	beq.n	8006bc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <osThreadNew+0x48>
        name = attr->name;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <osThreadNew+0x6e>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b38      	cmp	r3, #56	; 0x38
 8006b60:	d805      	bhi.n	8006b6e <osThreadNew+0x6e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <osThreadNew+0x72>
        return (NULL);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e054      	b.n	8006c1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	089b      	lsrs	r3, r3, #2
 8006b80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <osThreadNew+0xa8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2ba7      	cmp	r3, #167	; 0xa7
 8006b90:	d90a      	bls.n	8006ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <osThreadNew+0xa8>
        mem = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e010      	b.n	8006bca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <osThreadNew+0xca>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <osThreadNew+0xca>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <osThreadNew+0xca>
          mem = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e001      	b.n	8006bca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6a3a      	ldr	r2, [r7, #32]
 8006be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 fc36 	bl	8008458 <xTaskCreateStatic>
 8006bec:	4603      	mov	r3, r0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	e013      	b.n	8006c1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d110      	bne.n	8006c1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f107 0310 	add.w	r3, r7, #16
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 fc81 	bl	8008512 <xTaskCreate>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <osThreadNew+0x11a>
            hTask = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c1a:	693b      	ldr	r3, [r7, #16]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	; 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c2c:	f3ef 8305 	mrs	r3, IPSR
 8006c30:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <osDelay+0x1c>
    stat = osErrorISR;
 8006c38:	f06f 0305 	mvn.w	r3, #5
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e007      	b.n	8006c50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fdbc 	bl	80087c8 <vTaskDelay>
    }
  }

  return (stat);
 8006c50:	68fb      	ldr	r3, [r7, #12]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b088      	sub	sp, #32
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c66:	f3ef 8305 	mrs	r3, IPSR
 8006c6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c6c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d174      	bne.n	8006d5c <osMutexNew+0x102>
    if (attr != NULL) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e001      	b.n	8006c84 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <osMutexNew+0x3a>
      rmtx = 1U;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	e001      	b.n	8006c98 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d15c      	bne.n	8006d5c <osMutexNew+0x102>
      mem = -1;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d015      	beq.n	8006cda <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <osMutexNew+0x6a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b4f      	cmp	r3, #79	; 0x4f
 8006cbc:	d902      	bls.n	8006cc4 <osMutexNew+0x6a>
          mem = 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e00c      	b.n	8006cde <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d108      	bne.n	8006cde <osMutexNew+0x84>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <osMutexNew+0x84>
            mem = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e001      	b.n	8006cde <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d112      	bne.n	8006d0a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	2004      	movs	r0, #4
 8006cf2:	f000 fc5c 	bl	80075ae <xQueueCreateMutexStatic>
 8006cf6:	61f8      	str	r0, [r7, #28]
 8006cf8:	e016      	b.n	8006d28 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	2001      	movs	r0, #1
 8006d02:	f000 fc54 	bl	80075ae <xQueueCreateMutexStatic>
 8006d06:	61f8      	str	r0, [r7, #28]
 8006d08:	e00e      	b.n	8006d28 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006d16:	2004      	movs	r0, #4
 8006d18:	f000 fc31 	bl	800757e <xQueueCreateMutex>
 8006d1c:	61f8      	str	r0, [r7, #28]
 8006d1e:	e003      	b.n	8006d28 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006d20:	2001      	movs	r0, #1
 8006d22:	f000 fc2c 	bl	800757e <xQueueCreateMutex>
 8006d26:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <osMutexNew+0xee>
        if (attr != NULL) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <osMutexNew+0xe2>
          name = attr->name;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e001      	b.n	8006d40 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006d40:	68f9      	ldr	r1, [r7, #12]
 8006d42:	69f8      	ldr	r0, [r7, #28]
 8006d44:	f001 fb00 	bl	8008348 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <osMutexNew+0x102>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d84:	f3ef 8305 	mrs	r3, IPSR
 8006d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d8a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006d90:	f06f 0305 	mvn.w	r3, #5
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e02c      	b.n	8006df2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006d9e:	f06f 0303 	mvn.w	r3, #3
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e025      	b.n	8006df2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d011      	beq.n	8006dd0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6938      	ldr	r0, [r7, #16]
 8006db0:	f000 fc4c 	bl	800764c <xQueueTakeMutexRecursive>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d01b      	beq.n	8006df2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006dc0:	f06f 0301 	mvn.w	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e014      	b.n	8006df2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006dc8:	f06f 0302 	mvn.w	r3, #2
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e010      	b.n	8006df2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6938      	ldr	r0, [r7, #16]
 8006dd4:	f000 ffe0 	bl	8007d98 <xQueueSemaphoreTake>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d009      	beq.n	8006df2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006de4:	f06f 0301 	mvn.w	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e002      	b.n	8006df2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006dec:	f06f 0302 	mvn.w	r3, #2
 8006df0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006df2:	697b      	ldr	r3, [r7, #20]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e18:	f3ef 8305 	mrs	r3, IPSR
 8006e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e1e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006e24:	f06f 0305 	mvn.w	r3, #5
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e01f      	b.n	8006e6c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006e32:	f06f 0303 	mvn.w	r3, #3
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e018      	b.n	8006e6c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f000 fbcf 	bl	80075e4 <xQueueGiveMutexRecursive>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d00f      	beq.n	8006e6c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e4c:	f06f 0302 	mvn.w	r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	e00b      	b.n	8006e6c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006e54:	2300      	movs	r3, #0
 8006e56:	2200      	movs	r2, #0
 8006e58:	2100      	movs	r1, #0
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f000 fc96 	bl	800778c <xQueueGenericSend>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d002      	beq.n	8006e6c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e66:	f06f 0302 	mvn.w	r3, #2
 8006e6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b086      	sub	sp, #24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e86:	f3ef 8305 	mrs	r3, IPSR
 8006e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e8c:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <osMutexDelete+0x24>
    stat = osErrorISR;
 8006e92:	f06f 0305 	mvn.w	r3, #5
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e00e      	b.n	8006eb8 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d103      	bne.n	8006ea8 <osMutexDelete+0x32>
    stat = osErrorParameter;
 8006ea0:	f06f 0303 	mvn.w	r3, #3
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	e007      	b.n	8006eb8 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 8006ea8:	6938      	ldr	r0, [r7, #16]
 8006eaa:	f001 fa77 	bl	800839c <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f001 f8fc 	bl	80080b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006eb8:	697b      	ldr	r3, [r7, #20]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b08a      	sub	sp, #40	; 0x28
 8006ec6:	af02      	add	r7, sp, #8
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed2:	f3ef 8305 	mrs	r3, IPSR
 8006ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ed8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d175      	bne.n	8006fca <osSemaphoreNew+0x108>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d072      	beq.n	8006fca <osSemaphoreNew+0x108>
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d86e      	bhi.n	8006fca <osSemaphoreNew+0x108>
    mem = -1;
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d006      	beq.n	8006f0e <osSemaphoreNew+0x4c>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	2b4f      	cmp	r3, #79	; 0x4f
 8006f06:	d902      	bls.n	8006f0e <osSemaphoreNew+0x4c>
        mem = 1;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	e00c      	b.n	8006f28 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d108      	bne.n	8006f28 <osSemaphoreNew+0x66>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <osSemaphoreNew+0x66>
          mem = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e001      	b.n	8006f28 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d04c      	beq.n	8006fca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d128      	bne.n	8006f88 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10a      	bne.n	8006f52 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2203      	movs	r2, #3
 8006f42:	9200      	str	r2, [sp, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2100      	movs	r1, #0
 8006f48:	2001      	movs	r0, #1
 8006f4a:	f000 fa29 	bl	80073a0 <xQueueGenericCreateStatic>
 8006f4e:	61f8      	str	r0, [r7, #28]
 8006f50:	e005      	b.n	8006f5e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006f52:	2203      	movs	r2, #3
 8006f54:	2100      	movs	r1, #0
 8006f56:	2001      	movs	r0, #1
 8006f58:	f000 fa9a 	bl	8007490 <xQueueGenericCreate>
 8006f5c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <osSemaphoreNew+0xe8>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d01f      	beq.n	8006faa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	69f8      	ldr	r0, [r7, #28]
 8006f72:	f000 fc0b 	bl	800778c <xQueueGenericSend>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d016      	beq.n	8006faa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006f7c:	69f8      	ldr	r0, [r7, #28]
 8006f7e:	f001 f897 	bl	80080b0 <vQueueDelete>
            hSemaphore = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	e010      	b.n	8006faa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d108      	bne.n	8006fa0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	461a      	mov	r2, r3
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fb8e 	bl	80076b8 <xQueueCreateCountingSemaphoreStatic>
 8006f9c:	61f8      	str	r0, [r7, #28]
 8006f9e:	e004      	b.n	8006faa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fbbf 	bl	8007726 <xQueueCreateCountingSemaphore>
 8006fa8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00c      	beq.n	8006fca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <osSemaphoreNew+0xfc>
          name = attr->name;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e001      	b.n	8006fc2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	69f8      	ldr	r0, [r7, #28]
 8006fc6:	f001 f9bf 	bl	8008348 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006fca:	69fb      	ldr	r3, [r7, #28]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3720      	adds	r7, #32
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006fec:	f06f 0303 	mvn.w	r3, #3
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e039      	b.n	8007068 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff4:	f3ef 8305 	mrs	r3, IPSR
 8006ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d022      	beq.n	8007046 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007006:	f06f 0303 	mvn.w	r3, #3
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e02c      	b.n	8007068 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007012:	f107 0308 	add.w	r3, r7, #8
 8007016:	461a      	mov	r2, r3
 8007018:	2100      	movs	r1, #0
 800701a:	6938      	ldr	r0, [r7, #16]
 800701c:	f000 ffc8 	bl	8007fb0 <xQueueReceiveFromISR>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d003      	beq.n	800702e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007026:	f06f 0302 	mvn.w	r3, #2
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e01c      	b.n	8007068 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d019      	beq.n	8007068 <osSemaphoreAcquire+0x94>
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <osSemaphoreAcquire+0xa0>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	e010      	b.n	8007068 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6938      	ldr	r0, [r7, #16]
 800704a:	f000 fea5 	bl	8007d98 <xQueueSemaphoreTake>
 800704e:	4603      	mov	r3, r0
 8007050:	2b01      	cmp	r3, #1
 8007052:	d009      	beq.n	8007068 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800705a:	f06f 0301 	mvn.w	r3, #1
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e002      	b.n	8007068 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007062:	f06f 0302 	mvn.w	r3, #2
 8007066:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007068:	697b      	ldr	r3, [r7, #20]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007084:	2300      	movs	r3, #0
 8007086:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800708e:	f06f 0303 	mvn.w	r3, #3
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e02c      	b.n	80070f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007096:	f3ef 8305 	mrs	r3, IPSR
 800709a:	60fb      	str	r3, [r7, #12]
  return(result);
 800709c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01a      	beq.n	80070d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4619      	mov	r1, r3
 80070ac:	6938      	ldr	r0, [r7, #16]
 80070ae:	f000 fd06 	bl	8007abe <xQueueGiveFromISR>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d003      	beq.n	80070c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80070b8:	f06f 0302 	mvn.w	r3, #2
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e017      	b.n	80070f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d014      	beq.n	80070f0 <osSemaphoreRelease+0x78>
 80070c6:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <osSemaphoreRelease+0x84>)
 80070c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	e00b      	b.n	80070f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	6938      	ldr	r0, [r7, #16]
 80070e0:	f000 fb54 	bl	800778c <xQueueGenericSend>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d002      	beq.n	80070f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80070ea:	f06f 0302 	mvn.w	r3, #2
 80070ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80070f0:	697b      	ldr	r3, [r7, #20]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4a07      	ldr	r2, [pc, #28]	; (800712c <vApplicationGetIdleTaskMemory+0x2c>)
 8007110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a06      	ldr	r2, [pc, #24]	; (8007130 <vApplicationGetIdleTaskMemory+0x30>)
 8007116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2280      	movs	r2, #128	; 0x80
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20014f78 	.word	0x20014f78
 8007130:	20015020 	.word	0x20015020

08007134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a07      	ldr	r2, [pc, #28]	; (8007160 <vApplicationGetTimerTaskMemory+0x2c>)
 8007144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a06      	ldr	r2, [pc, #24]	; (8007164 <vApplicationGetTimerTaskMemory+0x30>)
 800714a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20015220 	.word	0x20015220
 8007164:	200152c8 	.word	0x200152c8

08007168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0208 	add.w	r2, r3, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f04f 32ff 	mov.w	r2, #4294967295
 8007180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f103 0208 	add.w	r2, r3, #8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f103 0208 	add.w	r2, r3, #8
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d103      	bne.n	800722a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e00c      	b.n	8007244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3308      	adds	r3, #8
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e002      	b.n	8007238 <vListInsert+0x2e>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	d2f6      	bcs.n	8007232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6892      	ldr	r2, [r2, #8]
 8007292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6852      	ldr	r2, [r2, #4]
 800729c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d103      	bne.n	80072b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	1e5a      	subs	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072fa:	f002 fd5b 	bl	8009db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	441a      	add	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	3b01      	subs	r3, #1
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	441a      	add	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d114      	bne.n	800737a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01a      	beq.n	800738e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3310      	adds	r3, #16
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fd01 	bl	8008d64 <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d012      	beq.n	800738e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <xQueueGenericReset+0xcc>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	e009      	b.n	800738e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3310      	adds	r3, #16
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fef2 	bl	8007168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3324      	adds	r3, #36	; 0x24
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff feed 	bl	8007168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800738e:	f002 fd41 	bl	8009e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007392:	2301      	movs	r3, #1
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08e      	sub	sp, #56	; 0x38
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <xQueueGenericCreateStatic+0x52>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <xQueueGenericCreateStatic+0x56>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericCreateStatic+0x58>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	623b      	str	r3, [r7, #32]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <xQueueGenericCreateStatic+0x7e>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <xQueueGenericCreateStatic+0x82>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueGenericCreateStatic+0x84>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	61fb      	str	r3, [r7, #28]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800743e:	2350      	movs	r3, #80	; 0x50
 8007440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b50      	cmp	r3, #80	; 0x50
 8007446:	d00a      	beq.n	800745e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61bb      	str	r3, [r7, #24]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800745e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007472:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f83f 	bl	8007504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007488:	4618      	mov	r0, r3
 800748a:	3730      	adds	r7, #48	; 0x30
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10a      	bne.n	80074ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	613b      	str	r3, [r7, #16]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	fb02 f303 	mul.w	r3, r2, r3
 80074c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3350      	adds	r3, #80	; 0x50
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 fd95 	bl	8009ff8 <pvPortMalloc>
 80074ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d011      	beq.n	80074fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3350      	adds	r3, #80	; 0x50
 80074de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f805 	bl	8007504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074fa:	69bb      	ldr	r3, [r7, #24]
	}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e002      	b.n	8007526 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007532:	2101      	movs	r1, #1
 8007534:	69b8      	ldr	r0, [r7, #24]
 8007536:	f7ff fecb 	bl	80072d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800756a:	2300      	movs	r3, #0
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f90b 	bl	800778c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	4603      	mov	r3, r0
 8007586:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007588:	2301      	movs	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	461a      	mov	r2, r3
 8007594:	6939      	ldr	r1, [r7, #16]
 8007596:	6978      	ldr	r0, [r7, #20]
 8007598:	f7ff ff7a 	bl	8007490 <xQueueGenericCreate>
 800759c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff ffd3 	bl	800754a <prvInitialiseMutex>

		return xNewQueue;
 80075a4:	68fb      	ldr	r3, [r7, #12]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af02      	add	r7, sp, #8
 80075b4:	4603      	mov	r3, r0
 80075b6:	6039      	str	r1, [r7, #0]
 80075b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2200      	movs	r2, #0
 80075ca:	6939      	ldr	r1, [r7, #16]
 80075cc:	6978      	ldr	r0, [r7, #20]
 80075ce:	f7ff fee7 	bl	80073a0 <xQueueGenericCreateStatic>
 80075d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff ffb8 	bl	800754a <prvInitialiseMutex>

		return xNewQueue;
 80075da:	68fb      	ldr	r3, [r7, #12]
	}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60fb      	str	r3, [r7, #12]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	689c      	ldr	r4, [r3, #8]
 8007610:	f001 fd6a 	bl	80090e8 <xTaskGetCurrentTaskHandle>
 8007614:	4603      	mov	r3, r0
 8007616:	429c      	cmp	r4, r3
 8007618:	d111      	bne.n	800763e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	1e5a      	subs	r2, r3, #1
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	6938      	ldr	r0, [r7, #16]
 8007634:	f000 f8aa 	bl	800778c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007638:	2301      	movs	r3, #1
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e001      	b.n	8007642 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007642:	697b      	ldr	r3, [r7, #20]
	}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd90      	pop	{r4, r7, pc}

0800764c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	689c      	ldr	r4, [r3, #8]
 800767a:	f001 fd35 	bl	80090e8 <xTaskGetCurrentTaskHandle>
 800767e:	4603      	mov	r3, r0
 8007680:	429c      	cmp	r4, r3
 8007682:	d107      	bne.n	8007694 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800768e:	2301      	movs	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	e00c      	b.n	80076ae <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6938      	ldr	r0, [r7, #16]
 8007698:	f000 fb7e 	bl	8007d98 <xQueueSemaphoreTake>
 800769c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80076ae:	697b      	ldr	r3, [r7, #20]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61bb      	str	r3, [r7, #24]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d90a      	bls.n	80076fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	617b      	str	r3, [r7, #20]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076fe:	2302      	movs	r3, #2
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff fe49 	bl	80073a0 <xQueueGenericCreateStatic>
 800770e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800771c:	69fb      	ldr	r3, [r7, #28]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	613b      	str	r3, [r7, #16]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90a      	bls.n	800776a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60fb      	str	r3, [r7, #12]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800776a:	2202      	movs	r2, #2
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fe8e 	bl	8007490 <xQueueGenericCreate>
 8007774:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007782:	697b      	ldr	r3, [r7, #20]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	; 0x38
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800779a:	2300      	movs	r3, #0
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xQueueGenericSend+0x32>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <xQueueGenericSend+0x40>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <xQueueGenericSend+0x44>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <xQueueGenericSend+0x46>
 80077d0:	2300      	movs	r3, #0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <xQueueGenericSend+0x60>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d103      	bne.n	80077fa <xQueueGenericSend+0x6e>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <xQueueGenericSend+0x72>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <xQueueGenericSend+0x74>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <xQueueGenericSend+0x8e>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	623b      	str	r3, [r7, #32]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800781a:	f001 fc75 	bl	8009108 <xTaskGetSchedulerState>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <xQueueGenericSend+0x9e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <xQueueGenericSend+0xa2>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericSend+0xa4>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericSend+0xbe>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	61fb      	str	r3, [r7, #28]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800784a:	f002 fab3 	bl	8009db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <xQueueGenericSend+0xd4>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d129      	bne.n	80078b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007866:	f000 fc5e 	bl	8008126 <prvCopyDataToQueue>
 800786a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	3324      	adds	r3, #36	; 0x24
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fa73 	bl	8008d64 <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d013      	beq.n	80078ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b3f      	ldr	r3, [pc, #252]	; (8007984 <xQueueGenericSend+0x1f8>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	e00a      	b.n	80078ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800789c:	4b39      	ldr	r3, [pc, #228]	; (8007984 <xQueueGenericSend+0x1f8>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078ac:	f002 fab2 	bl	8009e14 <vPortExitCritical>
				return pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e063      	b.n	800797c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ba:	f002 faab 	bl	8009e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	e05c      	b.n	800797c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 faad 	bl	8008e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078d6:	f002 fa9d 	bl	8009e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078da:	f001 f819 	bl	8008910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078de:	f002 fa69 	bl	8009db4 <vPortEnterCritical>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d103      	bne.n	80078f8 <xQueueGenericSend+0x16c>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <xQueueGenericSend+0x182>
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800790e:	f002 fa81 	bl	8009e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007912:	1d3a      	adds	r2, r7, #4
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fa9c 	bl	8008e58 <xTaskCheckForTimeOut>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d124      	bne.n	8007970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007928:	f000 fcf5 	bl	8008316 <prvIsQueueFull>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d018      	beq.n	8007964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	3310      	adds	r3, #16
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f9c2 	bl	8008cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007942:	f000 fc80 	bl	8008246 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007946:	f000 fff1 	bl	800892c <xTaskResumeAll>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	f47f af7c 	bne.w	800784a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <xQueueGenericSend+0x1f8>)
 8007954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	e772      	b.n	800784a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007966:	f000 fc6e 	bl	8008246 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800796a:	f000 ffdf 	bl	800892c <xTaskResumeAll>
 800796e:	e76c      	b.n	800784a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007972:	f000 fc68 	bl	8008246 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007976:	f000 ffd9 	bl	800892c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800797a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800797c:	4618      	mov	r0, r3
 800797e:	3738      	adds	r7, #56	; 0x38
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b090      	sub	sp, #64	; 0x40
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <xQueueGenericSendFromISR+0x3c>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <xQueueGenericSendFromISR+0x40>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <xQueueGenericSendFromISR+0x42>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d103      	bne.n	80079f2 <xQueueGenericSendFromISR+0x6a>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <xQueueGenericSendFromISR+0x6e>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <xQueueGenericSendFromISR+0x70>
 80079f6:	2300      	movs	r3, #0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	623b      	str	r3, [r7, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a12:	f002 fab1 	bl	8009f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a16:	f3ef 8211 	mrs	r2, BASEPRI
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	61fa      	str	r2, [r7, #28]
 8007a2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d302      	bcc.n	8007a44 <xQueueGenericSendFromISR+0xbc>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d12f      	bne.n	8007aa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a5a:	f000 fb64 	bl	8008126 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d112      	bne.n	8007a8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d016      	beq.n	8007a9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 f975 	bl	8008d64 <xTaskRemoveFromEventList>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e007      	b.n	8007a9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a92:	3301      	adds	r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	b25a      	sxtb	r2, r3
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007aa2:	e001      	b.n	8007aa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ab2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3740      	adds	r7, #64	; 0x40
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b08e      	sub	sp, #56	; 0x38
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	623b      	str	r3, [r7, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61fb      	str	r3, [r7, #28]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <xQueueGiveFromISR+0x58>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <xQueueGiveFromISR+0x5c>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <xQueueGiveFromISR+0x5e>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	61bb      	str	r3, [r7, #24]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b36:	f002 fa1f 	bl	8009f78 <vPortValidateInterruptPriority>
	__asm volatile
 8007b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	617a      	str	r2, [r7, #20]
 8007b50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d22b      	bcs.n	8007bbe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d112      	bne.n	8007ba8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d016      	beq.n	8007bb8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	3324      	adds	r3, #36	; 0x24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 f8e8 	bl	8008d64 <xTaskRemoveFromEventList>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00e      	beq.n	8007bb8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e007      	b.n	8007bb8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bac:	3301      	adds	r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	b25a      	sxtb	r2, r3
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbc:	e001      	b.n	8007bc2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f383 8811 	msr	BASEPRI, r3
}
 8007bcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3738      	adds	r7, #56	; 0x38
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08c      	sub	sp, #48	; 0x30
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xQueueReceive+0x30>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	623b      	str	r3, [r7, #32]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <xQueueReceive+0x3e>
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <xQueueReceive+0x42>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueReceive+0x44>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xQueueReceive+0x5e>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61fb      	str	r3, [r7, #28]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c36:	f001 fa67 	bl	8009108 <xTaskGetSchedulerState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <xQueueReceive+0x6e>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <xQueueReceive+0x72>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <xQueueReceive+0x74>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <xQueueReceive+0x8e>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	61bb      	str	r3, [r7, #24]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c66:	f002 f8a5 	bl	8009db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01f      	beq.n	8007cb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7a:	f000 fabe 	bl	80081fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	1e5a      	subs	r2, r3, #1
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00f      	beq.n	8007cae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	3310      	adds	r3, #16
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 f866 	bl	8008d64 <xTaskRemoveFromEventList>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c9e:	4b3d      	ldr	r3, [pc, #244]	; (8007d94 <xQueueReceive+0x1bc>)
 8007ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cae:	f002 f8b1 	bl	8009e14 <vPortExitCritical>
				return pdPASS;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e069      	b.n	8007d8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cbc:	f002 f8aa 	bl	8009e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e062      	b.n	8007d8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d106      	bne.n	8007cd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cca:	f107 0310 	add.w	r3, r7, #16
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f8ac 	bl	8008e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cd8:	f002 f89c 	bl	8009e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cdc:	f000 fe18 	bl	8008910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ce0:	f002 f868 	bl	8009db4 <vPortEnterCritical>
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d103      	bne.n	8007cfa <xQueueReceive+0x122>
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d103      	bne.n	8007d10 <xQueueReceive+0x138>
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d10:	f002 f880 	bl	8009e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d14:	1d3a      	adds	r2, r7, #4
 8007d16:	f107 0310 	add.w	r3, r7, #16
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f89b 	bl	8008e58 <xTaskCheckForTimeOut>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d123      	bne.n	8007d70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2a:	f000 fade 	bl	80082ea <prvIsQueueEmpty>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	3324      	adds	r3, #36	; 0x24
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 ffc1 	bl	8008cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f000 fa7f 	bl	8008246 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d48:	f000 fdf0 	bl	800892c <xTaskResumeAll>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d189      	bne.n	8007c66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <xQueueReceive+0x1bc>)
 8007d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	e780      	b.n	8007c66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d66:	f000 fa6e 	bl	8008246 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d6a:	f000 fddf 	bl	800892c <xTaskResumeAll>
 8007d6e:	e77a      	b.n	8007c66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d72:	f000 fa68 	bl	8008246 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d76:	f000 fdd9 	bl	800892c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7c:	f000 fab5 	bl	80082ea <prvIsQueueEmpty>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f43f af6f 	beq.w	8007c66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3730      	adds	r7, #48	; 0x30
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	623b      	str	r3, [r7, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007de8:	f001 f98e 	bl	8009108 <xTaskGetSchedulerState>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <xQueueSemaphoreTake+0x60>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <xQueueSemaphoreTake+0x64>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <xQueueSemaphoreTake+0x66>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	61bb      	str	r3, [r7, #24]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e18:	f001 ffcc 	bl	8009db4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d024      	beq.n	8007e72 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	1e5a      	subs	r2, r3, #1
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e38:	f001 fadc 	bl	80093f4 <pvTaskIncrementMutexHeldCount>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00f      	beq.n	8007e6a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	3310      	adds	r3, #16
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 ff88 	bl	8008d64 <xTaskRemoveFromEventList>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e5a:	4b54      	ldr	r3, [pc, #336]	; (8007fac <xQueueSemaphoreTake+0x214>)
 8007e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e6a:	f001 ffd3 	bl	8009e14 <vPortExitCritical>
				return pdPASS;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e097      	b.n	8007fa2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d111      	bne.n	8007e9c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	617b      	str	r3, [r7, #20]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e94:	f001 ffbe 	bl	8009e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e082      	b.n	8007fa2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 ffc0 	bl	8008e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb0:	f001 ffb0 	bl	8009e14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eb4:	f000 fd2c 	bl	8008910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eb8:	f001 ff7c 	bl	8009db4 <vPortEnterCritical>
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <xQueueSemaphoreTake+0x13a>
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <xQueueSemaphoreTake+0x150>
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee8:	f001 ff94 	bl	8009e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eec:	463a      	mov	r2, r7
 8007eee:	f107 030c 	add.w	r3, r7, #12
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 ffaf 	bl	8008e58 <xTaskCheckForTimeOut>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d132      	bne.n	8007f66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f02:	f000 f9f2 	bl	80082ea <prvIsQueueEmpty>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d026      	beq.n	8007f5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d109      	bne.n	8007f28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f14:	f001 ff4e 	bl	8009db4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f911 	bl	8009144 <xTaskPriorityInherit>
 8007f22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f24:	f001 ff76 	bl	8009e14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	3324      	adds	r3, #36	; 0x24
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fec7 	bl	8008cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f38:	f000 f985 	bl	8008246 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f3c:	f000 fcf6 	bl	800892c <xTaskResumeAll>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f47f af68 	bne.w	8007e18 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007f48:	4b18      	ldr	r3, [pc, #96]	; (8007fac <xQueueSemaphoreTake+0x214>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	e75e      	b.n	8007e18 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f5c:	f000 f973 	bl	8008246 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f60:	f000 fce4 	bl	800892c <xTaskResumeAll>
 8007f64:	e758      	b.n	8007e18 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f68:	f000 f96d 	bl	8008246 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f6c:	f000 fcde 	bl	800892c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f72:	f000 f9ba 	bl	80082ea <prvIsQueueEmpty>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f af4d 	beq.w	8007e18 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007f84:	f001 ff16 	bl	8009db4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f8a:	f000 f8b4 	bl	80080f6 <prvGetDisinheritPriorityAfterTimeout>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f9aa 	bl	80092f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f9c:	f001 ff3a 	bl	8009e14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3738      	adds	r7, #56	; 0x38
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08e      	sub	sp, #56	; 0x38
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	623b      	str	r3, [r7, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <xQueueReceiveFromISR+0x3a>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <xQueueReceiveFromISR+0x3e>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <xQueueReceiveFromISR+0x40>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	61fb      	str	r3, [r7, #28]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800800a:	f001 ffb5 	bl	8009f78 <vPortValidateInterruptPriority>
	__asm volatile
 800800e:	f3ef 8211 	mrs	r2, BASEPRI
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	61ba      	str	r2, [r7, #24]
 8008024:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008026:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02f      	beq.n	8008096 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800803c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008044:	f000 f8d9 	bl	80081fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	1e5a      	subs	r2, r3, #1
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d112      	bne.n	8008080 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d016      	beq.n	8008090 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	3310      	adds	r3, #16
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fe7c 	bl	8008d64 <xTaskRemoveFromEventList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00e      	beq.n	8008090 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e007      	b.n	8008090 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008084:	3301      	adds	r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	b25a      	sxtb	r2, r3
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008090:	2301      	movs	r3, #1
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	e001      	b.n	800809a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008096:	2300      	movs	r3, #0
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f383 8811 	msr	BASEPRI, r3
}
 80080a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3738      	adds	r7, #56	; 0x38
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <vQueueDelete+0x28>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f95f 	bl	800839c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f002 f851 	bl	800a190 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e001      	b.n	8008118 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008118:	68fb      	ldr	r3, [r7, #12]
	}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10d      	bne.n	8008160 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d14d      	bne.n	80081e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f85f 	bl	8009214 <xTaskPriorityDisinherit>
 8008156:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	e043      	b.n	80081e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d119      	bne.n	800819a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6858      	ldr	r0, [r3, #4]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	461a      	mov	r2, r3
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	f002 fc04 	bl	800a97e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	441a      	add	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	429a      	cmp	r2, r3
 800818e:	d32b      	bcc.n	80081e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	e026      	b.n	80081e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68d8      	ldr	r0, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	461a      	mov	r2, r3
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	f002 fbea 	bl	800a97e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	425b      	negs	r3, r3
 80081b4:	441a      	add	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d207      	bcs.n	80081d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	425b      	negs	r3, r3
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d105      	bne.n	80081e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081f0:	697b      	ldr	r3, [r7, #20]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d018      	beq.n	800823e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	441a      	add	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	d303      	bcc.n	800822e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68d9      	ldr	r1, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	461a      	mov	r2, r3
 8008238:	6838      	ldr	r0, [r7, #0]
 800823a:	f002 fba0 	bl	800a97e <memcpy>
	}
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800824e:	f001 fdb1 	bl	8009db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008258:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800825a:	e011      	b.n	8008280 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d012      	beq.n	800828a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3324      	adds	r3, #36	; 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fd7b 	bl	8008d64 <xTaskRemoveFromEventList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008274:	f000 fe52 	bl	8008f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	3b01      	subs	r3, #1
 800827c:	b2db      	uxtb	r3, r3
 800827e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dce9      	bgt.n	800825c <prvUnlockQueue+0x16>
 8008288:	e000      	b.n	800828c <prvUnlockQueue+0x46>
					break;
 800828a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	22ff      	movs	r2, #255	; 0xff
 8008290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008294:	f001 fdbe 	bl	8009e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008298:	f001 fd8c 	bl	8009db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a4:	e011      	b.n	80082ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d012      	beq.n	80082d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3310      	adds	r3, #16
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fd56 	bl	8008d64 <xTaskRemoveFromEventList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082be:	f000 fe2d 	bl	8008f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dce9      	bgt.n	80082a6 <prvUnlockQueue+0x60>
 80082d2:	e000      	b.n	80082d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	22ff      	movs	r2, #255	; 0xff
 80082da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082de:	f001 fd99 	bl	8009e14 <vPortExitCritical>
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f2:	f001 fd5f 	bl	8009db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e001      	b.n	8008308 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008308:	f001 fd84 	bl	8009e14 <vPortExitCritical>

	return xReturn;
 800830c:	68fb      	ldr	r3, [r7, #12]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800831e:	f001 fd49 	bl	8009db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	429a      	cmp	r2, r3
 800832c:	d102      	bne.n	8008334 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e001      	b.n	8008338 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008338:	f001 fd6c 	bl	8009e14 <vPortExitCritical>

	return xReturn;
 800833c:	68fb      	ldr	r3, [r7, #12]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e014      	b.n	8008382 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008358:	4a0f      	ldr	r2, [pc, #60]	; (8008398 <vQueueAddToRegistry+0x50>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008364:	490c      	ldr	r1, [pc, #48]	; (8008398 <vQueueAddToRegistry+0x50>)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800836e:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <vQueueAddToRegistry+0x50>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800837a:	e006      	b.n	800838a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b07      	cmp	r3, #7
 8008386:	d9e7      	bls.n	8008358 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	200156c8 	.word	0x200156c8

0800839c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e016      	b.n	80083d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <vQueueUnregisterQueue+0x50>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	4413      	add	r3, r2
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d10b      	bne.n	80083d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083ba:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <vQueueUnregisterQueue+0x50>)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2100      	movs	r1, #0
 80083c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083c4:	4a09      	ldr	r2, [pc, #36]	; (80083ec <vQueueUnregisterQueue+0x50>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4413      	add	r3, r2
 80083cc:	2200      	movs	r2, #0
 80083ce:	605a      	str	r2, [r3, #4]
				break;
 80083d0:	e006      	b.n	80083e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b07      	cmp	r3, #7
 80083dc:	d9e5      	bls.n	80083aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	200156c8 	.word	0x200156c8

080083f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008400:	f001 fcd8 	bl	8009db4 <vPortEnterCritical>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800840a:	b25b      	sxtb	r3, r3
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d103      	bne.n	800841a <vQueueWaitForMessageRestricted+0x2a>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d103      	bne.n	8008430 <vQueueWaitForMessageRestricted+0x40>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008430:	f001 fcf0 	bl	8009e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fc61 	bl	8008d0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	f7ff fefb 	bl	8008246 <prvUnlockQueue>
	}
 8008450:	bf00      	nop
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08e      	sub	sp, #56	; 0x38
 800845c:	af04      	add	r7, sp, #16
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <xTaskCreateStatic+0x2a>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	623b      	str	r3, [r7, #32]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xTaskCreateStatic+0x46>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	61fb      	str	r3, [r7, #28]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800849e:	23a8      	movs	r3, #168	; 0xa8
 80084a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2ba8      	cmp	r3, #168	; 0xa8
 80084a6:	d00a      	beq.n	80084be <xTaskCreateStatic+0x66>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	61bb      	str	r3, [r7, #24]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01e      	beq.n	8008504 <xTaskCreateStatic+0xac>
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084de:	2300      	movs	r3, #0
 80084e0:	9303      	str	r3, [sp, #12]
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	f107 0314 	add.w	r3, r7, #20
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f850 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084fe:	f000 f8f3 	bl	80086e8 <prvAddNewTaskToReadyList>
 8008502:	e001      	b.n	8008508 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008508:	697b      	ldr	r3, [r7, #20]
	}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008512:	b580      	push	{r7, lr}
 8008514:	b08c      	sub	sp, #48	; 0x30
 8008516:	af04      	add	r7, sp, #16
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	603b      	str	r3, [r7, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fd66 	bl	8009ff8 <pvPortMalloc>
 800852c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008534:	20a8      	movs	r0, #168	; 0xa8
 8008536:	f001 fd5f 	bl	8009ff8 <pvPortMalloc>
 800853a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
 8008548:	e005      	b.n	8008556 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f001 fe20 	bl	800a190 <vPortFree>
 8008550:	e001      	b.n	8008556 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d017      	beq.n	800858c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	2300      	movs	r3, #0
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	9302      	str	r3, [sp, #8]
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f80e 	bl	800859c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008580:	69f8      	ldr	r0, [r7, #28]
 8008582:	f000 f8b1 	bl	80086e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008586:	2301      	movs	r3, #1
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	e002      	b.n	8008592 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008592:	69bb      	ldr	r3, [r7, #24]
	}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	461a      	mov	r2, r3
 80085b4:	21a5      	movs	r1, #165	; 0xa5
 80085b6:	f002 f911 	bl	800a7dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085c4:	3b01      	subs	r3, #1
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f023 0307 	bic.w	r3, r3, #7
 80085d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01f      	beq.n	800863a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	e012      	b.n	8008626 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	7819      	ldrb	r1, [r3, #0]
 8008608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	3334      	adds	r3, #52	; 0x34
 8008610:	460a      	mov	r2, r1
 8008612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	3301      	adds	r3, #1
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	2b0f      	cmp	r3, #15
 800862a:	d9e9      	bls.n	8008600 <prvInitialiseNewTask+0x64>
 800862c:	e000      	b.n	8008630 <prvInitialiseNewTask+0x94>
			{
				break;
 800862e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008638:	e003      	b.n	8008642 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	2b37      	cmp	r3, #55	; 0x37
 8008646:	d901      	bls.n	800864c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008648:	2337      	movs	r3, #55	; 0x37
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008656:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	2200      	movs	r2, #0
 800865c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	3304      	adds	r3, #4
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fda0 	bl	80071a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	3318      	adds	r3, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fd9b 	bl	80071a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	2200      	movs	r2, #0
 8008694:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	3354      	adds	r3, #84	; 0x54
 800869c:	224c      	movs	r2, #76	; 0x4c
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f002 f89b 	bl	800a7dc <memset>
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	4a0c      	ldr	r2, [pc, #48]	; (80086dc <prvInitialiseNewTask+0x140>)
 80086aa:	659a      	str	r2, [r3, #88]	; 0x58
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	4a0c      	ldr	r2, [pc, #48]	; (80086e0 <prvInitialiseNewTask+0x144>)
 80086b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <prvInitialiseNewTask+0x148>)
 80086b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	69b8      	ldr	r0, [r7, #24]
 80086be:	f001 fa4f 	bl	8009b60 <pxPortInitialiseStack>
 80086c2:	4602      	mov	r2, r0
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d4:	bf00      	nop
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	2001995c 	.word	0x2001995c
 80086e0:	200199c4 	.word	0x200199c4
 80086e4:	20019a2c 	.word	0x20019a2c

080086e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086f0:	f001 fb60 	bl	8009db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086f4:	4b2d      	ldr	r3, [pc, #180]	; (80087ac <prvAddNewTaskToReadyList+0xc4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a2c      	ldr	r2, [pc, #176]	; (80087ac <prvAddNewTaskToReadyList+0xc4>)
 80086fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086fe:	4b2c      	ldr	r3, [pc, #176]	; (80087b0 <prvAddNewTaskToReadyList+0xc8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d109      	bne.n	800871a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008706:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <prvAddNewTaskToReadyList+0xc8>)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800870c:	4b27      	ldr	r3, [pc, #156]	; (80087ac <prvAddNewTaskToReadyList+0xc4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d110      	bne.n	8008736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008714:	f000 fc26 	bl	8008f64 <prvInitialiseTaskLists>
 8008718:	e00d      	b.n	8008736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800871a:	4b26      	ldr	r3, [pc, #152]	; (80087b4 <prvAddNewTaskToReadyList+0xcc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008722:	4b23      	ldr	r3, [pc, #140]	; (80087b0 <prvAddNewTaskToReadyList+0xc8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	429a      	cmp	r2, r3
 800872e:	d802      	bhi.n	8008736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008730:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <prvAddNewTaskToReadyList+0xc8>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008736:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <prvAddNewTaskToReadyList+0xd0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <prvAddNewTaskToReadyList+0xd0>)
 800873e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008740:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <prvAddNewTaskToReadyList+0xd0>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <prvAddNewTaskToReadyList+0xd4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d903      	bls.n	800875c <prvAddNewTaskToReadyList+0x74>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	4a18      	ldr	r2, [pc, #96]	; (80087bc <prvAddNewTaskToReadyList+0xd4>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <prvAddNewTaskToReadyList+0xd8>)
 800876a:	441a      	add	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f7fe fd25 	bl	80071c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008778:	f001 fb4c 	bl	8009e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <prvAddNewTaskToReadyList+0xcc>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <prvAddNewTaskToReadyList+0xc8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	429a      	cmp	r2, r3
 8008790:	d207      	bcs.n	80087a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <prvAddNewTaskToReadyList+0xdc>)
 8008794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20015bdc 	.word	0x20015bdc
 80087b0:	20015708 	.word	0x20015708
 80087b4:	20015be8 	.word	0x20015be8
 80087b8:	20015bf8 	.word	0x20015bf8
 80087bc:	20015be4 	.word	0x20015be4
 80087c0:	2001570c 	.word	0x2001570c
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <vTaskDelay+0x60>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <vTaskDelay+0x30>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60bb      	str	r3, [r7, #8]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087f8:	f000 f88a 	bl	8008910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fe0c 	bl	800941c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008804:	f000 f892 	bl	800892c <xTaskResumeAll>
 8008808:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d107      	bne.n	8008820 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <vTaskDelay+0x64>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20015c04 	.word	0x20015c04
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800883e:	463a      	mov	r2, r7
 8008840:	1d39      	adds	r1, r7, #4
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fc5a 	bl	8007100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	9202      	str	r2, [sp, #8]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	2300      	movs	r3, #0
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	460a      	mov	r2, r1
 800885e:	4924      	ldr	r1, [pc, #144]	; (80088f0 <vTaskStartScheduler+0xc0>)
 8008860:	4824      	ldr	r0, [pc, #144]	; (80088f4 <vTaskStartScheduler+0xc4>)
 8008862:	f7ff fdf9 	bl	8008458 <xTaskCreateStatic>
 8008866:	4603      	mov	r3, r0
 8008868:	4a23      	ldr	r2, [pc, #140]	; (80088f8 <vTaskStartScheduler+0xc8>)
 800886a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800886c:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <vTaskStartScheduler+0xc8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008874:	2301      	movs	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e001      	b.n	800887e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d102      	bne.n	800888a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008884:	f000 fe1e 	bl	80094c4 <xTimerCreateTimerTask>
 8008888:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d11b      	bne.n	80088c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088a4:	4b15      	ldr	r3, [pc, #84]	; (80088fc <vTaskStartScheduler+0xcc>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3354      	adds	r3, #84	; 0x54
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <vTaskStartScheduler+0xd0>)
 80088ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088ae:	4b15      	ldr	r3, [pc, #84]	; (8008904 <vTaskStartScheduler+0xd4>)
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295
 80088b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <vTaskStartScheduler+0xd8>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088bc:	4b13      	ldr	r3, [pc, #76]	; (800890c <vTaskStartScheduler+0xdc>)
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088c2:	f001 f9d5 	bl	8009c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088c6:	e00e      	b.n	80088e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d10a      	bne.n	80088e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <vTaskStartScheduler+0xb4>
}
 80088e6:	bf00      	nop
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	0800b708 	.word	0x0800b708
 80088f4:	08008f35 	.word	0x08008f35
 80088f8:	20015c00 	.word	0x20015c00
 80088fc:	20015708 	.word	0x20015708
 8008900:	2000007c 	.word	0x2000007c
 8008904:	20015bfc 	.word	0x20015bfc
 8008908:	20015be8 	.word	0x20015be8
 800890c:	20015be0 	.word	0x20015be0

08008910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008914:	4b04      	ldr	r3, [pc, #16]	; (8008928 <vTaskSuspendAll+0x18>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	4a03      	ldr	r2, [pc, #12]	; (8008928 <vTaskSuspendAll+0x18>)
 800891c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800891e:	bf00      	nop
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	20015c04 	.word	0x20015c04

0800892c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800893a:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <xTaskResumeAll+0x118>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xTaskResumeAll+0x2c>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008958:	f001 fa2c 	bl	8009db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <xTaskResumeAll+0x118>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <xTaskResumeAll+0x118>)
 8008964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008966:	4b37      	ldr	r3, [pc, #220]	; (8008a44 <xTaskResumeAll+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d162      	bne.n	8008a34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800896e:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <xTaskResumeAll+0x11c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05e      	beq.n	8008a34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008976:	e02f      	b.n	80089d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b34      	ldr	r3, [pc, #208]	; (8008a4c <xTaskResumeAll+0x120>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3318      	adds	r3, #24
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe fc79 	bl	800727c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fc74 	bl	800727c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4b2d      	ldr	r3, [pc, #180]	; (8008a50 <xTaskResumeAll+0x124>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d903      	bls.n	80089a8 <xTaskResumeAll+0x7c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a2a      	ldr	r2, [pc, #168]	; (8008a50 <xTaskResumeAll+0x124>)
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <xTaskResumeAll+0x128>)
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe fbff 	bl	80071c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c8:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <xTaskResumeAll+0x12c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d302      	bcc.n	80089d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089d2:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <xTaskResumeAll+0x130>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <xTaskResumeAll+0x120>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1cb      	bne.n	8008978 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089e6:	f000 fb5f 	bl	80090a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089ea:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <xTaskResumeAll+0x134>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089f6:	f000 f847 	bl	8008a88 <xTaskIncrementTick>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a00:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <xTaskResumeAll+0x130>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1f1      	bne.n	80089f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <xTaskResumeAll+0x134>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <xTaskResumeAll+0x130>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <xTaskResumeAll+0x138>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a34:	f001 f9ee 	bl	8009e14 <vPortExitCritical>

	return xAlreadyYielded;
 8008a38:	68bb      	ldr	r3, [r7, #8]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20015c04 	.word	0x20015c04
 8008a48:	20015bdc 	.word	0x20015bdc
 8008a4c:	20015b9c 	.word	0x20015b9c
 8008a50:	20015be4 	.word	0x20015be4
 8008a54:	2001570c 	.word	0x2001570c
 8008a58:	20015708 	.word	0x20015708
 8008a5c:	20015bf0 	.word	0x20015bf0
 8008a60:	20015bec 	.word	0x20015bec
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <xTaskGetTickCount+0x1c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a74:	687b      	ldr	r3, [r7, #4]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20015be0 	.word	0x20015be0

08008a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a92:	4b4f      	ldr	r3, [pc, #316]	; (8008bd0 <xTaskIncrementTick+0x148>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f040 808f 	bne.w	8008bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a9c:	4b4d      	ldr	r3, [pc, #308]	; (8008bd4 <xTaskIncrementTick+0x14c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa4:	4a4b      	ldr	r2, [pc, #300]	; (8008bd4 <xTaskIncrementTick+0x14c>)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d120      	bne.n	8008af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ab0:	4b49      	ldr	r3, [pc, #292]	; (8008bd8 <xTaskIncrementTick+0x150>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	603b      	str	r3, [r7, #0]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <xTaskIncrementTick+0x46>
 8008ad0:	4b41      	ldr	r3, [pc, #260]	; (8008bd8 <xTaskIncrementTick+0x150>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <xTaskIncrementTick+0x154>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a3f      	ldr	r2, [pc, #252]	; (8008bd8 <xTaskIncrementTick+0x150>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	4a3f      	ldr	r2, [pc, #252]	; (8008bdc <xTaskIncrementTick+0x154>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4b3e      	ldr	r3, [pc, #248]	; (8008be0 <xTaskIncrementTick+0x158>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a3d      	ldr	r2, [pc, #244]	; (8008be0 <xTaskIncrementTick+0x158>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	f000 fadb 	bl	80090a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af2:	4b3c      	ldr	r3, [pc, #240]	; (8008be4 <xTaskIncrementTick+0x15c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d349      	bcc.n	8008b90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008afc:	4b36      	ldr	r3, [pc, #216]	; (8008bd8 <xTaskIncrementTick+0x150>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b06:	4b37      	ldr	r3, [pc, #220]	; (8008be4 <xTaskIncrementTick+0x15c>)
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0c:	601a      	str	r2, [r3, #0]
					break;
 8008b0e:	e03f      	b.n	8008b90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b10:	4b31      	ldr	r3, [pc, #196]	; (8008bd8 <xTaskIncrementTick+0x150>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d203      	bcs.n	8008b30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b28:	4a2e      	ldr	r2, [pc, #184]	; (8008be4 <xTaskIncrementTick+0x15c>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b2e:	e02f      	b.n	8008b90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fba1 	bl	800727c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	3318      	adds	r3, #24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fb98 	bl	800727c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <xTaskIncrementTick+0x160>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <xTaskIncrementTick+0xd8>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4a22      	ldr	r2, [pc, #136]	; (8008be8 <xTaskIncrementTick+0x160>)
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	; (8008bec <xTaskIncrementTick+0x164>)
 8008b6e:	441a      	add	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fb23 	bl	80071c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b80:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <xTaskIncrementTick+0x168>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3b8      	bcc.n	8008afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8e:	e7b5      	b.n	8008afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b90:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <xTaskIncrementTick+0x168>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4915      	ldr	r1, [pc, #84]	; (8008bec <xTaskIncrementTick+0x164>)
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d901      	bls.n	8008bac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <xTaskIncrementTick+0x16c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e004      	b.n	8008bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <xTaskIncrementTick+0x170>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <xTaskIncrementTick+0x170>)
 8008bc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bc4:	697b      	ldr	r3, [r7, #20]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20015c04 	.word	0x20015c04
 8008bd4:	20015be0 	.word	0x20015be0
 8008bd8:	20015b94 	.word	0x20015b94
 8008bdc:	20015b98 	.word	0x20015b98
 8008be0:	20015bf4 	.word	0x20015bf4
 8008be4:	20015bfc 	.word	0x20015bfc
 8008be8:	20015be4 	.word	0x20015be4
 8008bec:	2001570c 	.word	0x2001570c
 8008bf0:	20015708 	.word	0x20015708
 8008bf4:	20015bf0 	.word	0x20015bf0
 8008bf8:	20015bec 	.word	0x20015bec

08008bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c02:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <vTaskSwitchContext+0xb0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c0a:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <vTaskSwitchContext+0xb4>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c10:	e046      	b.n	8008ca0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c12:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <vTaskSwitchContext+0xb4>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c18:	4b26      	ldr	r3, [pc, #152]	; (8008cb4 <vTaskSwitchContext+0xb8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e010      	b.n	8008c42 <vTaskSwitchContext+0x46>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <vTaskSwitchContext+0x40>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	607b      	str	r3, [r7, #4]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <vTaskSwitchContext+0x3e>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	491d      	ldr	r1, [pc, #116]	; (8008cb8 <vTaskSwitchContext+0xbc>)
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0e4      	beq.n	8008c20 <vTaskSwitchContext+0x24>
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <vTaskSwitchContext+0xbc>)
 8008c62:	4413      	add	r3, r2
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	3308      	adds	r3, #8
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d104      	bne.n	8008c86 <vTaskSwitchContext+0x8a>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	605a      	str	r2, [r3, #4]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	4a0b      	ldr	r2, [pc, #44]	; (8008cbc <vTaskSwitchContext+0xc0>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <vTaskSwitchContext+0xb8>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <vTaskSwitchContext+0xc0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3354      	adds	r3, #84	; 0x54
 8008c9c:	4a08      	ldr	r2, [pc, #32]	; (8008cc0 <vTaskSwitchContext+0xc4>)
 8008c9e:	6013      	str	r3, [r2, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20015c04 	.word	0x20015c04
 8008cb0:	20015bf0 	.word	0x20015bf0
 8008cb4:	20015be4 	.word	0x20015be4
 8008cb8:	2001570c 	.word	0x2001570c
 8008cbc:	20015708 	.word	0x20015708
 8008cc0:	2000007c 	.word	0x2000007c

08008cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <vTaskPlaceOnEventList+0x44>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3318      	adds	r3, #24
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fe fa89 	bl	800720a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	6838      	ldr	r0, [r7, #0]
 8008cfc:	f000 fb8e 	bl	800941c <prvAddCurrentTaskToDelayedList>
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20015708 	.word	0x20015708

08008d0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	617b      	str	r3, [r7, #20]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3318      	adds	r3, #24
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7fe fa40 	bl	80071c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	68b8      	ldr	r0, [r7, #8]
 8008d52:	f000 fb63 	bl	800941c <prvAddCurrentTaskToDelayedList>
	}
 8008d56:	bf00      	nop
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20015708 	.word	0x20015708

08008d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	60fb      	str	r3, [r7, #12]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	3318      	adds	r3, #24
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fa71 	bl	800727c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <xTaskRemoveFromEventList+0xb0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d11d      	bne.n	8008dde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fa68 	bl	800727c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <xTaskRemoveFromEventList+0xb4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d903      	bls.n	8008dc0 <xTaskRemoveFromEventList+0x5c>
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <xTaskRemoveFromEventList+0xb4>)
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <xTaskRemoveFromEventList+0xb8>)
 8008dce:	441a      	add	r2, r3
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f7fe f9f3 	bl	80071c2 <vListInsertEnd>
 8008ddc:	e005      	b.n	8008dea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3318      	adds	r3, #24
 8008de2:	4619      	mov	r1, r3
 8008de4:	480e      	ldr	r0, [pc, #56]	; (8008e20 <xTaskRemoveFromEventList+0xbc>)
 8008de6:	f7fe f9ec 	bl	80071c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dee:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <xTaskRemoveFromEventList+0xc0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d905      	bls.n	8008e04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <xTaskRemoveFromEventList+0xc4>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	e001      	b.n	8008e08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e08:	697b      	ldr	r3, [r7, #20]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20015c04 	.word	0x20015c04
 8008e18:	20015be4 	.word	0x20015be4
 8008e1c:	2001570c 	.word	0x2001570c
 8008e20:	20015b9c 	.word	0x20015b9c
 8008e24:	20015708 	.word	0x20015708
 8008e28:	20015bf0 	.word	0x20015bf0

08008e2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <vTaskInternalSetTimeOutState+0x24>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <vTaskInternalSetTimeOutState+0x28>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	605a      	str	r2, [r3, #4]
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20015bf4 	.word	0x20015bf4
 8008e54:	20015be0 	.word	0x20015be0

08008e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	613b      	str	r3, [r7, #16]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	60fb      	str	r3, [r7, #12]
}
 8008e96:	bf00      	nop
 8008e98:	e7fe      	b.n	8008e98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e9a:	f000 ff8b 	bl	8009db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e9e:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <xTaskCheckForTimeOut+0xbc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d102      	bne.n	8008ebe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e023      	b.n	8008f06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <xTaskCheckForTimeOut+0xc0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d007      	beq.n	8008eda <xTaskCheckForTimeOut+0x82>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d302      	bcc.n	8008eda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	61fb      	str	r3, [r7, #28]
 8008ed8:	e015      	b.n	8008f06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d20b      	bcs.n	8008efc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	1ad2      	subs	r2, r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ff9b 	bl	8008e2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e004      	b.n	8008f06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f02:	2301      	movs	r3, #1
 8008f04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f06:	f000 ff85 	bl	8009e14 <vPortExitCritical>

	return xReturn;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3720      	adds	r7, #32
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20015be0 	.word	0x20015be0
 8008f18:	20015bf4 	.word	0x20015bf4

08008f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f20:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <vTaskMissedYield+0x14>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20015bf0 	.word	0x20015bf0

08008f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f3c:	f000 f852 	bl	8008fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <prvIdleTask+0x28>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d9f9      	bls.n	8008f3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <prvIdleTask+0x2c>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f58:	e7f0      	b.n	8008f3c <prvIdleTask+0x8>
 8008f5a:	bf00      	nop
 8008f5c:	2001570c 	.word	0x2001570c
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	e00c      	b.n	8008f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a12      	ldr	r2, [pc, #72]	; (8008fc4 <prvInitialiseTaskLists+0x60>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe f8f2 	bl	8007168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3301      	adds	r3, #1
 8008f88:	607b      	str	r3, [r7, #4]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b37      	cmp	r3, #55	; 0x37
 8008f8e:	d9ef      	bls.n	8008f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f90:	480d      	ldr	r0, [pc, #52]	; (8008fc8 <prvInitialiseTaskLists+0x64>)
 8008f92:	f7fe f8e9 	bl	8007168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f96:	480d      	ldr	r0, [pc, #52]	; (8008fcc <prvInitialiseTaskLists+0x68>)
 8008f98:	f7fe f8e6 	bl	8007168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f9c:	480c      	ldr	r0, [pc, #48]	; (8008fd0 <prvInitialiseTaskLists+0x6c>)
 8008f9e:	f7fe f8e3 	bl	8007168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fa2:	480c      	ldr	r0, [pc, #48]	; (8008fd4 <prvInitialiseTaskLists+0x70>)
 8008fa4:	f7fe f8e0 	bl	8007168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fa8:	480b      	ldr	r0, [pc, #44]	; (8008fd8 <prvInitialiseTaskLists+0x74>)
 8008faa:	f7fe f8dd 	bl	8007168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fae:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <prvInitialiseTaskLists+0x78>)
 8008fb0:	4a05      	ldr	r2, [pc, #20]	; (8008fc8 <prvInitialiseTaskLists+0x64>)
 8008fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <prvInitialiseTaskLists+0x7c>)
 8008fb6:	4a05      	ldr	r2, [pc, #20]	; (8008fcc <prvInitialiseTaskLists+0x68>)
 8008fb8:	601a      	str	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	2001570c 	.word	0x2001570c
 8008fc8:	20015b6c 	.word	0x20015b6c
 8008fcc:	20015b80 	.word	0x20015b80
 8008fd0:	20015b9c 	.word	0x20015b9c
 8008fd4:	20015bb0 	.word	0x20015bb0
 8008fd8:	20015bc8 	.word	0x20015bc8
 8008fdc:	20015b94 	.word	0x20015b94
 8008fe0:	20015b98 	.word	0x20015b98

08008fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fea:	e019      	b.n	8009020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fec:	f000 fee2 	bl	8009db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff0:	4b10      	ldr	r3, [pc, #64]	; (8009034 <prvCheckTasksWaitingTermination+0x50>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fe f93d 	bl	800727c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <prvCheckTasksWaitingTermination+0x54>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3b01      	subs	r3, #1
 8009008:	4a0b      	ldr	r2, [pc, #44]	; (8009038 <prvCheckTasksWaitingTermination+0x54>)
 800900a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <prvCheckTasksWaitingTermination+0x58>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3b01      	subs	r3, #1
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <prvCheckTasksWaitingTermination+0x58>)
 8009014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009016:	f000 fefd 	bl	8009e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f810 	bl	8009040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <prvCheckTasksWaitingTermination+0x58>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e1      	bne.n	8008fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20015bb0 	.word	0x20015bb0
 8009038:	20015bdc 	.word	0x20015bdc
 800903c:	20015bc4 	.word	0x20015bc4

08009040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3354      	adds	r3, #84	; 0x54
 800904c:	4618      	mov	r0, r3
 800904e:	f001 fbdd 	bl	800a80c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009058:	2b00      	cmp	r3, #0
 800905a:	d108      	bne.n	800906e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	4618      	mov	r0, r3
 8009062:	f001 f895 	bl	800a190 <vPortFree>
				vPortFree( pxTCB );
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f892 	bl	800a190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800906c:	e018      	b.n	80090a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009074:	2b01      	cmp	r3, #1
 8009076:	d103      	bne.n	8009080 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f889 	bl	800a190 <vPortFree>
	}
 800907e:	e00f      	b.n	80090a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009086:	2b02      	cmp	r3, #2
 8009088:	d00a      	beq.n	80090a0 <prvDeleteTCB+0x60>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <prvDeleteTCB+0x5e>
	}
 80090a0:	bf00      	nop
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <prvResetNextTaskUnblockTime+0x38>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <prvResetNextTaskUnblockTime+0x3c>)
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090c0:	e008      	b.n	80090d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <prvResetNextTaskUnblockTime+0x38>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <prvResetNextTaskUnblockTime+0x3c>)
 80090d2:	6013      	str	r3, [r2, #0]
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	20015b94 	.word	0x20015b94
 80090e4:	20015bfc 	.word	0x20015bfc

080090e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <xTaskGetCurrentTaskHandle+0x1c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80090f4:	687b      	ldr	r3, [r7, #4]
	}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20015708 	.word	0x20015708

08009108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <xTaskGetSchedulerState+0x34>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009116:	2301      	movs	r3, #1
 8009118:	607b      	str	r3, [r7, #4]
 800911a:	e008      	b.n	800912e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911c:	4b08      	ldr	r3, [pc, #32]	; (8009140 <xTaskGetSchedulerState+0x38>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009124:	2302      	movs	r3, #2
 8009126:	607b      	str	r3, [r7, #4]
 8009128:	e001      	b.n	800912e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800912a:	2300      	movs	r3, #0
 800912c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800912e:	687b      	ldr	r3, [r7, #4]
	}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20015be8 	.word	0x20015be8
 8009140:	20015c04 	.word	0x20015c04

08009144 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d051      	beq.n	80091fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915e:	4b2a      	ldr	r3, [pc, #168]	; (8009208 <xTaskPriorityInherit+0xc4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	429a      	cmp	r2, r3
 8009166:	d241      	bcs.n	80091ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	db06      	blt.n	800917e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <xTaskPriorityInherit+0xc4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6959      	ldr	r1, [r3, #20]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a1f      	ldr	r2, [pc, #124]	; (800920c <xTaskPriorityInherit+0xc8>)
 8009190:	4413      	add	r3, r2
 8009192:	4299      	cmp	r1, r3
 8009194:	d122      	bne.n	80091dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	3304      	adds	r3, #4
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe f86e 	bl	800727c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091a0:	4b19      	ldr	r3, [pc, #100]	; (8009208 <xTaskPriorityInherit+0xc4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	4b18      	ldr	r3, [pc, #96]	; (8009210 <xTaskPriorityInherit+0xcc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d903      	bls.n	80091be <xTaskPriorityInherit+0x7a>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	4a15      	ldr	r2, [pc, #84]	; (8009210 <xTaskPriorityInherit+0xcc>)
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4a10      	ldr	r2, [pc, #64]	; (800920c <xTaskPriorityInherit+0xc8>)
 80091cc:	441a      	add	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f7fd fff4 	bl	80071c2 <vListInsertEnd>
 80091da:	e004      	b.n	80091e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <xTaskPriorityInherit+0xc4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091e6:	2301      	movs	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	e008      	b.n	80091fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <xTaskPriorityInherit+0xc4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d201      	bcs.n	80091fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20015708 	.word	0x20015708
 800920c:	2001570c 	.word	0x2001570c
 8009210:	20015be4 	.word	0x20015be4

08009214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d056      	beq.n	80092d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800922a:	4b2e      	ldr	r3, [pc, #184]	; (80092e4 <xTaskPriorityDisinherit+0xd0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d00a      	beq.n	800924a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60bb      	str	r3, [r7, #8]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	1e5a      	subs	r2, r3, #1
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927a:	429a      	cmp	r2, r3
 800927c:	d02c      	beq.n	80092d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009282:	2b00      	cmp	r3, #0
 8009284:	d128      	bne.n	80092d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3304      	adds	r3, #4
 800928a:	4618      	mov	r0, r3
 800928c:	f7fd fff6 	bl	800727c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <xTaskPriorityDisinherit+0xd4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d903      	bls.n	80092b8 <xTaskPriorityDisinherit+0xa4>
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <xTaskPriorityDisinherit+0xd4>)
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4a09      	ldr	r2, [pc, #36]	; (80092ec <xTaskPriorityDisinherit+0xd8>)
 80092c6:	441a      	add	r2, r3
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fd ff77 	bl	80071c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d8:	697b      	ldr	r3, [r7, #20]
	}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20015708 	.word	0x20015708
 80092e8:	20015be4 	.word	0x20015be4
 80092ec:	2001570c 	.word	0x2001570c

080092f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80092fe:	2301      	movs	r3, #1
 8009300:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d06a      	beq.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d902      	bls.n	8009336 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	e002      	b.n	800933c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	429a      	cmp	r2, r3
 8009344:	d04b      	beq.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	429a      	cmp	r2, r3
 800934e:	d146      	bne.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009350:	4b25      	ldr	r3, [pc, #148]	; (80093e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	429a      	cmp	r2, r3
 8009358:	d10a      	bne.n	8009370 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60bb      	str	r3, [r7, #8]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	2b00      	cmp	r3, #0
 8009382:	db04      	blt.n	800938e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	6959      	ldr	r1, [r3, #20]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4a13      	ldr	r2, [pc, #76]	; (80093ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800939e:	4413      	add	r3, r2
 80093a0:	4299      	cmp	r1, r3
 80093a2:	d11c      	bne.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fd ff67 	bl	800727c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d903      	bls.n	80093c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	4a0c      	ldr	r2, [pc, #48]	; (80093f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4a07      	ldr	r2, [pc, #28]	; (80093ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093d0:	441a      	add	r2, r3
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	3304      	adds	r3, #4
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7fd fef2 	bl	80071c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093de:	bf00      	nop
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20015708 	.word	0x20015708
 80093ec:	2001570c 	.word	0x2001570c
 80093f0:	20015be4 	.word	0x20015be4

080093f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093f8:	4b07      	ldr	r3, [pc, #28]	; (8009418 <pvTaskIncrementMutexHeldCount+0x24>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <pvTaskIncrementMutexHeldCount+0x24>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009406:	3201      	adds	r2, #1
 8009408:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <pvTaskIncrementMutexHeldCount+0x24>)
 800940c:	681b      	ldr	r3, [r3, #0]
	}
 800940e:	4618      	mov	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	20015708 	.word	0x20015708

0800941c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009426:	4b21      	ldr	r3, [pc, #132]	; (80094ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942c:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3304      	adds	r3, #4
 8009432:	4618      	mov	r0, r3
 8009434:	f7fd ff22 	bl	800727c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d10a      	bne.n	8009456 <prvAddCurrentTaskToDelayedList+0x3a>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009446:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4819      	ldr	r0, [pc, #100]	; (80094b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009450:	f7fd feb7 	bl	80071c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009454:	e026      	b.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4413      	add	r3, r2
 800945c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	429a      	cmp	r2, r3
 800946c:	d209      	bcs.n	8009482 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f7fd fec5 	bl	800720a <vListInsert>
}
 8009480:	e010      	b.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fd febb 	bl	800720a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	d202      	bcs.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800949e:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	6013      	str	r3, [r2, #0]
}
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20015be0 	.word	0x20015be0
 80094b0:	20015708 	.word	0x20015708
 80094b4:	20015bc8 	.word	0x20015bc8
 80094b8:	20015b98 	.word	0x20015b98
 80094bc:	20015b94 	.word	0x20015b94
 80094c0:	20015bfc 	.word	0x20015bfc

080094c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	; 0x28
 80094c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ce:	f000 fb07 	bl	8009ae0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xTimerCreateTimerTask+0x80>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d021      	beq.n	800951e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094e2:	1d3a      	adds	r2, r7, #4
 80094e4:	f107 0108 	add.w	r1, r7, #8
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd fe21 	bl	8007134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	9202      	str	r2, [sp, #8]
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	2302      	movs	r3, #2
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	2300      	movs	r3, #0
 8009502:	460a      	mov	r2, r1
 8009504:	4910      	ldr	r1, [pc, #64]	; (8009548 <xTimerCreateTimerTask+0x84>)
 8009506:	4811      	ldr	r0, [pc, #68]	; (800954c <xTimerCreateTimerTask+0x88>)
 8009508:	f7fe ffa6 	bl	8008458 <xTaskCreateStatic>
 800950c:	4603      	mov	r3, r0
 800950e:	4a10      	ldr	r2, [pc, #64]	; (8009550 <xTimerCreateTimerTask+0x8c>)
 8009510:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <xTimerCreateTimerTask+0x8c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800951a:	2301      	movs	r3, #1
 800951c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	613b      	str	r3, [r7, #16]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800953a:	697b      	ldr	r3, [r7, #20]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20015c38 	.word	0x20015c38
 8009548:	0800b710 	.word	0x0800b710
 800954c:	08009689 	.word	0x08009689
 8009550:	20015c3c 	.word	0x20015c3c

08009554 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	; 0x28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <xTimerGenericCommand+0x2e>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	623b      	str	r3, [r7, #32]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009582:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <xTimerGenericCommand+0x98>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d02a      	beq.n	80095e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b05      	cmp	r3, #5
 800959a:	dc18      	bgt.n	80095ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800959c:	f7ff fdb4 	bl	8009108 <xTaskGetSchedulerState>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d109      	bne.n	80095ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <xTimerGenericCommand+0x98>)
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f107 0110 	add.w	r1, r7, #16
 80095ae:	2300      	movs	r3, #0
 80095b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b2:	f7fe f8eb 	bl	800778c <xQueueGenericSend>
 80095b6:	6278      	str	r0, [r7, #36]	; 0x24
 80095b8:	e012      	b.n	80095e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <xTimerGenericCommand+0x98>)
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f107 0110 	add.w	r1, r7, #16
 80095c2:	2300      	movs	r3, #0
 80095c4:	2200      	movs	r2, #0
 80095c6:	f7fe f8e1 	bl	800778c <xQueueGenericSend>
 80095ca:	6278      	str	r0, [r7, #36]	; 0x24
 80095cc:	e008      	b.n	80095e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <xTimerGenericCommand+0x98>)
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f107 0110 	add.w	r1, r7, #16
 80095d6:	2300      	movs	r3, #0
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	f7fe f9d5 	bl	8007988 <xQueueGenericSendFromISR>
 80095de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3728      	adds	r7, #40	; 0x28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20015c38 	.word	0x20015c38

080095f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fa:	4b22      	ldr	r3, [pc, #136]	; (8009684 <prvProcessExpiredTimer+0x94>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	3304      	adds	r3, #4
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd fe37 	bl	800727c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d022      	beq.n	8009662 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	18d1      	adds	r1, r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	6978      	ldr	r0, [r7, #20]
 800962a:	f000 f8d1 	bl	80097d0 <prvInsertTimerInActiveList>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01f      	beq.n	8009674 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009634:	2300      	movs	r3, #0
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	2100      	movs	r1, #0
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f7ff ff88 	bl	8009554 <xTimerGenericCommand>
 8009644:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d113      	bne.n	8009674 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	60fb      	str	r3, [r7, #12]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	b2da      	uxtb	r2, r3
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	6978      	ldr	r0, [r7, #20]
 800967a:	4798      	blx	r3
}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20015c30 	.word	0x20015c30

08009688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f857 	bl	8009748 <prvGetNextExpireTime>
 800969a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f803 	bl	80096ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096a6:	f000 f8d5 	bl	8009854 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096aa:	e7f1      	b.n	8009690 <prvTimerTask+0x8>

080096ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096b6:	f7ff f92b 	bl	8008910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ba:	f107 0308 	add.w	r3, r7, #8
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f866 	bl	8009790 <prvSampleTimeNow>
 80096c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d130      	bne.n	800972e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <prvProcessTimerOrBlockTask+0x3c>
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d806      	bhi.n	80096e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096da:	f7ff f927 	bl	800892c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ff85 	bl	80095f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096e6:	e024      	b.n	8009732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d008      	beq.n	8009700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096ee:	4b13      	ldr	r3, [pc, #76]	; (800973c <prvProcessTimerOrBlockTask+0x90>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <prvProcessTimerOrBlockTask+0x50>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <prvProcessTimerOrBlockTask+0x52>
 80096fc:	2300      	movs	r3, #0
 80096fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <prvProcessTimerOrBlockTask+0x94>)
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	4619      	mov	r1, r3
 800970e:	f7fe fe6f 	bl	80083f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009712:	f7ff f90b 	bl	800892c <xTaskResumeAll>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800971c:	4b09      	ldr	r3, [pc, #36]	; (8009744 <prvProcessTimerOrBlockTask+0x98>)
 800971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	f3bf 8f6f 	isb	sy
}
 800972c:	e001      	b.n	8009732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800972e:	f7ff f8fd 	bl	800892c <xTaskResumeAll>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20015c34 	.word	0x20015c34
 8009740:	20015c38 	.word	0x20015c38
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009750:	4b0e      	ldr	r3, [pc, #56]	; (800978c <prvGetNextExpireTime+0x44>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <prvGetNextExpireTime+0x16>
 800975a:	2201      	movs	r2, #1
 800975c:	e000      	b.n	8009760 <prvGetNextExpireTime+0x18>
 800975e:	2200      	movs	r2, #0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800976c:	4b07      	ldr	r3, [pc, #28]	; (800978c <prvGetNextExpireTime+0x44>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	e001      	b.n	800977c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20015c30 	.word	0x20015c30

08009790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009798:	f7ff f966 	bl	8008a68 <xTaskGetTickCount>
 800979c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <prvSampleTimeNow+0x3c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d205      	bcs.n	80097b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097a8:	f000 f936 	bl	8009a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e002      	b.n	80097ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097ba:	4a04      	ldr	r2, [pc, #16]	; (80097cc <prvSampleTimeNow+0x3c>)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097c0:	68fb      	ldr	r3, [r7, #12]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20015c40 	.word	0x20015c40

080097d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d812      	bhi.n	800981c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	429a      	cmp	r2, r3
 8009802:	d302      	bcc.n	800980a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e01b      	b.n	8009842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800980a:	4b10      	ldr	r3, [pc, #64]	; (800984c <prvInsertTimerInActiveList+0x7c>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3304      	adds	r3, #4
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7fd fcf8 	bl	800720a <vListInsert>
 800981a:	e012      	b.n	8009842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d206      	bcs.n	8009832 <prvInsertTimerInActiveList+0x62>
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e007      	b.n	8009842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <prvInsertTimerInActiveList+0x80>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	4619      	mov	r1, r3
 800983c:	4610      	mov	r0, r2
 800983e:	f7fd fce4 	bl	800720a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009842:	697b      	ldr	r3, [r7, #20]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20015c34 	.word	0x20015c34
 8009850:	20015c30 	.word	0x20015c30

08009854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08e      	sub	sp, #56	; 0x38
 8009858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800985a:	e0ca      	b.n	80099f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	da18      	bge.n	8009894 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009862:	1d3b      	adds	r3, r7, #4
 8009864:	3304      	adds	r3, #4
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	61fb      	str	r3, [r7, #28]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800988a:	6850      	ldr	r0, [r2, #4]
 800988c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800988e:	6892      	ldr	r2, [r2, #8]
 8009890:	4611      	mov	r1, r2
 8009892:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f2c0 80ab 	blt.w	80099f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	3304      	adds	r3, #4
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd fce5 	bl	800727c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098b2:	463b      	mov	r3, r7
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff6b 	bl	8009790 <prvSampleTimeNow>
 80098ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b09      	cmp	r3, #9
 80098c0:	f200 8096 	bhi.w	80099f0 <prvProcessReceivedCommands+0x19c>
 80098c4:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <prvProcessReceivedCommands+0x78>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	080098f5 	.word	0x080098f5
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098f5 	.word	0x080098f5
 80098d8:	08009969 	.word	0x08009969
 80098dc:	0800997d 	.word	0x0800997d
 80098e0:	080099c7 	.word	0x080099c7
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098f5 	.word	0x080098f5
 80098ec:	08009969 	.word	0x08009969
 80098f0:	0800997d 	.word	0x0800997d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	18d1      	adds	r1, r2, r3
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009914:	f7ff ff5c 	bl	80097d0 <prvInsertTimerInActiveList>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d069      	beq.n	80099f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009924:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d05e      	beq.n	80099f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	441a      	add	r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	2300      	movs	r3, #0
 8009942:	2100      	movs	r1, #0
 8009944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009946:	f7ff fe05 	bl	8009554 <xTimerGenericCommand>
 800994a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d14f      	bne.n	80099f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	61bb      	str	r3, [r7, #24]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800996e:	f023 0301 	bic.w	r3, r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800997a:	e03a      	b.n	80099f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	617b      	str	r3, [r7, #20]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	18d1      	adds	r1, r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c0:	f7ff ff06 	bl	80097d0 <prvInsertTimerInActiveList>
					break;
 80099c4:	e015      	b.n	80099f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d103      	bne.n	80099dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d6:	f000 fbdb 	bl	800a190 <vPortFree>
 80099da:	e00a      	b.n	80099f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e2:	f023 0301 	bic.w	r3, r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099ee:	e000      	b.n	80099f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80099f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099f2:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <prvProcessReceivedCommands+0x1c0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	1d39      	adds	r1, r7, #4
 80099f8:	2200      	movs	r2, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe f8ec 	bl	8007bd8 <xQueueReceive>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f47f af2a 	bne.w	800985c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	3730      	adds	r7, #48	; 0x30
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20015c38 	.word	0x20015c38

08009a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1e:	e048      	b.n	8009ab2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a20:	4b2d      	ldr	r3, [pc, #180]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fd fc1f 	bl	800727c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d02e      	beq.n	8009ab2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d90e      	bls.n	8009a84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	4b19      	ldr	r3, [pc, #100]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fd fbc4 	bl	800720a <vListInsert>
 8009a82:	e016      	b.n	8009ab2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a84:	2300      	movs	r3, #0
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff fd60 	bl	8009554 <xTimerGenericCommand>
 8009a94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	603b      	str	r3, [r7, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ab2:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1b1      	bne.n	8009a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ac2:	4b06      	ldr	r3, [pc, #24]	; (8009adc <prvSwitchTimerLists+0xc4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a04      	ldr	r2, [pc, #16]	; (8009ad8 <prvSwitchTimerLists+0xc0>)
 8009ac8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009aca:	4a04      	ldr	r2, [pc, #16]	; (8009adc <prvSwitchTimerLists+0xc4>)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	6013      	str	r3, [r2, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20015c30 	.word	0x20015c30
 8009adc:	20015c34 	.word	0x20015c34

08009ae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ae6:	f000 f965 	bl	8009db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d120      	bne.n	8009b34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009af2:	4814      	ldr	r0, [pc, #80]	; (8009b44 <prvCheckForValidListAndQueue+0x64>)
 8009af4:	f7fd fb38 	bl	8007168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009af8:	4813      	ldr	r0, [pc, #76]	; (8009b48 <prvCheckForValidListAndQueue+0x68>)
 8009afa:	f7fd fb35 	bl	8007168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <prvCheckForValidListAndQueue+0x6c>)
 8009b00:	4a10      	ldr	r2, [pc, #64]	; (8009b44 <prvCheckForValidListAndQueue+0x64>)
 8009b02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b04:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <prvCheckForValidListAndQueue+0x70>)
 8009b06:	4a10      	ldr	r2, [pc, #64]	; (8009b48 <prvCheckForValidListAndQueue+0x68>)
 8009b08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <prvCheckForValidListAndQueue+0x74>)
 8009b10:	4a11      	ldr	r2, [pc, #68]	; (8009b58 <prvCheckForValidListAndQueue+0x78>)
 8009b12:	2110      	movs	r1, #16
 8009b14:	200a      	movs	r0, #10
 8009b16:	f7fd fc43 	bl	80073a0 <xQueueGenericCreateStatic>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <prvCheckForValidListAndQueue+0x60>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	490b      	ldr	r1, [pc, #44]	; (8009b5c <prvCheckForValidListAndQueue+0x7c>)
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fc0a 	bl	8008348 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b34:	f000 f96e 	bl	8009e14 <vPortExitCritical>
}
 8009b38:	bf00      	nop
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20015c38 	.word	0x20015c38
 8009b44:	20015c08 	.word	0x20015c08
 8009b48:	20015c1c 	.word	0x20015c1c
 8009b4c:	20015c30 	.word	0x20015c30
 8009b50:	20015c34 	.word	0x20015c34
 8009b54:	20015ce4 	.word	0x20015ce4
 8009b58:	20015c44 	.word	0x20015c44
 8009b5c:	0800b718 	.word	0x0800b718

08009b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b04      	subs	r3, #4
 8009b70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3b04      	subs	r3, #4
 8009b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0201 	bic.w	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b90:	4a0c      	ldr	r2, [pc, #48]	; (8009bc4 <pxPortInitialiseStack+0x64>)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3b14      	subs	r3, #20
 8009b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f06f 0202 	mvn.w	r2, #2
 8009bae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3b20      	subs	r3, #32
 8009bb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	08009bc9 	.word	0x08009bc9

08009bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <prvTaskExitError+0x54>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bda:	d00a      	beq.n	8009bf2 <prvTaskExitError+0x2a>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <prvTaskExitError+0x28>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60bb      	str	r3, [r7, #8]
}
 8009c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c06:	bf00      	nop
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0fc      	beq.n	8009c08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	20000020 	.word	0x20000020

08009c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c20:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <pxCurrentTCBConst2>)
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	6808      	ldr	r0, [r1, #0]
 8009c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	f380 8809 	msr	PSP, r0
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8811 	msr	BASEPRI, r0
 8009c3a:	4770      	bx	lr
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst2>:
 8009c40:	20015708 	.word	0x20015708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c48:	4808      	ldr	r0, [pc, #32]	; (8009c6c <prvPortStartFirstTask+0x24>)
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	6800      	ldr	r0, [r0, #0]
 8009c4e:	f380 8808 	msr	MSP, r0
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f380 8814 	msr	CONTROL, r0
 8009c5a:	b662      	cpsie	i
 8009c5c:	b661      	cpsie	f
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	df00      	svc	0
 8009c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c6a:	bf00      	nop
 8009c6c:	e000ed08 	.word	0xe000ed08

08009c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c76:	4b46      	ldr	r3, [pc, #280]	; (8009d90 <xPortStartScheduler+0x120>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a46      	ldr	r2, [pc, #280]	; (8009d94 <xPortStartScheduler+0x124>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d10a      	bne.n	8009c96 <xPortStartScheduler+0x26>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c96:	4b3e      	ldr	r3, [pc, #248]	; (8009d90 <xPortStartScheduler+0x120>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a3f      	ldr	r2, [pc, #252]	; (8009d98 <xPortStartScheduler+0x128>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d10a      	bne.n	8009cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	60fb      	str	r3, [r7, #12]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cb6:	4b39      	ldr	r3, [pc, #228]	; (8009d9c <xPortStartScheduler+0x12c>)
 8009cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	22ff      	movs	r2, #255	; 0xff
 8009cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <xPortStartScheduler+0x130>)
 8009cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cde:	4b31      	ldr	r3, [pc, #196]	; (8009da4 <xPortStartScheduler+0x134>)
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ce4:	e009      	b.n	8009cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ce6:	4b2f      	ldr	r3, [pc, #188]	; (8009da4 <xPortStartScheduler+0x134>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <xPortStartScheduler+0x134>)
 8009cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d0ef      	beq.n	8009ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d06:	4b27      	ldr	r3, [pc, #156]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1c3 0307 	rsb	r3, r3, #7
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d00a      	beq.n	8009d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60bb      	str	r3, [r7, #8]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d28:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d3a:	4a1a      	ldr	r2, [pc, #104]	; (8009da4 <xPortStartScheduler+0x134>)
 8009d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d46:	4b18      	ldr	r3, [pc, #96]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a17      	ldr	r2, [pc, #92]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d52:	4b15      	ldr	r3, [pc, #84]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a14      	ldr	r2, [pc, #80]	; (8009da8 <xPortStartScheduler+0x138>)
 8009d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d5e:	f000 f8dd 	bl	8009f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d62:	4b12      	ldr	r3, [pc, #72]	; (8009dac <xPortStartScheduler+0x13c>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d68:	f000 f8fc 	bl	8009f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d6c:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <xPortStartScheduler+0x140>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0f      	ldr	r2, [pc, #60]	; (8009db0 <xPortStartScheduler+0x140>)
 8009d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d78:	f7ff ff66 	bl	8009c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d7c:	f7fe ff3e 	bl	8008bfc <vTaskSwitchContext>
	prvTaskExitError();
 8009d80:	f7ff ff22 	bl	8009bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	e000ed00 	.word	0xe000ed00
 8009d94:	410fc271 	.word	0x410fc271
 8009d98:	410fc270 	.word	0x410fc270
 8009d9c:	e000e400 	.word	0xe000e400
 8009da0:	20015d34 	.word	0x20015d34
 8009da4:	20015d38 	.word	0x20015d38
 8009da8:	e000ed20 	.word	0xe000ed20
 8009dac:	20000020 	.word	0x20000020
 8009db0:	e000ef34 	.word	0xe000ef34

08009db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	607b      	str	r3, [r7, #4]
}
 8009dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dce:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <vPortEnterCritical+0x58>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	4a0d      	ldr	r2, [pc, #52]	; (8009e0c <vPortEnterCritical+0x58>)
 8009dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <vPortEnterCritical+0x58>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d10f      	bne.n	8009e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009de0:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <vPortEnterCritical+0x5c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	603b      	str	r3, [r7, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <vPortEnterCritical+0x4a>
	}
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000020 	.word	0x20000020
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e1a:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <vPortExitCritical+0x50>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <vPortExitCritical+0x24>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	607b      	str	r3, [r7, #4]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e38:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <vPortExitCritical+0x50>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <vPortExitCritical+0x50>)
 8009e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e42:	4b08      	ldr	r3, [pc, #32]	; (8009e64 <vPortExitCritical+0x50>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d105      	bne.n	8009e56 <vPortExitCritical+0x42>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	f383 8811 	msr	BASEPRI, r3
}
 8009e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000020 	.word	0x20000020
	...

08009e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e70:	f3ef 8009 	mrs	r0, PSP
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <pxCurrentTCBConst>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	f01e 0f10 	tst.w	lr, #16
 8009e80:	bf08      	it	eq
 8009e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	6010      	str	r0, [r2, #0]
 8009e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e94:	f380 8811 	msr	BASEPRI, r0
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f7fe feac 	bl	8008bfc <vTaskSwitchContext>
 8009ea4:	f04f 0000 	mov.w	r0, #0
 8009ea8:	f380 8811 	msr	BASEPRI, r0
 8009eac:	bc09      	pop	{r0, r3}
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	6808      	ldr	r0, [r1, #0]
 8009eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb6:	f01e 0f10 	tst.w	lr, #16
 8009eba:	bf08      	it	eq
 8009ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ec0:	f380 8809 	msr	PSP, r0
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w

08009ed0 <pxCurrentTCBConst>:
 8009ed0:	20015708 	.word	0x20015708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop

08009ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	607b      	str	r3, [r7, #4]
}
 8009ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ef2:	f7fe fdc9 	bl	8008a88 <xTaskIncrementTick>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <xPortSysTickHandler+0x40>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	f383 8811 	msr	BASEPRI, r3
}
 8009f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <vPortSetupTimerInterrupt+0x34>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <vPortSetupTimerInterrupt+0x38>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <vPortSetupTimerInterrupt+0x3c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <vPortSetupTimerInterrupt+0x40>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	099b      	lsrs	r3, r3, #6
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <vPortSetupTimerInterrupt+0x44>)
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f3e:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <vPortSetupTimerInterrupt+0x34>)
 8009f40:	2207      	movs	r2, #7
 8009f42:	601a      	str	r2, [r3, #0]
}
 8009f44:	bf00      	nop
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	e000e010 	.word	0xe000e010
 8009f54:	e000e018 	.word	0xe000e018
 8009f58:	20000000 	.word	0x20000000
 8009f5c:	10624dd3 	.word	0x10624dd3
 8009f60:	e000e014 	.word	0xe000e014

08009f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f74 <vPortEnableVFP+0x10>
 8009f68:	6801      	ldr	r1, [r0, #0]
 8009f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f6e:	6001      	str	r1, [r0, #0]
 8009f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f72:	bf00      	nop
 8009f74:	e000ed88 	.word	0xe000ed88

08009f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f7e:	f3ef 8305 	mrs	r3, IPSR
 8009f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b0f      	cmp	r3, #15
 8009f88:	d914      	bls.n	8009fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f8a:	4a17      	ldr	r2, [pc, #92]	; (8009fe8 <vPortValidateInterruptPriority+0x70>)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f94:	4b15      	ldr	r3, [pc, #84]	; (8009fec <vPortValidateInterruptPriority+0x74>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	7afa      	ldrb	r2, [r7, #11]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d20a      	bcs.n	8009fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <vPortValidateInterruptPriority+0x78>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <vPortValidateInterruptPriority+0x7c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d90a      	bls.n	8009fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	603b      	str	r3, [r7, #0]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <vPortValidateInterruptPriority+0x60>
	}
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	e000e3f0 	.word	0xe000e3f0
 8009fec:	20015d34 	.word	0x20015d34
 8009ff0:	e000ed0c 	.word	0xe000ed0c
 8009ff4:	20015d38 	.word	0x20015d38

08009ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	; 0x28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a004:	f7fe fc84 	bl	8008910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a008:	4b5b      	ldr	r3, [pc, #364]	; (800a178 <pvPortMalloc+0x180>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a010:	f000 f920 	bl	800a254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a014:	4b59      	ldr	r3, [pc, #356]	; (800a17c <pvPortMalloc+0x184>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4013      	ands	r3, r2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 8093 	bne.w	800a148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01d      	beq.n	800a064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a028:	2208      	movs	r2, #8
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	2b00      	cmp	r3, #0
 800a038:	d014      	beq.n	800a064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f023 0307 	bic.w	r3, r3, #7
 800a040:	3308      	adds	r3, #8
 800a042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <pvPortMalloc+0x6c>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	617b      	str	r3, [r7, #20]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d06e      	beq.n	800a148 <pvPortMalloc+0x150>
 800a06a:	4b45      	ldr	r3, [pc, #276]	; (800a180 <pvPortMalloc+0x188>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d869      	bhi.n	800a148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a074:	4b43      	ldr	r3, [pc, #268]	; (800a184 <pvPortMalloc+0x18c>)
 800a076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a078:	4b42      	ldr	r3, [pc, #264]	; (800a184 <pvPortMalloc+0x18c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a07e:	e004      	b.n	800a08a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <pvPortMalloc+0xa4>
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f1      	bne.n	800a080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a09c:	4b36      	ldr	r3, [pc, #216]	; (800a178 <pvPortMalloc+0x180>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d050      	beq.n	800a148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	4413      	add	r3, r2
 800a0ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d91f      	bls.n	800a108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	613b      	str	r3, [r7, #16]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	1ad2      	subs	r2, r2, r3
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a102:	69b8      	ldr	r0, [r7, #24]
 800a104:	f000 f908 	bl	800a318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a108:	4b1d      	ldr	r3, [pc, #116]	; (800a180 <pvPortMalloc+0x188>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <pvPortMalloc+0x188>)
 800a114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a116:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <pvPortMalloc+0x188>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b1b      	ldr	r3, [pc, #108]	; (800a188 <pvPortMalloc+0x190>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d203      	bcs.n	800a12a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a122:	4b17      	ldr	r3, [pc, #92]	; (800a180 <pvPortMalloc+0x188>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a18      	ldr	r2, [pc, #96]	; (800a188 <pvPortMalloc+0x190>)
 800a128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <pvPortMalloc+0x184>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	431a      	orrs	r2, r3
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <pvPortMalloc+0x194>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3301      	adds	r3, #1
 800a144:	4a11      	ldr	r2, [pc, #68]	; (800a18c <pvPortMalloc+0x194>)
 800a146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a148:	f7fe fbf0 	bl	800892c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f003 0307 	and.w	r3, r3, #7
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <pvPortMalloc+0x174>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	60fb      	str	r3, [r7, #12]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <pvPortMalloc+0x172>
	return pvReturn;
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3728      	adds	r7, #40	; 0x28
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20019944 	.word	0x20019944
 800a17c:	20019958 	.word	0x20019958
 800a180:	20019948 	.word	0x20019948
 800a184:	2001993c 	.word	0x2001993c
 800a188:	2001994c 	.word	0x2001994c
 800a18c:	20019950 	.word	0x20019950

0800a190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d04d      	beq.n	800a23e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	425b      	negs	r3, r3
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	4b24      	ldr	r3, [pc, #144]	; (800a248 <vPortFree+0xb8>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <vPortFree+0x44>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	60fb      	str	r3, [r7, #12]
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00a      	beq.n	800a1f2 <vPortFree+0x62>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60bb      	str	r3, [r7, #8]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <vPortFree+0xb8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01e      	beq.n	800a23e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11a      	bne.n	800a23e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <vPortFree+0xb8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	43db      	mvns	r3, r3
 800a212:	401a      	ands	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a218:	f7fe fb7a 	bl	8008910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <vPortFree+0xbc>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4413      	add	r3, r2
 800a226:	4a09      	ldr	r2, [pc, #36]	; (800a24c <vPortFree+0xbc>)
 800a228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a22a:	6938      	ldr	r0, [r7, #16]
 800a22c:	f000 f874 	bl	800a318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <vPortFree+0xc0>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	4a06      	ldr	r2, [pc, #24]	; (800a250 <vPortFree+0xc0>)
 800a238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a23a:	f7fe fb77 	bl	800892c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a23e:	bf00      	nop
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20019958 	.word	0x20019958
 800a24c:	20019948 	.word	0x20019948
 800a250:	20019954 	.word	0x20019954

0800a254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a260:	4b27      	ldr	r3, [pc, #156]	; (800a300 <prvHeapInit+0xac>)
 800a262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00c      	beq.n	800a288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3307      	adds	r3, #7
 800a272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	4a1f      	ldr	r2, [pc, #124]	; (800a300 <prvHeapInit+0xac>)
 800a284:	4413      	add	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a28c:	4a1d      	ldr	r2, [pc, #116]	; (800a304 <prvHeapInit+0xb0>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a292:	4b1c      	ldr	r3, [pc, #112]	; (800a304 <prvHeapInit+0xb0>)
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	4413      	add	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2a0:	2208      	movs	r2, #8
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4a15      	ldr	r2, [pc, #84]	; (800a308 <prvHeapInit+0xb4>)
 800a2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <prvHeapInit+0xb4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <prvHeapInit+0xb4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <prvHeapInit+0xb4>)
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <prvHeapInit+0xb8>)
 800a2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4a09      	ldr	r2, [pc, #36]	; (800a310 <prvHeapInit+0xbc>)
 800a2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2ec:	4b09      	ldr	r3, [pc, #36]	; (800a314 <prvHeapInit+0xc0>)
 800a2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2f2:	601a      	str	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20015d3c 	.word	0x20015d3c
 800a304:	2001993c 	.word	0x2001993c
 800a308:	20019944 	.word	0x20019944
 800a30c:	2001994c 	.word	0x2001994c
 800a310:	20019948 	.word	0x20019948
 800a314:	20019958 	.word	0x20019958

0800a318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a320:	4b28      	ldr	r3, [pc, #160]	; (800a3c4 <prvInsertBlockIntoFreeList+0xac>)
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	e002      	b.n	800a32c <prvInsertBlockIntoFreeList+0x14>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	429a      	cmp	r2, r3
 800a334:	d8f7      	bhi.n	800a326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	4413      	add	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d108      	bne.n	800a35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	441a      	add	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d118      	bne.n	800a3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b15      	ldr	r3, [pc, #84]	; (800a3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d00d      	beq.n	800a396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	441a      	add	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e008      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e003      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d002      	beq.n	800a3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	2001993c 	.word	0x2001993c
 800a3c8:	20019944 	.word	0x20019944

0800a3cc <std>:
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3da:	6083      	str	r3, [r0, #8]
 800a3dc:	8181      	strh	r1, [r0, #12]
 800a3de:	6643      	str	r3, [r0, #100]	; 0x64
 800a3e0:	81c2      	strh	r2, [r0, #14]
 800a3e2:	6183      	str	r3, [r0, #24]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	2208      	movs	r2, #8
 800a3e8:	305c      	adds	r0, #92	; 0x5c
 800a3ea:	f000 f9f7 	bl	800a7dc <memset>
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <std+0x58>)
 800a3f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <std+0x5c>)
 800a3f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <std+0x60>)
 800a3f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <std+0x64>)
 800a3fc:	6323      	str	r3, [r4, #48]	; 0x30
 800a3fe:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <std+0x68>)
 800a400:	6224      	str	r4, [r4, #32]
 800a402:	429c      	cmp	r4, r3
 800a404:	d006      	beq.n	800a414 <std+0x48>
 800a406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a40a:	4294      	cmp	r4, r2
 800a40c:	d002      	beq.n	800a414 <std+0x48>
 800a40e:	33d0      	adds	r3, #208	; 0xd0
 800a410:	429c      	cmp	r4, r3
 800a412:	d105      	bne.n	800a420 <std+0x54>
 800a414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f000 baac 	b.w	800a978 <__retarget_lock_init_recursive>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	0800a62d 	.word	0x0800a62d
 800a428:	0800a64f 	.word	0x0800a64f
 800a42c:	0800a687 	.word	0x0800a687
 800a430:	0800a6ab 	.word	0x0800a6ab
 800a434:	2001995c 	.word	0x2001995c

0800a438 <stdio_exit_handler>:
 800a438:	4a02      	ldr	r2, [pc, #8]	; (800a444 <stdio_exit_handler+0xc>)
 800a43a:	4903      	ldr	r1, [pc, #12]	; (800a448 <stdio_exit_handler+0x10>)
 800a43c:	4803      	ldr	r0, [pc, #12]	; (800a44c <stdio_exit_handler+0x14>)
 800a43e:	f000 b869 	b.w	800a514 <_fwalk_sglue>
 800a442:	bf00      	nop
 800a444:	20000024 	.word	0x20000024
 800a448:	0800b241 	.word	0x0800b241
 800a44c:	20000030 	.word	0x20000030

0800a450 <cleanup_stdio>:
 800a450:	6841      	ldr	r1, [r0, #4]
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <cleanup_stdio+0x34>)
 800a454:	4299      	cmp	r1, r3
 800a456:	b510      	push	{r4, lr}
 800a458:	4604      	mov	r4, r0
 800a45a:	d001      	beq.n	800a460 <cleanup_stdio+0x10>
 800a45c:	f000 fef0 	bl	800b240 <_fflush_r>
 800a460:	68a1      	ldr	r1, [r4, #8]
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <cleanup_stdio+0x38>)
 800a464:	4299      	cmp	r1, r3
 800a466:	d002      	beq.n	800a46e <cleanup_stdio+0x1e>
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fee9 	bl	800b240 <_fflush_r>
 800a46e:	68e1      	ldr	r1, [r4, #12]
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <cleanup_stdio+0x3c>)
 800a472:	4299      	cmp	r1, r3
 800a474:	d004      	beq.n	800a480 <cleanup_stdio+0x30>
 800a476:	4620      	mov	r0, r4
 800a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a47c:	f000 bee0 	b.w	800b240 <_fflush_r>
 800a480:	bd10      	pop	{r4, pc}
 800a482:	bf00      	nop
 800a484:	2001995c 	.word	0x2001995c
 800a488:	200199c4 	.word	0x200199c4
 800a48c:	20019a2c 	.word	0x20019a2c

0800a490 <global_stdio_init.part.0>:
 800a490:	b510      	push	{r4, lr}
 800a492:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <global_stdio_init.part.0+0x30>)
 800a494:	4c0b      	ldr	r4, [pc, #44]	; (800a4c4 <global_stdio_init.part.0+0x34>)
 800a496:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <global_stdio_init.part.0+0x38>)
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	4620      	mov	r0, r4
 800a49c:	2200      	movs	r2, #0
 800a49e:	2104      	movs	r1, #4
 800a4a0:	f7ff ff94 	bl	800a3cc <std>
 800a4a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	2109      	movs	r1, #9
 800a4ac:	f7ff ff8e 	bl	800a3cc <std>
 800a4b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ba:	2112      	movs	r1, #18
 800a4bc:	f7ff bf86 	b.w	800a3cc <std>
 800a4c0:	20019a94 	.word	0x20019a94
 800a4c4:	2001995c 	.word	0x2001995c
 800a4c8:	0800a439 	.word	0x0800a439

0800a4cc <__sfp_lock_acquire>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__sfp_lock_acquire+0x8>)
 800a4ce:	f000 ba54 	b.w	800a97a <__retarget_lock_acquire_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20019a9d 	.word	0x20019a9d

0800a4d8 <__sfp_lock_release>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__sfp_lock_release+0x8>)
 800a4da:	f000 ba4f 	b.w	800a97c <__retarget_lock_release_recursive>
 800a4de:	bf00      	nop
 800a4e0:	20019a9d 	.word	0x20019a9d

0800a4e4 <__sinit>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	f7ff fff0 	bl	800a4cc <__sfp_lock_acquire>
 800a4ec:	6a23      	ldr	r3, [r4, #32]
 800a4ee:	b11b      	cbz	r3, 800a4f8 <__sinit+0x14>
 800a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f4:	f7ff bff0 	b.w	800a4d8 <__sfp_lock_release>
 800a4f8:	4b04      	ldr	r3, [pc, #16]	; (800a50c <__sinit+0x28>)
 800a4fa:	6223      	str	r3, [r4, #32]
 800a4fc:	4b04      	ldr	r3, [pc, #16]	; (800a510 <__sinit+0x2c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f5      	bne.n	800a4f0 <__sinit+0xc>
 800a504:	f7ff ffc4 	bl	800a490 <global_stdio_init.part.0>
 800a508:	e7f2      	b.n	800a4f0 <__sinit+0xc>
 800a50a:	bf00      	nop
 800a50c:	0800a451 	.word	0x0800a451
 800a510:	20019a94 	.word	0x20019a94

0800a514 <_fwalk_sglue>:
 800a514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a518:	4607      	mov	r7, r0
 800a51a:	4688      	mov	r8, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	2600      	movs	r6, #0
 800a520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a524:	f1b9 0901 	subs.w	r9, r9, #1
 800a528:	d505      	bpl.n	800a536 <_fwalk_sglue+0x22>
 800a52a:	6824      	ldr	r4, [r4, #0]
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d1f7      	bne.n	800a520 <_fwalk_sglue+0xc>
 800a530:	4630      	mov	r0, r6
 800a532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d907      	bls.n	800a54c <_fwalk_sglue+0x38>
 800a53c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a540:	3301      	adds	r3, #1
 800a542:	d003      	beq.n	800a54c <_fwalk_sglue+0x38>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	47c0      	blx	r8
 800a54a:	4306      	orrs	r6, r0
 800a54c:	3568      	adds	r5, #104	; 0x68
 800a54e:	e7e9      	b.n	800a524 <_fwalk_sglue+0x10>

0800a550 <iprintf>:
 800a550:	b40f      	push	{r0, r1, r2, r3}
 800a552:	b507      	push	{r0, r1, r2, lr}
 800a554:	4906      	ldr	r1, [pc, #24]	; (800a570 <iprintf+0x20>)
 800a556:	ab04      	add	r3, sp, #16
 800a558:	6808      	ldr	r0, [r1, #0]
 800a55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55e:	6881      	ldr	r1, [r0, #8]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f000 fb3d 	bl	800abe0 <_vfiprintf_r>
 800a566:	b003      	add	sp, #12
 800a568:	f85d eb04 	ldr.w	lr, [sp], #4
 800a56c:	b004      	add	sp, #16
 800a56e:	4770      	bx	lr
 800a570:	2000007c 	.word	0x2000007c

0800a574 <_puts_r>:
 800a574:	6a03      	ldr	r3, [r0, #32]
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	6884      	ldr	r4, [r0, #8]
 800a57a:	4605      	mov	r5, r0
 800a57c:	460e      	mov	r6, r1
 800a57e:	b90b      	cbnz	r3, 800a584 <_puts_r+0x10>
 800a580:	f7ff ffb0 	bl	800a4e4 <__sinit>
 800a584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a586:	07db      	lsls	r3, r3, #31
 800a588:	d405      	bmi.n	800a596 <_puts_r+0x22>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	0598      	lsls	r0, r3, #22
 800a58e:	d402      	bmi.n	800a596 <_puts_r+0x22>
 800a590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a592:	f000 f9f2 	bl	800a97a <__retarget_lock_acquire_recursive>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	0719      	lsls	r1, r3, #28
 800a59a:	d513      	bpl.n	800a5c4 <_puts_r+0x50>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	b18b      	cbz	r3, 800a5c4 <_puts_r+0x50>
 800a5a0:	3e01      	subs	r6, #1
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	60a3      	str	r3, [r4, #8]
 800a5ac:	b9e9      	cbnz	r1, 800a5ea <_puts_r+0x76>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da2e      	bge.n	800a610 <_puts_r+0x9c>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	210a      	movs	r1, #10
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 f87b 	bl	800a6b2 <__swbuf_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d007      	beq.n	800a5d0 <_puts_r+0x5c>
 800a5c0:	250a      	movs	r5, #10
 800a5c2:	e007      	b.n	800a5d4 <_puts_r+0x60>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 f8b0 	bl	800a72c <__swsetup_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0e7      	beq.n	800a5a0 <_puts_r+0x2c>
 800a5d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5d6:	07da      	lsls	r2, r3, #31
 800a5d8:	d405      	bmi.n	800a5e6 <_puts_r+0x72>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	059b      	lsls	r3, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_puts_r+0x72>
 800a5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e2:	f000 f9cb 	bl	800a97c <__retarget_lock_release_recursive>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da04      	bge.n	800a5f8 <_puts_r+0x84>
 800a5ee:	69a2      	ldr	r2, [r4, #24]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	dc06      	bgt.n	800a602 <_puts_r+0x8e>
 800a5f4:	290a      	cmp	r1, #10
 800a5f6:	d004      	beq.n	800a602 <_puts_r+0x8e>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	6022      	str	r2, [r4, #0]
 800a5fe:	7019      	strb	r1, [r3, #0]
 800a600:	e7cf      	b.n	800a5a2 <_puts_r+0x2e>
 800a602:	4622      	mov	r2, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f854 	bl	800a6b2 <__swbuf_r>
 800a60a:	3001      	adds	r0, #1
 800a60c:	d1c9      	bne.n	800a5a2 <_puts_r+0x2e>
 800a60e:	e7df      	b.n	800a5d0 <_puts_r+0x5c>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	250a      	movs	r5, #10
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	6022      	str	r2, [r4, #0]
 800a618:	701d      	strb	r5, [r3, #0]
 800a61a:	e7db      	b.n	800a5d4 <_puts_r+0x60>

0800a61c <puts>:
 800a61c:	4b02      	ldr	r3, [pc, #8]	; (800a628 <puts+0xc>)
 800a61e:	4601      	mov	r1, r0
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	f7ff bfa7 	b.w	800a574 <_puts_r>
 800a626:	bf00      	nop
 800a628:	2000007c 	.word	0x2000007c

0800a62c <__sread>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	f000 f952 	bl	800a8dc <_read_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	bfab      	itete	ge
 800a63c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a63e:	89a3      	ldrhlt	r3, [r4, #12]
 800a640:	181b      	addge	r3, r3, r0
 800a642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a646:	bfac      	ite	ge
 800a648:	6563      	strge	r3, [r4, #84]	; 0x54
 800a64a:	81a3      	strhlt	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__swrite>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	461f      	mov	r7, r3
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	05db      	lsls	r3, r3, #23
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	d505      	bpl.n	800a66c <__swrite+0x1e>
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f000 f926 	bl	800a8b8 <_lseek_r>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	f000 b93d 	b.w	800a900 <_write_r>

0800a686 <__sseek>:
 800a686:	b510      	push	{r4, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68e:	f000 f913 	bl	800a8b8 <_lseek_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	bf15      	itete	ne
 800a698:	6560      	strne	r0, [r4, #84]	; 0x54
 800a69a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a69e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6a2:	81a3      	strheq	r3, [r4, #12]
 800a6a4:	bf18      	it	ne
 800a6a6:	81a3      	strhne	r3, [r4, #12]
 800a6a8:	bd10      	pop	{r4, pc}

0800a6aa <__sclose>:
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 b89d 	b.w	800a7ec <_close_r>

0800a6b2 <__swbuf_r>:
 800a6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b4:	460e      	mov	r6, r1
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	b118      	cbz	r0, 800a6c4 <__swbuf_r+0x12>
 800a6bc:	6a03      	ldr	r3, [r0, #32]
 800a6be:	b90b      	cbnz	r3, 800a6c4 <__swbuf_r+0x12>
 800a6c0:	f7ff ff10 	bl	800a4e4 <__sinit>
 800a6c4:	69a3      	ldr	r3, [r4, #24]
 800a6c6:	60a3      	str	r3, [r4, #8]
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	071a      	lsls	r2, r3, #28
 800a6cc:	d525      	bpl.n	800a71a <__swbuf_r+0x68>
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	b31b      	cbz	r3, 800a71a <__swbuf_r+0x68>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	6922      	ldr	r2, [r4, #16]
 800a6d6:	1a98      	subs	r0, r3, r2
 800a6d8:	6963      	ldr	r3, [r4, #20]
 800a6da:	b2f6      	uxtb	r6, r6
 800a6dc:	4283      	cmp	r3, r0
 800a6de:	4637      	mov	r7, r6
 800a6e0:	dc04      	bgt.n	800a6ec <__swbuf_r+0x3a>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f000 fdab 	bl	800b240 <_fflush_r>
 800a6ea:	b9e0      	cbnz	r0, 800a726 <__swbuf_r+0x74>
 800a6ec:	68a3      	ldr	r3, [r4, #8]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	60a3      	str	r3, [r4, #8]
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	701e      	strb	r6, [r3, #0]
 800a6fa:	6962      	ldr	r2, [r4, #20]
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d004      	beq.n	800a70c <__swbuf_r+0x5a>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	07db      	lsls	r3, r3, #31
 800a706:	d506      	bpl.n	800a716 <__swbuf_r+0x64>
 800a708:	2e0a      	cmp	r6, #10
 800a70a:	d104      	bne.n	800a716 <__swbuf_r+0x64>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fd96 	bl	800b240 <_fflush_r>
 800a714:	b938      	cbnz	r0, 800a726 <__swbuf_r+0x74>
 800a716:	4638      	mov	r0, r7
 800a718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 f805 	bl	800a72c <__swsetup_r>
 800a722:	2800      	cmp	r0, #0
 800a724:	d0d5      	beq.n	800a6d2 <__swbuf_r+0x20>
 800a726:	f04f 37ff 	mov.w	r7, #4294967295
 800a72a:	e7f4      	b.n	800a716 <__swbuf_r+0x64>

0800a72c <__swsetup_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4b2a      	ldr	r3, [pc, #168]	; (800a7d8 <__swsetup_r+0xac>)
 800a730:	4605      	mov	r5, r0
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	460c      	mov	r4, r1
 800a736:	b118      	cbz	r0, 800a740 <__swsetup_r+0x14>
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b90b      	cbnz	r3, 800a740 <__swsetup_r+0x14>
 800a73c:	f7ff fed2 	bl	800a4e4 <__sinit>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a746:	0718      	lsls	r0, r3, #28
 800a748:	d422      	bmi.n	800a790 <__swsetup_r+0x64>
 800a74a:	06d9      	lsls	r1, r3, #27
 800a74c:	d407      	bmi.n	800a75e <__swsetup_r+0x32>
 800a74e:	2309      	movs	r3, #9
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e034      	b.n	800a7c8 <__swsetup_r+0x9c>
 800a75e:	0758      	lsls	r0, r3, #29
 800a760:	d512      	bpl.n	800a788 <__swsetup_r+0x5c>
 800a762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a764:	b141      	cbz	r1, 800a778 <__swsetup_r+0x4c>
 800a766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a76a:	4299      	cmp	r1, r3
 800a76c:	d002      	beq.n	800a774 <__swsetup_r+0x48>
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 f914 	bl	800a99c <_free_r>
 800a774:	2300      	movs	r3, #0
 800a776:	6363      	str	r3, [r4, #52]	; 0x34
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	2300      	movs	r3, #0
 800a782:	6063      	str	r3, [r4, #4]
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	f043 0308 	orr.w	r3, r3, #8
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b94b      	cbnz	r3, 800a7a8 <__swsetup_r+0x7c>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a79a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79e:	d003      	beq.n	800a7a8 <__swsetup_r+0x7c>
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 fd9a 	bl	800b2dc <__smakebuf_r>
 800a7a8:	89a0      	ldrh	r0, [r4, #12]
 800a7aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7ae:	f010 0301 	ands.w	r3, r0, #1
 800a7b2:	d00a      	beq.n	800a7ca <__swsetup_r+0x9e>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60a3      	str	r3, [r4, #8]
 800a7b8:	6963      	ldr	r3, [r4, #20]
 800a7ba:	425b      	negs	r3, r3
 800a7bc:	61a3      	str	r3, [r4, #24]
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	b943      	cbnz	r3, 800a7d4 <__swsetup_r+0xa8>
 800a7c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c6:	d1c4      	bne.n	800a752 <__swsetup_r+0x26>
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ca:	0781      	lsls	r1, r0, #30
 800a7cc:	bf58      	it	pl
 800a7ce:	6963      	ldrpl	r3, [r4, #20]
 800a7d0:	60a3      	str	r3, [r4, #8]
 800a7d2:	e7f4      	b.n	800a7be <__swsetup_r+0x92>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	e7f7      	b.n	800a7c8 <__swsetup_r+0x9c>
 800a7d8:	2000007c 	.word	0x2000007c

0800a7dc <memset>:
 800a7dc:	4402      	add	r2, r0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d100      	bne.n	800a7e6 <memset+0xa>
 800a7e4:	4770      	bx	lr
 800a7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ea:	e7f9      	b.n	800a7e0 <memset+0x4>

0800a7ec <_close_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_close_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f6 fba9 	bl	8000f4e <_close>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_close_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_close_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20019a98 	.word	0x20019a98

0800a80c <_reclaim_reent>:
 800a80c:	4b29      	ldr	r3, [pc, #164]	; (800a8b4 <_reclaim_reent+0xa8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4283      	cmp	r3, r0
 800a812:	b570      	push	{r4, r5, r6, lr}
 800a814:	4604      	mov	r4, r0
 800a816:	d04b      	beq.n	800a8b0 <_reclaim_reent+0xa4>
 800a818:	69c3      	ldr	r3, [r0, #28]
 800a81a:	b143      	cbz	r3, 800a82e <_reclaim_reent+0x22>
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d144      	bne.n	800a8ac <_reclaim_reent+0xa0>
 800a822:	69e3      	ldr	r3, [r4, #28]
 800a824:	6819      	ldr	r1, [r3, #0]
 800a826:	b111      	cbz	r1, 800a82e <_reclaim_reent+0x22>
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 f8b7 	bl	800a99c <_free_r>
 800a82e:	6961      	ldr	r1, [r4, #20]
 800a830:	b111      	cbz	r1, 800a838 <_reclaim_reent+0x2c>
 800a832:	4620      	mov	r0, r4
 800a834:	f000 f8b2 	bl	800a99c <_free_r>
 800a838:	69e1      	ldr	r1, [r4, #28]
 800a83a:	b111      	cbz	r1, 800a842 <_reclaim_reent+0x36>
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 f8ad 	bl	800a99c <_free_r>
 800a842:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a844:	b111      	cbz	r1, 800a84c <_reclaim_reent+0x40>
 800a846:	4620      	mov	r0, r4
 800a848:	f000 f8a8 	bl	800a99c <_free_r>
 800a84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84e:	b111      	cbz	r1, 800a856 <_reclaim_reent+0x4a>
 800a850:	4620      	mov	r0, r4
 800a852:	f000 f8a3 	bl	800a99c <_free_r>
 800a856:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a858:	b111      	cbz	r1, 800a860 <_reclaim_reent+0x54>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 f89e 	bl	800a99c <_free_r>
 800a860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a862:	b111      	cbz	r1, 800a86a <_reclaim_reent+0x5e>
 800a864:	4620      	mov	r0, r4
 800a866:	f000 f899 	bl	800a99c <_free_r>
 800a86a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a86c:	b111      	cbz	r1, 800a874 <_reclaim_reent+0x68>
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 f894 	bl	800a99c <_free_r>
 800a874:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a876:	b111      	cbz	r1, 800a87e <_reclaim_reent+0x72>
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f88f 	bl	800a99c <_free_r>
 800a87e:	6a23      	ldr	r3, [r4, #32]
 800a880:	b1b3      	cbz	r3, 800a8b0 <_reclaim_reent+0xa4>
 800a882:	4620      	mov	r0, r4
 800a884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a888:	4718      	bx	r3
 800a88a:	5949      	ldr	r1, [r1, r5]
 800a88c:	b941      	cbnz	r1, 800a8a0 <_reclaim_reent+0x94>
 800a88e:	3504      	adds	r5, #4
 800a890:	69e3      	ldr	r3, [r4, #28]
 800a892:	2d80      	cmp	r5, #128	; 0x80
 800a894:	68d9      	ldr	r1, [r3, #12]
 800a896:	d1f8      	bne.n	800a88a <_reclaim_reent+0x7e>
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 f87f 	bl	800a99c <_free_r>
 800a89e:	e7c0      	b.n	800a822 <_reclaim_reent+0x16>
 800a8a0:	680e      	ldr	r6, [r1, #0]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f87a 	bl	800a99c <_free_r>
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	e7ef      	b.n	800a88c <_reclaim_reent+0x80>
 800a8ac:	2500      	movs	r5, #0
 800a8ae:	e7ef      	b.n	800a890 <_reclaim_reent+0x84>
 800a8b0:	bd70      	pop	{r4, r5, r6, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000007c 	.word	0x2000007c

0800a8b8 <_lseek_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d07      	ldr	r5, [pc, #28]	; (800a8d8 <_lseek_r+0x20>)
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f7f6 fb68 	bl	8000f9c <_lseek>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_lseek_r+0x1e>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_lseek_r+0x1e>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20019a98 	.word	0x20019a98

0800a8dc <_read_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d07      	ldr	r5, [pc, #28]	; (800a8fc <_read_r+0x20>)
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7f6 fb12 	bl	8000f14 <_read>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_read_r+0x1e>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_read_r+0x1e>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20019a98 	.word	0x20019a98

0800a900 <_write_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_write_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f6 f8be 	bl	8000a90 <_write>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_write_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_write_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20019a98 	.word	0x20019a98

0800a924 <__errno>:
 800a924:	4b01      	ldr	r3, [pc, #4]	; (800a92c <__errno+0x8>)
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	2000007c 	.word	0x2000007c

0800a930 <__libc_init_array>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4d0d      	ldr	r5, [pc, #52]	; (800a968 <__libc_init_array+0x38>)
 800a934:	4c0d      	ldr	r4, [pc, #52]	; (800a96c <__libc_init_array+0x3c>)
 800a936:	1b64      	subs	r4, r4, r5
 800a938:	10a4      	asrs	r4, r4, #2
 800a93a:	2600      	movs	r6, #0
 800a93c:	42a6      	cmp	r6, r4
 800a93e:	d109      	bne.n	800a954 <__libc_init_array+0x24>
 800a940:	4d0b      	ldr	r5, [pc, #44]	; (800a970 <__libc_init_array+0x40>)
 800a942:	4c0c      	ldr	r4, [pc, #48]	; (800a974 <__libc_init_array+0x44>)
 800a944:	f000 fd38 	bl	800b3b8 <_init>
 800a948:	1b64      	subs	r4, r4, r5
 800a94a:	10a4      	asrs	r4, r4, #2
 800a94c:	2600      	movs	r6, #0
 800a94e:	42a6      	cmp	r6, r4
 800a950:	d105      	bne.n	800a95e <__libc_init_array+0x2e>
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	f855 3b04 	ldr.w	r3, [r5], #4
 800a958:	4798      	blx	r3
 800a95a:	3601      	adds	r6, #1
 800a95c:	e7ee      	b.n	800a93c <__libc_init_array+0xc>
 800a95e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a962:	4798      	blx	r3
 800a964:	3601      	adds	r6, #1
 800a966:	e7f2      	b.n	800a94e <__libc_init_array+0x1e>
 800a968:	0800b8a0 	.word	0x0800b8a0
 800a96c:	0800b8a0 	.word	0x0800b8a0
 800a970:	0800b8a0 	.word	0x0800b8a0
 800a974:	0800b8a4 	.word	0x0800b8a4

0800a978 <__retarget_lock_init_recursive>:
 800a978:	4770      	bx	lr

0800a97a <__retarget_lock_acquire_recursive>:
 800a97a:	4770      	bx	lr

0800a97c <__retarget_lock_release_recursive>:
 800a97c:	4770      	bx	lr

0800a97e <memcpy>:
 800a97e:	440a      	add	r2, r1
 800a980:	4291      	cmp	r1, r2
 800a982:	f100 33ff 	add.w	r3, r0, #4294967295
 800a986:	d100      	bne.n	800a98a <memcpy+0xc>
 800a988:	4770      	bx	lr
 800a98a:	b510      	push	{r4, lr}
 800a98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a990:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a994:	4291      	cmp	r1, r2
 800a996:	d1f9      	bne.n	800a98c <memcpy+0xe>
 800a998:	bd10      	pop	{r4, pc}
	...

0800a99c <_free_r>:
 800a99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a99e:	2900      	cmp	r1, #0
 800a9a0:	d044      	beq.n	800aa2c <_free_r+0x90>
 800a9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9a6:	9001      	str	r0, [sp, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a9ae:	bfb8      	it	lt
 800a9b0:	18e4      	addlt	r4, r4, r3
 800a9b2:	f000 f8df 	bl	800ab74 <__malloc_lock>
 800a9b6:	4a1e      	ldr	r2, [pc, #120]	; (800aa30 <_free_r+0x94>)
 800a9b8:	9801      	ldr	r0, [sp, #4]
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	b933      	cbnz	r3, 800a9cc <_free_r+0x30>
 800a9be:	6063      	str	r3, [r4, #4]
 800a9c0:	6014      	str	r4, [r2, #0]
 800a9c2:	b003      	add	sp, #12
 800a9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9c8:	f000 b8da 	b.w	800ab80 <__malloc_unlock>
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d908      	bls.n	800a9e2 <_free_r+0x46>
 800a9d0:	6825      	ldr	r5, [r4, #0]
 800a9d2:	1961      	adds	r1, r4, r5
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	bf01      	itttt	eq
 800a9d8:	6819      	ldreq	r1, [r3, #0]
 800a9da:	685b      	ldreq	r3, [r3, #4]
 800a9dc:	1949      	addeq	r1, r1, r5
 800a9de:	6021      	streq	r1, [r4, #0]
 800a9e0:	e7ed      	b.n	800a9be <_free_r+0x22>
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b10b      	cbz	r3, 800a9ec <_free_r+0x50>
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d9fa      	bls.n	800a9e2 <_free_r+0x46>
 800a9ec:	6811      	ldr	r1, [r2, #0]
 800a9ee:	1855      	adds	r5, r2, r1
 800a9f0:	42a5      	cmp	r5, r4
 800a9f2:	d10b      	bne.n	800aa0c <_free_r+0x70>
 800a9f4:	6824      	ldr	r4, [r4, #0]
 800a9f6:	4421      	add	r1, r4
 800a9f8:	1854      	adds	r4, r2, r1
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	6011      	str	r1, [r2, #0]
 800a9fe:	d1e0      	bne.n	800a9c2 <_free_r+0x26>
 800aa00:	681c      	ldr	r4, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	6053      	str	r3, [r2, #4]
 800aa06:	440c      	add	r4, r1
 800aa08:	6014      	str	r4, [r2, #0]
 800aa0a:	e7da      	b.n	800a9c2 <_free_r+0x26>
 800aa0c:	d902      	bls.n	800aa14 <_free_r+0x78>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	e7d6      	b.n	800a9c2 <_free_r+0x26>
 800aa14:	6825      	ldr	r5, [r4, #0]
 800aa16:	1961      	adds	r1, r4, r5
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	bf04      	itt	eq
 800aa1c:	6819      	ldreq	r1, [r3, #0]
 800aa1e:	685b      	ldreq	r3, [r3, #4]
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	bf04      	itt	eq
 800aa24:	1949      	addeq	r1, r1, r5
 800aa26:	6021      	streq	r1, [r4, #0]
 800aa28:	6054      	str	r4, [r2, #4]
 800aa2a:	e7ca      	b.n	800a9c2 <_free_r+0x26>
 800aa2c:	b003      	add	sp, #12
 800aa2e:	bd30      	pop	{r4, r5, pc}
 800aa30:	20019aa0 	.word	0x20019aa0

0800aa34 <sbrk_aligned>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4e0e      	ldr	r6, [pc, #56]	; (800aa70 <sbrk_aligned+0x3c>)
 800aa38:	460c      	mov	r4, r1
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	b911      	cbnz	r1, 800aa46 <sbrk_aligned+0x12>
 800aa40:	f000 fcaa 	bl	800b398 <_sbrk_r>
 800aa44:	6030      	str	r0, [r6, #0]
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 fca5 	bl	800b398 <_sbrk_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d00a      	beq.n	800aa68 <sbrk_aligned+0x34>
 800aa52:	1cc4      	adds	r4, r0, #3
 800aa54:	f024 0403 	bic.w	r4, r4, #3
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d007      	beq.n	800aa6c <sbrk_aligned+0x38>
 800aa5c:	1a21      	subs	r1, r4, r0
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f000 fc9a 	bl	800b398 <_sbrk_r>
 800aa64:	3001      	adds	r0, #1
 800aa66:	d101      	bne.n	800aa6c <sbrk_aligned+0x38>
 800aa68:	f04f 34ff 	mov.w	r4, #4294967295
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	20019aa4 	.word	0x20019aa4

0800aa74 <_malloc_r>:
 800aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa78:	1ccd      	adds	r5, r1, #3
 800aa7a:	f025 0503 	bic.w	r5, r5, #3
 800aa7e:	3508      	adds	r5, #8
 800aa80:	2d0c      	cmp	r5, #12
 800aa82:	bf38      	it	cc
 800aa84:	250c      	movcc	r5, #12
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	4607      	mov	r7, r0
 800aa8a:	db01      	blt.n	800aa90 <_malloc_r+0x1c>
 800aa8c:	42a9      	cmp	r1, r5
 800aa8e:	d905      	bls.n	800aa9c <_malloc_r+0x28>
 800aa90:	230c      	movs	r3, #12
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	2600      	movs	r6, #0
 800aa96:	4630      	mov	r0, r6
 800aa98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab70 <_malloc_r+0xfc>
 800aaa0:	f000 f868 	bl	800ab74 <__malloc_lock>
 800aaa4:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa8:	461c      	mov	r4, r3
 800aaaa:	bb5c      	cbnz	r4, 800ab04 <_malloc_r+0x90>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff ffc0 	bl	800aa34 <sbrk_aligned>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	4604      	mov	r4, r0
 800aab8:	d155      	bne.n	800ab66 <_malloc_r+0xf2>
 800aaba:	f8d8 4000 	ldr.w	r4, [r8]
 800aabe:	4626      	mov	r6, r4
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	d145      	bne.n	800ab50 <_malloc_r+0xdc>
 800aac4:	2c00      	cmp	r4, #0
 800aac6:	d048      	beq.n	800ab5a <_malloc_r+0xe6>
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	4631      	mov	r1, r6
 800aacc:	4638      	mov	r0, r7
 800aace:	eb04 0903 	add.w	r9, r4, r3
 800aad2:	f000 fc61 	bl	800b398 <_sbrk_r>
 800aad6:	4581      	cmp	r9, r0
 800aad8:	d13f      	bne.n	800ab5a <_malloc_r+0xe6>
 800aada:	6821      	ldr	r1, [r4, #0]
 800aadc:	1a6d      	subs	r5, r5, r1
 800aade:	4629      	mov	r1, r5
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7ff ffa7 	bl	800aa34 <sbrk_aligned>
 800aae6:	3001      	adds	r0, #1
 800aae8:	d037      	beq.n	800ab5a <_malloc_r+0xe6>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	442b      	add	r3, r5
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d038      	beq.n	800ab6a <_malloc_r+0xf6>
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	42a2      	cmp	r2, r4
 800aafc:	d12b      	bne.n	800ab56 <_malloc_r+0xe2>
 800aafe:	2200      	movs	r2, #0
 800ab00:	605a      	str	r2, [r3, #4]
 800ab02:	e00f      	b.n	800ab24 <_malloc_r+0xb0>
 800ab04:	6822      	ldr	r2, [r4, #0]
 800ab06:	1b52      	subs	r2, r2, r5
 800ab08:	d41f      	bmi.n	800ab4a <_malloc_r+0xd6>
 800ab0a:	2a0b      	cmp	r2, #11
 800ab0c:	d917      	bls.n	800ab3e <_malloc_r+0xca>
 800ab0e:	1961      	adds	r1, r4, r5
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	6025      	str	r5, [r4, #0]
 800ab14:	bf18      	it	ne
 800ab16:	6059      	strne	r1, [r3, #4]
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	bf08      	it	eq
 800ab1c:	f8c8 1000 	streq.w	r1, [r8]
 800ab20:	5162      	str	r2, [r4, r5]
 800ab22:	604b      	str	r3, [r1, #4]
 800ab24:	4638      	mov	r0, r7
 800ab26:	f104 060b 	add.w	r6, r4, #11
 800ab2a:	f000 f829 	bl	800ab80 <__malloc_unlock>
 800ab2e:	f026 0607 	bic.w	r6, r6, #7
 800ab32:	1d23      	adds	r3, r4, #4
 800ab34:	1af2      	subs	r2, r6, r3
 800ab36:	d0ae      	beq.n	800aa96 <_malloc_r+0x22>
 800ab38:	1b9b      	subs	r3, r3, r6
 800ab3a:	50a3      	str	r3, [r4, r2]
 800ab3c:	e7ab      	b.n	800aa96 <_malloc_r+0x22>
 800ab3e:	42a3      	cmp	r3, r4
 800ab40:	6862      	ldr	r2, [r4, #4]
 800ab42:	d1dd      	bne.n	800ab00 <_malloc_r+0x8c>
 800ab44:	f8c8 2000 	str.w	r2, [r8]
 800ab48:	e7ec      	b.n	800ab24 <_malloc_r+0xb0>
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	6864      	ldr	r4, [r4, #4]
 800ab4e:	e7ac      	b.n	800aaaa <_malloc_r+0x36>
 800ab50:	4634      	mov	r4, r6
 800ab52:	6876      	ldr	r6, [r6, #4]
 800ab54:	e7b4      	b.n	800aac0 <_malloc_r+0x4c>
 800ab56:	4613      	mov	r3, r2
 800ab58:	e7cc      	b.n	800aaf4 <_malloc_r+0x80>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	603b      	str	r3, [r7, #0]
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f000 f80e 	bl	800ab80 <__malloc_unlock>
 800ab64:	e797      	b.n	800aa96 <_malloc_r+0x22>
 800ab66:	6025      	str	r5, [r4, #0]
 800ab68:	e7dc      	b.n	800ab24 <_malloc_r+0xb0>
 800ab6a:	605b      	str	r3, [r3, #4]
 800ab6c:	deff      	udf	#255	; 0xff
 800ab6e:	bf00      	nop
 800ab70:	20019aa0 	.word	0x20019aa0

0800ab74 <__malloc_lock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__malloc_lock+0x8>)
 800ab76:	f7ff bf00 	b.w	800a97a <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20019a9c 	.word	0x20019a9c

0800ab80 <__malloc_unlock>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__malloc_unlock+0x8>)
 800ab82:	f7ff befb 	b.w	800a97c <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20019a9c 	.word	0x20019a9c

0800ab8c <__sfputc_r>:
 800ab8c:	6893      	ldr	r3, [r2, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	b410      	push	{r4}
 800ab94:	6093      	str	r3, [r2, #8]
 800ab96:	da08      	bge.n	800abaa <__sfputc_r+0x1e>
 800ab98:	6994      	ldr	r4, [r2, #24]
 800ab9a:	42a3      	cmp	r3, r4
 800ab9c:	db01      	blt.n	800aba2 <__sfputc_r+0x16>
 800ab9e:	290a      	cmp	r1, #10
 800aba0:	d103      	bne.n	800abaa <__sfputc_r+0x1e>
 800aba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba6:	f7ff bd84 	b.w	800a6b2 <__swbuf_r>
 800abaa:	6813      	ldr	r3, [r2, #0]
 800abac:	1c58      	adds	r0, r3, #1
 800abae:	6010      	str	r0, [r2, #0]
 800abb0:	7019      	strb	r1, [r3, #0]
 800abb2:	4608      	mov	r0, r1
 800abb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <__sfputs_r>:
 800abba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	4614      	mov	r4, r2
 800abc2:	18d5      	adds	r5, r2, r3
 800abc4:	42ac      	cmp	r4, r5
 800abc6:	d101      	bne.n	800abcc <__sfputs_r+0x12>
 800abc8:	2000      	movs	r0, #0
 800abca:	e007      	b.n	800abdc <__sfputs_r+0x22>
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	463a      	mov	r2, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ffda 	bl	800ab8c <__sfputc_r>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d1f3      	bne.n	800abc4 <__sfputs_r+0xa>
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abe0 <_vfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	460d      	mov	r5, r1
 800abe6:	b09d      	sub	sp, #116	; 0x74
 800abe8:	4614      	mov	r4, r2
 800abea:	4698      	mov	r8, r3
 800abec:	4606      	mov	r6, r0
 800abee:	b118      	cbz	r0, 800abf8 <_vfiprintf_r+0x18>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <_vfiprintf_r+0x18>
 800abf4:	f7ff fc76 	bl	800a4e4 <__sinit>
 800abf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfa:	07d9      	lsls	r1, r3, #31
 800abfc:	d405      	bmi.n	800ac0a <_vfiprintf_r+0x2a>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	059a      	lsls	r2, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_vfiprintf_r+0x2a>
 800ac04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac06:	f7ff feb8 	bl	800a97a <__retarget_lock_acquire_recursive>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	071b      	lsls	r3, r3, #28
 800ac0e:	d501      	bpl.n	800ac14 <_vfiprintf_r+0x34>
 800ac10:	692b      	ldr	r3, [r5, #16]
 800ac12:	b99b      	cbnz	r3, 800ac3c <_vfiprintf_r+0x5c>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff fd88 	bl	800a72c <__swsetup_r>
 800ac1c:	b170      	cbz	r0, 800ac3c <_vfiprintf_r+0x5c>
 800ac1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac20:	07dc      	lsls	r4, r3, #31
 800ac22:	d504      	bpl.n	800ac2e <_vfiprintf_r+0x4e>
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	b01d      	add	sp, #116	; 0x74
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	89ab      	ldrh	r3, [r5, #12]
 800ac30:	0598      	lsls	r0, r3, #22
 800ac32:	d4f7      	bmi.n	800ac24 <_vfiprintf_r+0x44>
 800ac34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac36:	f7ff fea1 	bl	800a97c <__retarget_lock_release_recursive>
 800ac3a:	e7f3      	b.n	800ac24 <_vfiprintf_r+0x44>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac40:	2320      	movs	r3, #32
 800ac42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac4a:	2330      	movs	r3, #48	; 0x30
 800ac4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae00 <_vfiprintf_r+0x220>
 800ac50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac54:	f04f 0901 	mov.w	r9, #1
 800ac58:	4623      	mov	r3, r4
 800ac5a:	469a      	mov	sl, r3
 800ac5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac60:	b10a      	cbz	r2, 800ac66 <_vfiprintf_r+0x86>
 800ac62:	2a25      	cmp	r2, #37	; 0x25
 800ac64:	d1f9      	bne.n	800ac5a <_vfiprintf_r+0x7a>
 800ac66:	ebba 0b04 	subs.w	fp, sl, r4
 800ac6a:	d00b      	beq.n	800ac84 <_vfiprintf_r+0xa4>
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	4622      	mov	r2, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff ffa1 	bl	800abba <__sfputs_r>
 800ac78:	3001      	adds	r0, #1
 800ac7a:	f000 80a9 	beq.w	800add0 <_vfiprintf_r+0x1f0>
 800ac7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac80:	445a      	add	r2, fp
 800ac82:	9209      	str	r2, [sp, #36]	; 0x24
 800ac84:	f89a 3000 	ldrb.w	r3, [sl]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 80a1 	beq.w	800add0 <_vfiprintf_r+0x1f0>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295
 800ac94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac98:	f10a 0a01 	add.w	sl, sl, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	9307      	str	r3, [sp, #28]
 800aca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aca4:	931a      	str	r3, [sp, #104]	; 0x68
 800aca6:	4654      	mov	r4, sl
 800aca8:	2205      	movs	r2, #5
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_vfiprintf_r+0x220>)
 800acb0:	f7f5 fa96 	bl	80001e0 <memchr>
 800acb4:	9a04      	ldr	r2, [sp, #16]
 800acb6:	b9d8      	cbnz	r0, 800acf0 <_vfiprintf_r+0x110>
 800acb8:	06d1      	lsls	r1, r2, #27
 800acba:	bf44      	itt	mi
 800acbc:	2320      	movmi	r3, #32
 800acbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc2:	0713      	lsls	r3, r2, #28
 800acc4:	bf44      	itt	mi
 800acc6:	232b      	movmi	r3, #43	; 0x2b
 800acc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800accc:	f89a 3000 	ldrb.w	r3, [sl]
 800acd0:	2b2a      	cmp	r3, #42	; 0x2a
 800acd2:	d015      	beq.n	800ad00 <_vfiprintf_r+0x120>
 800acd4:	9a07      	ldr	r2, [sp, #28]
 800acd6:	4654      	mov	r4, sl
 800acd8:	2000      	movs	r0, #0
 800acda:	f04f 0c0a 	mov.w	ip, #10
 800acde:	4621      	mov	r1, r4
 800ace0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace4:	3b30      	subs	r3, #48	; 0x30
 800ace6:	2b09      	cmp	r3, #9
 800ace8:	d94d      	bls.n	800ad86 <_vfiprintf_r+0x1a6>
 800acea:	b1b0      	cbz	r0, 800ad1a <_vfiprintf_r+0x13a>
 800acec:	9207      	str	r2, [sp, #28]
 800acee:	e014      	b.n	800ad1a <_vfiprintf_r+0x13a>
 800acf0:	eba0 0308 	sub.w	r3, r0, r8
 800acf4:	fa09 f303 	lsl.w	r3, r9, r3
 800acf8:	4313      	orrs	r3, r2
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	46a2      	mov	sl, r4
 800acfe:	e7d2      	b.n	800aca6 <_vfiprintf_r+0xc6>
 800ad00:	9b03      	ldr	r3, [sp, #12]
 800ad02:	1d19      	adds	r1, r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	9103      	str	r1, [sp, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfbb      	ittet	lt
 800ad0c:	425b      	neglt	r3, r3
 800ad0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad12:	9307      	strge	r3, [sp, #28]
 800ad14:	9307      	strlt	r3, [sp, #28]
 800ad16:	bfb8      	it	lt
 800ad18:	9204      	strlt	r2, [sp, #16]
 800ad1a:	7823      	ldrb	r3, [r4, #0]
 800ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1e:	d10c      	bne.n	800ad3a <_vfiprintf_r+0x15a>
 800ad20:	7863      	ldrb	r3, [r4, #1]
 800ad22:	2b2a      	cmp	r3, #42	; 0x2a
 800ad24:	d134      	bne.n	800ad90 <_vfiprintf_r+0x1b0>
 800ad26:	9b03      	ldr	r3, [sp, #12]
 800ad28:	1d1a      	adds	r2, r3, #4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	9203      	str	r2, [sp, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad36:	3402      	adds	r4, #2
 800ad38:	9305      	str	r3, [sp, #20]
 800ad3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae10 <_vfiprintf_r+0x230>
 800ad3e:	7821      	ldrb	r1, [r4, #0]
 800ad40:	2203      	movs	r2, #3
 800ad42:	4650      	mov	r0, sl
 800ad44:	f7f5 fa4c 	bl	80001e0 <memchr>
 800ad48:	b138      	cbz	r0, 800ad5a <_vfiprintf_r+0x17a>
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	eba0 000a 	sub.w	r0, r0, sl
 800ad50:	2240      	movs	r2, #64	; 0x40
 800ad52:	4082      	lsls	r2, r0
 800ad54:	4313      	orrs	r3, r2
 800ad56:	3401      	adds	r4, #1
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5e:	4829      	ldr	r0, [pc, #164]	; (800ae04 <_vfiprintf_r+0x224>)
 800ad60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad64:	2206      	movs	r2, #6
 800ad66:	f7f5 fa3b 	bl	80001e0 <memchr>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d03f      	beq.n	800adee <_vfiprintf_r+0x20e>
 800ad6e:	4b26      	ldr	r3, [pc, #152]	; (800ae08 <_vfiprintf_r+0x228>)
 800ad70:	bb1b      	cbnz	r3, 800adba <_vfiprintf_r+0x1da>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	3307      	adds	r3, #7
 800ad76:	f023 0307 	bic.w	r3, r3, #7
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	443b      	add	r3, r7
 800ad82:	9309      	str	r3, [sp, #36]	; 0x24
 800ad84:	e768      	b.n	800ac58 <_vfiprintf_r+0x78>
 800ad86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e7a6      	b.n	800acde <_vfiprintf_r+0xfe>
 800ad90:	2300      	movs	r3, #0
 800ad92:	3401      	adds	r4, #1
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	4619      	mov	r1, r3
 800ad98:	f04f 0c0a 	mov.w	ip, #10
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada2:	3a30      	subs	r2, #48	; 0x30
 800ada4:	2a09      	cmp	r2, #9
 800ada6:	d903      	bls.n	800adb0 <_vfiprintf_r+0x1d0>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0c6      	beq.n	800ad3a <_vfiprintf_r+0x15a>
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	e7c4      	b.n	800ad3a <_vfiprintf_r+0x15a>
 800adb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb4:	4604      	mov	r4, r0
 800adb6:	2301      	movs	r3, #1
 800adb8:	e7f0      	b.n	800ad9c <_vfiprintf_r+0x1bc>
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	462a      	mov	r2, r5
 800adc0:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <_vfiprintf_r+0x22c>)
 800adc2:	a904      	add	r1, sp, #16
 800adc4:	4630      	mov	r0, r6
 800adc6:	f3af 8000 	nop.w
 800adca:	4607      	mov	r7, r0
 800adcc:	1c78      	adds	r0, r7, #1
 800adce:	d1d6      	bne.n	800ad7e <_vfiprintf_r+0x19e>
 800add0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800add2:	07d9      	lsls	r1, r3, #31
 800add4:	d405      	bmi.n	800ade2 <_vfiprintf_r+0x202>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	059a      	lsls	r2, r3, #22
 800adda:	d402      	bmi.n	800ade2 <_vfiprintf_r+0x202>
 800addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adde:	f7ff fdcd 	bl	800a97c <__retarget_lock_release_recursive>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	065b      	lsls	r3, r3, #25
 800ade6:	f53f af1d 	bmi.w	800ac24 <_vfiprintf_r+0x44>
 800adea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adec:	e71c      	b.n	800ac28 <_vfiprintf_r+0x48>
 800adee:	ab03      	add	r3, sp, #12
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	462a      	mov	r2, r5
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <_vfiprintf_r+0x22c>)
 800adf6:	a904      	add	r1, sp, #16
 800adf8:	4630      	mov	r0, r6
 800adfa:	f000 f879 	bl	800aef0 <_printf_i>
 800adfe:	e7e4      	b.n	800adca <_vfiprintf_r+0x1ea>
 800ae00:	0800b862 	.word	0x0800b862
 800ae04:	0800b86c 	.word	0x0800b86c
 800ae08:	00000000 	.word	0x00000000
 800ae0c:	0800abbb 	.word	0x0800abbb
 800ae10:	0800b868 	.word	0x0800b868

0800ae14 <_printf_common>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	4616      	mov	r6, r2
 800ae1a:	4699      	mov	r9, r3
 800ae1c:	688a      	ldr	r2, [r1, #8]
 800ae1e:	690b      	ldr	r3, [r1, #16]
 800ae20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae24:	4293      	cmp	r3, r2
 800ae26:	bfb8      	it	lt
 800ae28:	4613      	movlt	r3, r2
 800ae2a:	6033      	str	r3, [r6, #0]
 800ae2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae30:	4607      	mov	r7, r0
 800ae32:	460c      	mov	r4, r1
 800ae34:	b10a      	cbz	r2, 800ae3a <_printf_common+0x26>
 800ae36:	3301      	adds	r3, #1
 800ae38:	6033      	str	r3, [r6, #0]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	0699      	lsls	r1, r3, #26
 800ae3e:	bf42      	ittt	mi
 800ae40:	6833      	ldrmi	r3, [r6, #0]
 800ae42:	3302      	addmi	r3, #2
 800ae44:	6033      	strmi	r3, [r6, #0]
 800ae46:	6825      	ldr	r5, [r4, #0]
 800ae48:	f015 0506 	ands.w	r5, r5, #6
 800ae4c:	d106      	bne.n	800ae5c <_printf_common+0x48>
 800ae4e:	f104 0a19 	add.w	sl, r4, #25
 800ae52:	68e3      	ldr	r3, [r4, #12]
 800ae54:	6832      	ldr	r2, [r6, #0]
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	dc26      	bgt.n	800aeaa <_printf_common+0x96>
 800ae5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae60:	1e13      	subs	r3, r2, #0
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	bf18      	it	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	0692      	lsls	r2, r2, #26
 800ae6a:	d42b      	bmi.n	800aec4 <_printf_common+0xb0>
 800ae6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae70:	4649      	mov	r1, r9
 800ae72:	4638      	mov	r0, r7
 800ae74:	47c0      	blx	r8
 800ae76:	3001      	adds	r0, #1
 800ae78:	d01e      	beq.n	800aeb8 <_printf_common+0xa4>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	6922      	ldr	r2, [r4, #16]
 800ae7e:	f003 0306 	and.w	r3, r3, #6
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	bf02      	ittt	eq
 800ae86:	68e5      	ldreq	r5, [r4, #12]
 800ae88:	6833      	ldreq	r3, [r6, #0]
 800ae8a:	1aed      	subeq	r5, r5, r3
 800ae8c:	68a3      	ldr	r3, [r4, #8]
 800ae8e:	bf0c      	ite	eq
 800ae90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae94:	2500      	movne	r5, #0
 800ae96:	4293      	cmp	r3, r2
 800ae98:	bfc4      	itt	gt
 800ae9a:	1a9b      	subgt	r3, r3, r2
 800ae9c:	18ed      	addgt	r5, r5, r3
 800ae9e:	2600      	movs	r6, #0
 800aea0:	341a      	adds	r4, #26
 800aea2:	42b5      	cmp	r5, r6
 800aea4:	d11a      	bne.n	800aedc <_printf_common+0xc8>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e008      	b.n	800aebc <_printf_common+0xa8>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4652      	mov	r2, sl
 800aeae:	4649      	mov	r1, r9
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	47c0      	blx	r8
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	d103      	bne.n	800aec0 <_printf_common+0xac>
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec0:	3501      	adds	r5, #1
 800aec2:	e7c6      	b.n	800ae52 <_printf_common+0x3e>
 800aec4:	18e1      	adds	r1, r4, r3
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	2030      	movs	r0, #48	; 0x30
 800aeca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aece:	4422      	add	r2, r4
 800aed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aed8:	3302      	adds	r3, #2
 800aeda:	e7c7      	b.n	800ae6c <_printf_common+0x58>
 800aedc:	2301      	movs	r3, #1
 800aede:	4622      	mov	r2, r4
 800aee0:	4649      	mov	r1, r9
 800aee2:	4638      	mov	r0, r7
 800aee4:	47c0      	blx	r8
 800aee6:	3001      	adds	r0, #1
 800aee8:	d0e6      	beq.n	800aeb8 <_printf_common+0xa4>
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7d9      	b.n	800aea2 <_printf_common+0x8e>
	...

0800aef0 <_printf_i>:
 800aef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	7e0f      	ldrb	r7, [r1, #24]
 800aef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aef8:	2f78      	cmp	r7, #120	; 0x78
 800aefa:	4691      	mov	r9, r2
 800aefc:	4680      	mov	r8, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	469a      	mov	sl, r3
 800af02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af06:	d807      	bhi.n	800af18 <_printf_i+0x28>
 800af08:	2f62      	cmp	r7, #98	; 0x62
 800af0a:	d80a      	bhi.n	800af22 <_printf_i+0x32>
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	f000 80d4 	beq.w	800b0ba <_printf_i+0x1ca>
 800af12:	2f58      	cmp	r7, #88	; 0x58
 800af14:	f000 80c0 	beq.w	800b098 <_printf_i+0x1a8>
 800af18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af20:	e03a      	b.n	800af98 <_printf_i+0xa8>
 800af22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af26:	2b15      	cmp	r3, #21
 800af28:	d8f6      	bhi.n	800af18 <_printf_i+0x28>
 800af2a:	a101      	add	r1, pc, #4	; (adr r1, 800af30 <_printf_i+0x40>)
 800af2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af30:	0800af89 	.word	0x0800af89
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af19 	.word	0x0800af19
 800af3c:	0800af19 	.word	0x0800af19
 800af40:	0800af19 	.word	0x0800af19
 800af44:	0800af19 	.word	0x0800af19
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800af19 	.word	0x0800af19
 800af50:	0800af19 	.word	0x0800af19
 800af54:	0800af19 	.word	0x0800af19
 800af58:	0800af19 	.word	0x0800af19
 800af5c:	0800b0a1 	.word	0x0800b0a1
 800af60:	0800afc9 	.word	0x0800afc9
 800af64:	0800b05b 	.word	0x0800b05b
 800af68:	0800af19 	.word	0x0800af19
 800af6c:	0800af19 	.word	0x0800af19
 800af70:	0800b0c3 	.word	0x0800b0c3
 800af74:	0800af19 	.word	0x0800af19
 800af78:	0800afc9 	.word	0x0800afc9
 800af7c:	0800af19 	.word	0x0800af19
 800af80:	0800af19 	.word	0x0800af19
 800af84:	0800b063 	.word	0x0800b063
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	1d1a      	adds	r2, r3, #4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	602a      	str	r2, [r5, #0]
 800af90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af98:	2301      	movs	r3, #1
 800af9a:	e09f      	b.n	800b0dc <_printf_i+0x1ec>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	0607      	lsls	r7, r0, #24
 800afa2:	f103 0104 	add.w	r1, r3, #4
 800afa6:	6029      	str	r1, [r5, #0]
 800afa8:	d501      	bpl.n	800afae <_printf_i+0xbe>
 800afaa:	681e      	ldr	r6, [r3, #0]
 800afac:	e003      	b.n	800afb6 <_printf_i+0xc6>
 800afae:	0646      	lsls	r6, r0, #25
 800afb0:	d5fb      	bpl.n	800afaa <_printf_i+0xba>
 800afb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	da03      	bge.n	800afc2 <_printf_i+0xd2>
 800afba:	232d      	movs	r3, #45	; 0x2d
 800afbc:	4276      	negs	r6, r6
 800afbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc2:	485a      	ldr	r0, [pc, #360]	; (800b12c <_printf_i+0x23c>)
 800afc4:	230a      	movs	r3, #10
 800afc6:	e012      	b.n	800afee <_printf_i+0xfe>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	1d19      	adds	r1, r3, #4
 800afce:	6029      	str	r1, [r5, #0]
 800afd0:	0605      	lsls	r5, r0, #24
 800afd2:	d501      	bpl.n	800afd8 <_printf_i+0xe8>
 800afd4:	681e      	ldr	r6, [r3, #0]
 800afd6:	e002      	b.n	800afde <_printf_i+0xee>
 800afd8:	0641      	lsls	r1, r0, #25
 800afda:	d5fb      	bpl.n	800afd4 <_printf_i+0xe4>
 800afdc:	881e      	ldrh	r6, [r3, #0]
 800afde:	4853      	ldr	r0, [pc, #332]	; (800b12c <_printf_i+0x23c>)
 800afe0:	2f6f      	cmp	r7, #111	; 0x6f
 800afe2:	bf0c      	ite	eq
 800afe4:	2308      	moveq	r3, #8
 800afe6:	230a      	movne	r3, #10
 800afe8:	2100      	movs	r1, #0
 800afea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afee:	6865      	ldr	r5, [r4, #4]
 800aff0:	60a5      	str	r5, [r4, #8]
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	bfa2      	ittt	ge
 800aff6:	6821      	ldrge	r1, [r4, #0]
 800aff8:	f021 0104 	bicge.w	r1, r1, #4
 800affc:	6021      	strge	r1, [r4, #0]
 800affe:	b90e      	cbnz	r6, 800b004 <_printf_i+0x114>
 800b000:	2d00      	cmp	r5, #0
 800b002:	d04b      	beq.n	800b09c <_printf_i+0x1ac>
 800b004:	4615      	mov	r5, r2
 800b006:	fbb6 f1f3 	udiv	r1, r6, r3
 800b00a:	fb03 6711 	mls	r7, r3, r1, r6
 800b00e:	5dc7      	ldrb	r7, [r0, r7]
 800b010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b014:	4637      	mov	r7, r6
 800b016:	42bb      	cmp	r3, r7
 800b018:	460e      	mov	r6, r1
 800b01a:	d9f4      	bls.n	800b006 <_printf_i+0x116>
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	d10b      	bne.n	800b038 <_printf_i+0x148>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	07de      	lsls	r6, r3, #31
 800b024:	d508      	bpl.n	800b038 <_printf_i+0x148>
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4299      	cmp	r1, r3
 800b02c:	bfde      	ittt	le
 800b02e:	2330      	movle	r3, #48	; 0x30
 800b030:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b034:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b038:	1b52      	subs	r2, r2, r5
 800b03a:	6122      	str	r2, [r4, #16]
 800b03c:	f8cd a000 	str.w	sl, [sp]
 800b040:	464b      	mov	r3, r9
 800b042:	aa03      	add	r2, sp, #12
 800b044:	4621      	mov	r1, r4
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff fee4 	bl	800ae14 <_printf_common>
 800b04c:	3001      	adds	r0, #1
 800b04e:	d14a      	bne.n	800b0e6 <_printf_i+0x1f6>
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	b004      	add	sp, #16
 800b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	f043 0320 	orr.w	r3, r3, #32
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	4833      	ldr	r0, [pc, #204]	; (800b130 <_printf_i+0x240>)
 800b064:	2778      	movs	r7, #120	; 0x78
 800b066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	6829      	ldr	r1, [r5, #0]
 800b06e:	061f      	lsls	r7, r3, #24
 800b070:	f851 6b04 	ldr.w	r6, [r1], #4
 800b074:	d402      	bmi.n	800b07c <_printf_i+0x18c>
 800b076:	065f      	lsls	r7, r3, #25
 800b078:	bf48      	it	mi
 800b07a:	b2b6      	uxthmi	r6, r6
 800b07c:	07df      	lsls	r7, r3, #31
 800b07e:	bf48      	it	mi
 800b080:	f043 0320 	orrmi.w	r3, r3, #32
 800b084:	6029      	str	r1, [r5, #0]
 800b086:	bf48      	it	mi
 800b088:	6023      	strmi	r3, [r4, #0]
 800b08a:	b91e      	cbnz	r6, 800b094 <_printf_i+0x1a4>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	f023 0320 	bic.w	r3, r3, #32
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	2310      	movs	r3, #16
 800b096:	e7a7      	b.n	800afe8 <_printf_i+0xf8>
 800b098:	4824      	ldr	r0, [pc, #144]	; (800b12c <_printf_i+0x23c>)
 800b09a:	e7e4      	b.n	800b066 <_printf_i+0x176>
 800b09c:	4615      	mov	r5, r2
 800b09e:	e7bd      	b.n	800b01c <_printf_i+0x12c>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	6826      	ldr	r6, [r4, #0]
 800b0a4:	6961      	ldr	r1, [r4, #20]
 800b0a6:	1d18      	adds	r0, r3, #4
 800b0a8:	6028      	str	r0, [r5, #0]
 800b0aa:	0635      	lsls	r5, r6, #24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	d501      	bpl.n	800b0b4 <_printf_i+0x1c4>
 800b0b0:	6019      	str	r1, [r3, #0]
 800b0b2:	e002      	b.n	800b0ba <_printf_i+0x1ca>
 800b0b4:	0670      	lsls	r0, r6, #25
 800b0b6:	d5fb      	bpl.n	800b0b0 <_printf_i+0x1c0>
 800b0b8:	8019      	strh	r1, [r3, #0]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	4615      	mov	r5, r2
 800b0c0:	e7bc      	b.n	800b03c <_printf_i+0x14c>
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	681d      	ldr	r5, [r3, #0]
 800b0ca:	6862      	ldr	r2, [r4, #4]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f7f5 f886 	bl	80001e0 <memchr>
 800b0d4:	b108      	cbz	r0, 800b0da <_printf_i+0x1ea>
 800b0d6:	1b40      	subs	r0, r0, r5
 800b0d8:	6060      	str	r0, [r4, #4]
 800b0da:	6863      	ldr	r3, [r4, #4]
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e4:	e7aa      	b.n	800b03c <_printf_i+0x14c>
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	47d0      	blx	sl
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d0ad      	beq.n	800b050 <_printf_i+0x160>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	079b      	lsls	r3, r3, #30
 800b0f8:	d413      	bmi.n	800b122 <_printf_i+0x232>
 800b0fa:	68e0      	ldr	r0, [r4, #12]
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	4298      	cmp	r0, r3
 800b100:	bfb8      	it	lt
 800b102:	4618      	movlt	r0, r3
 800b104:	e7a6      	b.n	800b054 <_printf_i+0x164>
 800b106:	2301      	movs	r3, #1
 800b108:	4632      	mov	r2, r6
 800b10a:	4649      	mov	r1, r9
 800b10c:	4640      	mov	r0, r8
 800b10e:	47d0      	blx	sl
 800b110:	3001      	adds	r0, #1
 800b112:	d09d      	beq.n	800b050 <_printf_i+0x160>
 800b114:	3501      	adds	r5, #1
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	9903      	ldr	r1, [sp, #12]
 800b11a:	1a5b      	subs	r3, r3, r1
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	dcf2      	bgt.n	800b106 <_printf_i+0x216>
 800b120:	e7eb      	b.n	800b0fa <_printf_i+0x20a>
 800b122:	2500      	movs	r5, #0
 800b124:	f104 0619 	add.w	r6, r4, #25
 800b128:	e7f5      	b.n	800b116 <_printf_i+0x226>
 800b12a:	bf00      	nop
 800b12c:	0800b873 	.word	0x0800b873
 800b130:	0800b884 	.word	0x0800b884

0800b134 <__sflush_r>:
 800b134:	898a      	ldrh	r2, [r1, #12]
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	4605      	mov	r5, r0
 800b13c:	0710      	lsls	r0, r2, #28
 800b13e:	460c      	mov	r4, r1
 800b140:	d458      	bmi.n	800b1f4 <__sflush_r+0xc0>
 800b142:	684b      	ldr	r3, [r1, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	dc05      	bgt.n	800b154 <__sflush_r+0x20>
 800b148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dc02      	bgt.n	800b154 <__sflush_r+0x20>
 800b14e:	2000      	movs	r0, #0
 800b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b156:	2e00      	cmp	r6, #0
 800b158:	d0f9      	beq.n	800b14e <__sflush_r+0x1a>
 800b15a:	2300      	movs	r3, #0
 800b15c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b160:	682f      	ldr	r7, [r5, #0]
 800b162:	6a21      	ldr	r1, [r4, #32]
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	d032      	beq.n	800b1ce <__sflush_r+0x9a>
 800b168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	075a      	lsls	r2, r3, #29
 800b16e:	d505      	bpl.n	800b17c <__sflush_r+0x48>
 800b170:	6863      	ldr	r3, [r4, #4]
 800b172:	1ac0      	subs	r0, r0, r3
 800b174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b176:	b10b      	cbz	r3, 800b17c <__sflush_r+0x48>
 800b178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b17a:	1ac0      	subs	r0, r0, r3
 800b17c:	2300      	movs	r3, #0
 800b17e:	4602      	mov	r2, r0
 800b180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b182:	6a21      	ldr	r1, [r4, #32]
 800b184:	4628      	mov	r0, r5
 800b186:	47b0      	blx	r6
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	d106      	bne.n	800b19c <__sflush_r+0x68>
 800b18e:	6829      	ldr	r1, [r5, #0]
 800b190:	291d      	cmp	r1, #29
 800b192:	d82b      	bhi.n	800b1ec <__sflush_r+0xb8>
 800b194:	4a29      	ldr	r2, [pc, #164]	; (800b23c <__sflush_r+0x108>)
 800b196:	410a      	asrs	r2, r1
 800b198:	07d6      	lsls	r6, r2, #31
 800b19a:	d427      	bmi.n	800b1ec <__sflush_r+0xb8>
 800b19c:	2200      	movs	r2, #0
 800b19e:	6062      	str	r2, [r4, #4]
 800b1a0:	04d9      	lsls	r1, r3, #19
 800b1a2:	6922      	ldr	r2, [r4, #16]
 800b1a4:	6022      	str	r2, [r4, #0]
 800b1a6:	d504      	bpl.n	800b1b2 <__sflush_r+0x7e>
 800b1a8:	1c42      	adds	r2, r0, #1
 800b1aa:	d101      	bne.n	800b1b0 <__sflush_r+0x7c>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b903      	cbnz	r3, 800b1b2 <__sflush_r+0x7e>
 800b1b0:	6560      	str	r0, [r4, #84]	; 0x54
 800b1b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1b4:	602f      	str	r7, [r5, #0]
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	d0c9      	beq.n	800b14e <__sflush_r+0x1a>
 800b1ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	d002      	beq.n	800b1c8 <__sflush_r+0x94>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7ff fbea 	bl	800a99c <_free_r>
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	6360      	str	r0, [r4, #52]	; 0x34
 800b1cc:	e7c0      	b.n	800b150 <__sflush_r+0x1c>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b0      	blx	r6
 800b1d4:	1c41      	adds	r1, r0, #1
 800b1d6:	d1c8      	bne.n	800b16a <__sflush_r+0x36>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0c5      	beq.n	800b16a <__sflush_r+0x36>
 800b1de:	2b1d      	cmp	r3, #29
 800b1e0:	d001      	beq.n	800b1e6 <__sflush_r+0xb2>
 800b1e2:	2b16      	cmp	r3, #22
 800b1e4:	d101      	bne.n	800b1ea <__sflush_r+0xb6>
 800b1e6:	602f      	str	r7, [r5, #0]
 800b1e8:	e7b1      	b.n	800b14e <__sflush_r+0x1a>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	e7ad      	b.n	800b150 <__sflush_r+0x1c>
 800b1f4:	690f      	ldr	r7, [r1, #16]
 800b1f6:	2f00      	cmp	r7, #0
 800b1f8:	d0a9      	beq.n	800b14e <__sflush_r+0x1a>
 800b1fa:	0793      	lsls	r3, r2, #30
 800b1fc:	680e      	ldr	r6, [r1, #0]
 800b1fe:	bf08      	it	eq
 800b200:	694b      	ldreq	r3, [r1, #20]
 800b202:	600f      	str	r7, [r1, #0]
 800b204:	bf18      	it	ne
 800b206:	2300      	movne	r3, #0
 800b208:	eba6 0807 	sub.w	r8, r6, r7
 800b20c:	608b      	str	r3, [r1, #8]
 800b20e:	f1b8 0f00 	cmp.w	r8, #0
 800b212:	dd9c      	ble.n	800b14e <__sflush_r+0x1a>
 800b214:	6a21      	ldr	r1, [r4, #32]
 800b216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b218:	4643      	mov	r3, r8
 800b21a:	463a      	mov	r2, r7
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b0      	blx	r6
 800b220:	2800      	cmp	r0, #0
 800b222:	dc06      	bgt.n	800b232 <__sflush_r+0xfe>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	e78e      	b.n	800b150 <__sflush_r+0x1c>
 800b232:	4407      	add	r7, r0
 800b234:	eba8 0800 	sub.w	r8, r8, r0
 800b238:	e7e9      	b.n	800b20e <__sflush_r+0xda>
 800b23a:	bf00      	nop
 800b23c:	dfbffffe 	.word	0xdfbffffe

0800b240 <_fflush_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	690b      	ldr	r3, [r1, #16]
 800b244:	4605      	mov	r5, r0
 800b246:	460c      	mov	r4, r1
 800b248:	b913      	cbnz	r3, 800b250 <_fflush_r+0x10>
 800b24a:	2500      	movs	r5, #0
 800b24c:	4628      	mov	r0, r5
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	b118      	cbz	r0, 800b25a <_fflush_r+0x1a>
 800b252:	6a03      	ldr	r3, [r0, #32]
 800b254:	b90b      	cbnz	r3, 800b25a <_fflush_r+0x1a>
 800b256:	f7ff f945 	bl	800a4e4 <__sinit>
 800b25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0f3      	beq.n	800b24a <_fflush_r+0xa>
 800b262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b264:	07d0      	lsls	r0, r2, #31
 800b266:	d404      	bmi.n	800b272 <_fflush_r+0x32>
 800b268:	0599      	lsls	r1, r3, #22
 800b26a:	d402      	bmi.n	800b272 <_fflush_r+0x32>
 800b26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b26e:	f7ff fb84 	bl	800a97a <__retarget_lock_acquire_recursive>
 800b272:	4628      	mov	r0, r5
 800b274:	4621      	mov	r1, r4
 800b276:	f7ff ff5d 	bl	800b134 <__sflush_r>
 800b27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b27c:	07da      	lsls	r2, r3, #31
 800b27e:	4605      	mov	r5, r0
 800b280:	d4e4      	bmi.n	800b24c <_fflush_r+0xc>
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	059b      	lsls	r3, r3, #22
 800b286:	d4e1      	bmi.n	800b24c <_fflush_r+0xc>
 800b288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b28a:	f7ff fb77 	bl	800a97c <__retarget_lock_release_recursive>
 800b28e:	e7dd      	b.n	800b24c <_fflush_r+0xc>

0800b290 <__swhatbuf_r>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	460c      	mov	r4, r1
 800b294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b298:	2900      	cmp	r1, #0
 800b29a:	b096      	sub	sp, #88	; 0x58
 800b29c:	4615      	mov	r5, r2
 800b29e:	461e      	mov	r6, r3
 800b2a0:	da0d      	bge.n	800b2be <__swhatbuf_r+0x2e>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2a8:	f04f 0100 	mov.w	r1, #0
 800b2ac:	bf0c      	ite	eq
 800b2ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b2b2:	2340      	movne	r3, #64	; 0x40
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	6031      	str	r1, [r6, #0]
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	b016      	add	sp, #88	; 0x58
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	466a      	mov	r2, sp
 800b2c0:	f000 f848 	bl	800b354 <_fstat_r>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	dbec      	blt.n	800b2a2 <__swhatbuf_r+0x12>
 800b2c8:	9901      	ldr	r1, [sp, #4]
 800b2ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b2ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b2d2:	4259      	negs	r1, r3
 800b2d4:	4159      	adcs	r1, r3
 800b2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2da:	e7eb      	b.n	800b2b4 <__swhatbuf_r+0x24>

0800b2dc <__smakebuf_r>:
 800b2dc:	898b      	ldrh	r3, [r1, #12]
 800b2de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2e0:	079d      	lsls	r5, r3, #30
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	d507      	bpl.n	800b2f8 <__smakebuf_r+0x1c>
 800b2e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	6163      	str	r3, [r4, #20]
 800b2f4:	b002      	add	sp, #8
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	ab01      	add	r3, sp, #4
 800b2fa:	466a      	mov	r2, sp
 800b2fc:	f7ff ffc8 	bl	800b290 <__swhatbuf_r>
 800b300:	9900      	ldr	r1, [sp, #0]
 800b302:	4605      	mov	r5, r0
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff fbb5 	bl	800aa74 <_malloc_r>
 800b30a:	b948      	cbnz	r0, 800b320 <__smakebuf_r+0x44>
 800b30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b310:	059a      	lsls	r2, r3, #22
 800b312:	d4ef      	bmi.n	800b2f4 <__smakebuf_r+0x18>
 800b314:	f023 0303 	bic.w	r3, r3, #3
 800b318:	f043 0302 	orr.w	r3, r3, #2
 800b31c:	81a3      	strh	r3, [r4, #12]
 800b31e:	e7e3      	b.n	800b2e8 <__smakebuf_r+0xc>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	6020      	str	r0, [r4, #0]
 800b324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	9b00      	ldr	r3, [sp, #0]
 800b32c:	6163      	str	r3, [r4, #20]
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	6120      	str	r0, [r4, #16]
 800b332:	b15b      	cbz	r3, 800b34c <__smakebuf_r+0x70>
 800b334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b338:	4630      	mov	r0, r6
 800b33a:	f000 f81d 	bl	800b378 <_isatty_r>
 800b33e:	b128      	cbz	r0, 800b34c <__smakebuf_r+0x70>
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	f023 0303 	bic.w	r3, r3, #3
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	431d      	orrs	r5, r3
 800b350:	81a5      	strh	r5, [r4, #12]
 800b352:	e7cf      	b.n	800b2f4 <__smakebuf_r+0x18>

0800b354 <_fstat_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	; (800b374 <_fstat_r+0x20>)
 800b358:	2300      	movs	r3, #0
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	4611      	mov	r1, r2
 800b360:	602b      	str	r3, [r5, #0]
 800b362:	f7f5 fe00 	bl	8000f66 <_fstat>
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d102      	bne.n	800b370 <_fstat_r+0x1c>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	b103      	cbz	r3, 800b370 <_fstat_r+0x1c>
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop
 800b374:	20019a98 	.word	0x20019a98

0800b378 <_isatty_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d06      	ldr	r5, [pc, #24]	; (800b394 <_isatty_r+0x1c>)
 800b37c:	2300      	movs	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	602b      	str	r3, [r5, #0]
 800b384:	f7f5 fdff 	bl	8000f86 <_isatty>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_isatty_r+0x1a>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_isatty_r+0x1a>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	20019a98 	.word	0x20019a98

0800b398 <_sbrk_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d06      	ldr	r5, [pc, #24]	; (800b3b4 <_sbrk_r+0x1c>)
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f5 fe08 	bl	8000fb8 <_sbrk>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_sbrk_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_sbrk_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20019a98 	.word	0x20019a98

0800b3b8 <_init>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr

0800b3c4 <_fini>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	bf00      	nop
 800b3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ca:	bc08      	pop	{r3}
 800b3cc:	469e      	mov	lr, r3
 800b3ce:	4770      	bx	lr
